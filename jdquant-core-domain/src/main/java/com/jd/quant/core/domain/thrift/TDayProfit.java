/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jd.quant.core.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 日收益大结构体
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-21")
public class TDayProfit implements org.apache.thrift.TBase<TDayProfit, TDayProfit._Fields>, java.io.Serializable, Cloneable, Comparable<TDayProfit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDayProfit");

  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField CUMULATIVE_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("cumulativePercent", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField BENCHMARK_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("benchmarkPercent", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField YEAR_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("yearPercent", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField YEAR_BENCHMARK_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("yearBenchmarkPercent", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField DAY_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dayProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField BUY_FIELD_DESC = new org.apache.thrift.protocol.TField("buy", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SELL_FIELD_DESC = new org.apache.thrift.protocol.TField("sell", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("cash", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField TOTAL_POSITION_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPositionPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_PORTFOLIO_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPortfolioValue", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField TOTAL_DAY_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalDayProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField HOLD_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("holdDetails", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField LOG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("logList", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField PLOT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("plotMap", org.apache.thrift.protocol.TType.MAP, (short)16);
  private static final org.apache.thrift.protocol.TField QUANT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantSummary", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField RISK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("riskList", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField RUN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("runTime", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField RUN_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("runPercent", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField TRANSACTION_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionDetails", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField PRE_BENCHMARK_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("preBenchmarkPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField INITIAL_VALUE_WEEKLY_FIELD_DESC = new org.apache.thrift.protocol.TField("initialValueWeekly", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField INITIAL_VALUE_MONTHLY_FIELD_DESC = new org.apache.thrift.protocol.TField("initialValueMonthly", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField DAYS_PASSED_FIELD_DESC = new org.apache.thrift.protocol.TField("daysPassed", org.apache.thrift.protocol.TType.I32, (short)25);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDayProfitStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDayProfitTupleSchemeFactory();

  public double commission; // optional
  public double cumulativePercent; // optional
  public double benchmarkPercent; // optional
  public double yearPercent; // optional
  public double yearBenchmarkPercent; // optional
  public double dayProfit; // optional
  public double buy; // optional
  public double sell; // optional
  public String date; // optional
  public double cash; // optional
  public double totalPositionPrice; // optional
  public double totalPortfolioValue; // optional
  public double totalDayProfit; // optional
  public java.util.List<THoldDetail> holdDetails; // optional
  public java.util.List<TLogOutput> logList; // optional
  public java.util.Map<String,Double> plotMap; // optional
  public TQuantSummary quantSummary; // optional
  public java.util.List<TRiskResult> riskList; // optional
  public double runTime; // optional
  public int runPercent; // optional
  public java.util.List<TTransactionDetail> transactionDetails; // optional
  public double preBenchmarkPrice; // optional
  public double initialValueWeekly; // optional
  public double initialValueMonthly; // optional
  public int daysPassed; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMISSION((short)1, "commission"),
    CUMULATIVE_PERCENT((short)2, "cumulativePercent"),
    BENCHMARK_PERCENT((short)3, "benchmarkPercent"),
    YEAR_PERCENT((short)4, "yearPercent"),
    YEAR_BENCHMARK_PERCENT((short)5, "yearBenchmarkPercent"),
    DAY_PROFIT((short)6, "dayProfit"),
    BUY((short)7, "buy"),
    SELL((short)8, "sell"),
    DATE((short)9, "date"),
    CASH((short)10, "cash"),
    TOTAL_POSITION_PRICE((short)11, "totalPositionPrice"),
    TOTAL_PORTFOLIO_VALUE((short)12, "totalPortfolioValue"),
    TOTAL_DAY_PROFIT((short)13, "totalDayProfit"),
    HOLD_DETAILS((short)14, "holdDetails"),
    LOG_LIST((short)15, "logList"),
    PLOT_MAP((short)16, "plotMap"),
    QUANT_SUMMARY((short)17, "quantSummary"),
    RISK_LIST((short)18, "riskList"),
    RUN_TIME((short)19, "runTime"),
    RUN_PERCENT((short)20, "runPercent"),
    TRANSACTION_DETAILS((short)21, "transactionDetails"),
    PRE_BENCHMARK_PRICE((short)22, "preBenchmarkPrice"),
    INITIAL_VALUE_WEEKLY((short)23, "initialValueWeekly"),
    INITIAL_VALUE_MONTHLY((short)24, "initialValueMonthly"),
    DAYS_PASSED((short)25, "daysPassed");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMISSION
          return COMMISSION;
        case 2: // CUMULATIVE_PERCENT
          return CUMULATIVE_PERCENT;
        case 3: // BENCHMARK_PERCENT
          return BENCHMARK_PERCENT;
        case 4: // YEAR_PERCENT
          return YEAR_PERCENT;
        case 5: // YEAR_BENCHMARK_PERCENT
          return YEAR_BENCHMARK_PERCENT;
        case 6: // DAY_PROFIT
          return DAY_PROFIT;
        case 7: // BUY
          return BUY;
        case 8: // SELL
          return SELL;
        case 9: // DATE
          return DATE;
        case 10: // CASH
          return CASH;
        case 11: // TOTAL_POSITION_PRICE
          return TOTAL_POSITION_PRICE;
        case 12: // TOTAL_PORTFOLIO_VALUE
          return TOTAL_PORTFOLIO_VALUE;
        case 13: // TOTAL_DAY_PROFIT
          return TOTAL_DAY_PROFIT;
        case 14: // HOLD_DETAILS
          return HOLD_DETAILS;
        case 15: // LOG_LIST
          return LOG_LIST;
        case 16: // PLOT_MAP
          return PLOT_MAP;
        case 17: // QUANT_SUMMARY
          return QUANT_SUMMARY;
        case 18: // RISK_LIST
          return RISK_LIST;
        case 19: // RUN_TIME
          return RUN_TIME;
        case 20: // RUN_PERCENT
          return RUN_PERCENT;
        case 21: // TRANSACTION_DETAILS
          return TRANSACTION_DETAILS;
        case 22: // PRE_BENCHMARK_PRICE
          return PRE_BENCHMARK_PRICE;
        case 23: // INITIAL_VALUE_WEEKLY
          return INITIAL_VALUE_WEEKLY;
        case 24: // INITIAL_VALUE_MONTHLY
          return INITIAL_VALUE_MONTHLY;
        case 25: // DAYS_PASSED
          return DAYS_PASSED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMMISSION_ISSET_ID = 0;
  private static final int __CUMULATIVEPERCENT_ISSET_ID = 1;
  private static final int __BENCHMARKPERCENT_ISSET_ID = 2;
  private static final int __YEARPERCENT_ISSET_ID = 3;
  private static final int __YEARBENCHMARKPERCENT_ISSET_ID = 4;
  private static final int __DAYPROFIT_ISSET_ID = 5;
  private static final int __BUY_ISSET_ID = 6;
  private static final int __SELL_ISSET_ID = 7;
  private static final int __CASH_ISSET_ID = 8;
  private static final int __TOTALPOSITIONPRICE_ISSET_ID = 9;
  private static final int __TOTALPORTFOLIOVALUE_ISSET_ID = 10;
  private static final int __TOTALDAYPROFIT_ISSET_ID = 11;
  private static final int __RUNTIME_ISSET_ID = 12;
  private static final int __RUNPERCENT_ISSET_ID = 13;
  private static final int __PREBENCHMARKPRICE_ISSET_ID = 14;
  private static final int __INITIALVALUEWEEKLY_ISSET_ID = 15;
  private static final int __INITIALVALUEMONTHLY_ISSET_ID = 16;
  private static final int __DAYSPASSED_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMMISSION,_Fields.CUMULATIVE_PERCENT,_Fields.BENCHMARK_PERCENT,_Fields.YEAR_PERCENT,_Fields.YEAR_BENCHMARK_PERCENT,_Fields.DAY_PROFIT,_Fields.BUY,_Fields.SELL,_Fields.DATE,_Fields.CASH,_Fields.TOTAL_POSITION_PRICE,_Fields.TOTAL_PORTFOLIO_VALUE,_Fields.TOTAL_DAY_PROFIT,_Fields.HOLD_DETAILS,_Fields.LOG_LIST,_Fields.PLOT_MAP,_Fields.QUANT_SUMMARY,_Fields.RISK_LIST,_Fields.RUN_TIME,_Fields.RUN_PERCENT,_Fields.TRANSACTION_DETAILS,_Fields.PRE_BENCHMARK_PRICE,_Fields.INITIAL_VALUE_WEEKLY,_Fields.INITIAL_VALUE_MONTHLY,_Fields.DAYS_PASSED};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CUMULATIVE_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("cumulativePercent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BENCHMARK_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("benchmarkPercent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEAR_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("yearPercent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEAR_BENCHMARK_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("yearBenchmarkPercent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAY_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("dayProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUY, new org.apache.thrift.meta_data.FieldMetaData("buy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELL, new org.apache.thrift.meta_data.FieldMetaData("sell", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASH, new org.apache.thrift.meta_data.FieldMetaData("cash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_POSITION_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPositionPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_PORTFOLIO_VALUE, new org.apache.thrift.meta_data.FieldMetaData("totalPortfolioValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_DAY_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("totalDayProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOLD_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("holdDetails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THoldDetail.class))));
    tmpMap.put(_Fields.LOG_LIST, new org.apache.thrift.meta_data.FieldMetaData("logList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLogOutput.class))));
    tmpMap.put(_Fields.PLOT_MAP, new org.apache.thrift.meta_data.FieldMetaData("plotMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.QUANT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("quantSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQuantSummary.class)));
    tmpMap.put(_Fields.RISK_LIST, new org.apache.thrift.meta_data.FieldMetaData("riskList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRiskResult.class))));
    tmpMap.put(_Fields.RUN_TIME, new org.apache.thrift.meta_data.FieldMetaData("runTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RUN_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("runPercent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANSACTION_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("transactionDetails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransactionDetail.class))));
    tmpMap.put(_Fields.PRE_BENCHMARK_PRICE, new org.apache.thrift.meta_data.FieldMetaData("preBenchmarkPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INITIAL_VALUE_WEEKLY, new org.apache.thrift.meta_data.FieldMetaData("initialValueWeekly", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INITIAL_VALUE_MONTHLY, new org.apache.thrift.meta_data.FieldMetaData("initialValueMonthly", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAYS_PASSED, new org.apache.thrift.meta_data.FieldMetaData("daysPassed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDayProfit.class, metaDataMap);
  }

  public TDayProfit() {
    this.commission = 0;

    this.cumulativePercent = 0;

    this.benchmarkPercent = 0;

    this.yearPercent = 0;

    this.yearBenchmarkPercent = 0;

    this.dayProfit = 0;

    this.buy = 0;

    this.sell = 0;

    this.cash = 0;

    this.totalPositionPrice = 0;

    this.totalPortfolioValue = 0;

    this.totalDayProfit = 0;

    this.runTime = 0;

    this.preBenchmarkPrice = 0;

    this.initialValueWeekly = 0;

    this.initialValueMonthly = 0;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDayProfit(TDayProfit other) {
    __isset_bitfield = other.__isset_bitfield;
    this.commission = other.commission;
    this.cumulativePercent = other.cumulativePercent;
    this.benchmarkPercent = other.benchmarkPercent;
    this.yearPercent = other.yearPercent;
    this.yearBenchmarkPercent = other.yearBenchmarkPercent;
    this.dayProfit = other.dayProfit;
    this.buy = other.buy;
    this.sell = other.sell;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.cash = other.cash;
    this.totalPositionPrice = other.totalPositionPrice;
    this.totalPortfolioValue = other.totalPortfolioValue;
    this.totalDayProfit = other.totalDayProfit;
    if (other.isSetHoldDetails()) {
      java.util.List<THoldDetail> __this__holdDetails = new java.util.ArrayList<THoldDetail>(other.holdDetails.size());
      for (THoldDetail other_element : other.holdDetails) {
        __this__holdDetails.add(new THoldDetail(other_element));
      }
      this.holdDetails = __this__holdDetails;
    }
    if (other.isSetLogList()) {
      java.util.List<TLogOutput> __this__logList = new java.util.ArrayList<TLogOutput>(other.logList.size());
      for (TLogOutput other_element : other.logList) {
        __this__logList.add(new TLogOutput(other_element));
      }
      this.logList = __this__logList;
    }
    if (other.isSetPlotMap()) {
      java.util.Map<String,Double> __this__plotMap = new java.util.HashMap<String,Double>(other.plotMap);
      this.plotMap = __this__plotMap;
    }
    if (other.isSetQuantSummary()) {
      this.quantSummary = new TQuantSummary(other.quantSummary);
    }
    if (other.isSetRiskList()) {
      java.util.List<TRiskResult> __this__riskList = new java.util.ArrayList<TRiskResult>(other.riskList.size());
      for (TRiskResult other_element : other.riskList) {
        __this__riskList.add(new TRiskResult(other_element));
      }
      this.riskList = __this__riskList;
    }
    this.runTime = other.runTime;
    this.runPercent = other.runPercent;
    if (other.isSetTransactionDetails()) {
      java.util.List<TTransactionDetail> __this__transactionDetails = new java.util.ArrayList<TTransactionDetail>(other.transactionDetails.size());
      for (TTransactionDetail other_element : other.transactionDetails) {
        __this__transactionDetails.add(new TTransactionDetail(other_element));
      }
      this.transactionDetails = __this__transactionDetails;
    }
    this.preBenchmarkPrice = other.preBenchmarkPrice;
    this.initialValueWeekly = other.initialValueWeekly;
    this.initialValueMonthly = other.initialValueMonthly;
    this.daysPassed = other.daysPassed;
  }

  public TDayProfit deepCopy() {
    return new TDayProfit(this);
  }

  @Override
  public void clear() {
    this.commission = 0;

    this.cumulativePercent = 0;

    this.benchmarkPercent = 0;

    this.yearPercent = 0;

    this.yearBenchmarkPercent = 0;

    this.dayProfit = 0;

    this.buy = 0;

    this.sell = 0;

    this.date = null;
    this.cash = 0;

    this.totalPositionPrice = 0;

    this.totalPortfolioValue = 0;

    this.totalDayProfit = 0;

    this.holdDetails = null;
    this.logList = null;
    this.plotMap = null;
    this.quantSummary = null;
    this.riskList = null;
    this.runTime = 0;

    setRunPercentIsSet(false);
    this.runPercent = 0;
    this.transactionDetails = null;
    this.preBenchmarkPrice = 0;

    this.initialValueWeekly = 0;

    this.initialValueMonthly = 0;

    setDaysPassedIsSet(false);
    this.daysPassed = 0;
  }

  public double getCommission() {
    return this.commission;
  }

  public TDayProfit setCommission(double commission) {
    this.commission = commission;
    setCommissionIsSet(true);
    return this;
  }

  public void unsetCommission() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  public void setCommissionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMISSION_ISSET_ID, value);
  }

  public double getCumulativePercent() {
    return this.cumulativePercent;
  }

  public TDayProfit setCumulativePercent(double cumulativePercent) {
    this.cumulativePercent = cumulativePercent;
    setCumulativePercentIsSet(true);
    return this;
  }

  public void unsetCumulativePercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CUMULATIVEPERCENT_ISSET_ID);
  }

  /** Returns true if field cumulativePercent is set (has been assigned a value) and false otherwise */
  public boolean isSetCumulativePercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CUMULATIVEPERCENT_ISSET_ID);
  }

  public void setCumulativePercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CUMULATIVEPERCENT_ISSET_ID, value);
  }

  public double getBenchmarkPercent() {
    return this.benchmarkPercent;
  }

  public TDayProfit setBenchmarkPercent(double benchmarkPercent) {
    this.benchmarkPercent = benchmarkPercent;
    setBenchmarkPercentIsSet(true);
    return this;
  }

  public void unsetBenchmarkPercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BENCHMARKPERCENT_ISSET_ID);
  }

  /** Returns true if field benchmarkPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetBenchmarkPercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BENCHMARKPERCENT_ISSET_ID);
  }

  public void setBenchmarkPercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BENCHMARKPERCENT_ISSET_ID, value);
  }

  public double getYearPercent() {
    return this.yearPercent;
  }

  public TDayProfit setYearPercent(double yearPercent) {
    this.yearPercent = yearPercent;
    setYearPercentIsSet(true);
    return this;
  }

  public void unsetYearPercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YEARPERCENT_ISSET_ID);
  }

  /** Returns true if field yearPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetYearPercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YEARPERCENT_ISSET_ID);
  }

  public void setYearPercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YEARPERCENT_ISSET_ID, value);
  }

  public double getYearBenchmarkPercent() {
    return this.yearBenchmarkPercent;
  }

  public TDayProfit setYearBenchmarkPercent(double yearBenchmarkPercent) {
    this.yearBenchmarkPercent = yearBenchmarkPercent;
    setYearBenchmarkPercentIsSet(true);
    return this;
  }

  public void unsetYearBenchmarkPercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YEARBENCHMARKPERCENT_ISSET_ID);
  }

  /** Returns true if field yearBenchmarkPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetYearBenchmarkPercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YEARBENCHMARKPERCENT_ISSET_ID);
  }

  public void setYearBenchmarkPercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YEARBENCHMARKPERCENT_ISSET_ID, value);
  }

  public double getDayProfit() {
    return this.dayProfit;
  }

  public TDayProfit setDayProfit(double dayProfit) {
    this.dayProfit = dayProfit;
    setDayProfitIsSet(true);
    return this;
  }

  public void unsetDayProfit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DAYPROFIT_ISSET_ID);
  }

  /** Returns true if field dayProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetDayProfit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DAYPROFIT_ISSET_ID);
  }

  public void setDayProfitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DAYPROFIT_ISSET_ID, value);
  }

  public double getBuy() {
    return this.buy;
  }

  public TDayProfit setBuy(double buy) {
    this.buy = buy;
    setBuyIsSet(true);
    return this;
  }

  public void unsetBuy() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUY_ISSET_ID);
  }

  /** Returns true if field buy is set (has been assigned a value) and false otherwise */
  public boolean isSetBuy() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUY_ISSET_ID);
  }

  public void setBuyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUY_ISSET_ID, value);
  }

  public double getSell() {
    return this.sell;
  }

  public TDayProfit setSell(double sell) {
    this.sell = sell;
    setSellIsSet(true);
    return this;
  }

  public void unsetSell() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SELL_ISSET_ID);
  }

  /** Returns true if field sell is set (has been assigned a value) and false otherwise */
  public boolean isSetSell() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SELL_ISSET_ID);
  }

  public void setSellIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SELL_ISSET_ID, value);
  }

  public String getDate() {
    return this.date;
  }

  public TDayProfit setDate(String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public double getCash() {
    return this.cash;
  }

  public TDayProfit setCash(double cash) {
    this.cash = cash;
    setCashIsSet(true);
    return this;
  }

  public void unsetCash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  /** Returns true if field cash is set (has been assigned a value) and false otherwise */
  public boolean isSetCash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  public void setCashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CASH_ISSET_ID, value);
  }

  public double getTotalPositionPrice() {
    return this.totalPositionPrice;
  }

  public TDayProfit setTotalPositionPrice(double totalPositionPrice) {
    this.totalPositionPrice = totalPositionPrice;
    setTotalPositionPriceIsSet(true);
    return this;
  }

  public void unsetTotalPositionPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALPOSITIONPRICE_ISSET_ID);
  }

  /** Returns true if field totalPositionPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPositionPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALPOSITIONPRICE_ISSET_ID);
  }

  public void setTotalPositionPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALPOSITIONPRICE_ISSET_ID, value);
  }

  public double getTotalPortfolioValue() {
    return this.totalPortfolioValue;
  }

  public TDayProfit setTotalPortfolioValue(double totalPortfolioValue) {
    this.totalPortfolioValue = totalPortfolioValue;
    setTotalPortfolioValueIsSet(true);
    return this;
  }

  public void unsetTotalPortfolioValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALPORTFOLIOVALUE_ISSET_ID);
  }

  /** Returns true if field totalPortfolioValue is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPortfolioValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALPORTFOLIOVALUE_ISSET_ID);
  }

  public void setTotalPortfolioValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALPORTFOLIOVALUE_ISSET_ID, value);
  }

  public double getTotalDayProfit() {
    return this.totalDayProfit;
  }

  public TDayProfit setTotalDayProfit(double totalDayProfit) {
    this.totalDayProfit = totalDayProfit;
    setTotalDayProfitIsSet(true);
    return this;
  }

  public void unsetTotalDayProfit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALDAYPROFIT_ISSET_ID);
  }

  /** Returns true if field totalDayProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalDayProfit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALDAYPROFIT_ISSET_ID);
  }

  public void setTotalDayProfitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALDAYPROFIT_ISSET_ID, value);
  }

  public int getHoldDetailsSize() {
    return (this.holdDetails == null) ? 0 : this.holdDetails.size();
  }

  public java.util.Iterator<THoldDetail> getHoldDetailsIterator() {
    return (this.holdDetails == null) ? null : this.holdDetails.iterator();
  }

  public void addToHoldDetails(THoldDetail elem) {
    if (this.holdDetails == null) {
      this.holdDetails = new java.util.ArrayList<THoldDetail>();
    }
    this.holdDetails.add(elem);
  }

  public java.util.List<THoldDetail> getHoldDetails() {
    return this.holdDetails;
  }

  public TDayProfit setHoldDetails(java.util.List<THoldDetail> holdDetails) {
    this.holdDetails = holdDetails;
    return this;
  }

  public void unsetHoldDetails() {
    this.holdDetails = null;
  }

  /** Returns true if field holdDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetHoldDetails() {
    return this.holdDetails != null;
  }

  public void setHoldDetailsIsSet(boolean value) {
    if (!value) {
      this.holdDetails = null;
    }
  }

  public int getLogListSize() {
    return (this.logList == null) ? 0 : this.logList.size();
  }

  public java.util.Iterator<TLogOutput> getLogListIterator() {
    return (this.logList == null) ? null : this.logList.iterator();
  }

  public void addToLogList(TLogOutput elem) {
    if (this.logList == null) {
      this.logList = new java.util.ArrayList<TLogOutput>();
    }
    this.logList.add(elem);
  }

  public java.util.List<TLogOutput> getLogList() {
    return this.logList;
  }

  public TDayProfit setLogList(java.util.List<TLogOutput> logList) {
    this.logList = logList;
    return this;
  }

  public void unsetLogList() {
    this.logList = null;
  }

  /** Returns true if field logList is set (has been assigned a value) and false otherwise */
  public boolean isSetLogList() {
    return this.logList != null;
  }

  public void setLogListIsSet(boolean value) {
    if (!value) {
      this.logList = null;
    }
  }

  public int getPlotMapSize() {
    return (this.plotMap == null) ? 0 : this.plotMap.size();
  }

  public void putToPlotMap(String key, double val) {
    if (this.plotMap == null) {
      this.plotMap = new java.util.HashMap<String,Double>();
    }
    this.plotMap.put(key, val);
  }

  public java.util.Map<String,Double> getPlotMap() {
    return this.plotMap;
  }

  public TDayProfit setPlotMap(java.util.Map<String,Double> plotMap) {
    this.plotMap = plotMap;
    return this;
  }

  public void unsetPlotMap() {
    this.plotMap = null;
  }

  /** Returns true if field plotMap is set (has been assigned a value) and false otherwise */
  public boolean isSetPlotMap() {
    return this.plotMap != null;
  }

  public void setPlotMapIsSet(boolean value) {
    if (!value) {
      this.plotMap = null;
    }
  }

  public TQuantSummary getQuantSummary() {
    return this.quantSummary;
  }

  public TDayProfit setQuantSummary(TQuantSummary quantSummary) {
    this.quantSummary = quantSummary;
    return this;
  }

  public void unsetQuantSummary() {
    this.quantSummary = null;
  }

  /** Returns true if field quantSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantSummary() {
    return this.quantSummary != null;
  }

  public void setQuantSummaryIsSet(boolean value) {
    if (!value) {
      this.quantSummary = null;
    }
  }

  public int getRiskListSize() {
    return (this.riskList == null) ? 0 : this.riskList.size();
  }

  public java.util.Iterator<TRiskResult> getRiskListIterator() {
    return (this.riskList == null) ? null : this.riskList.iterator();
  }

  public void addToRiskList(TRiskResult elem) {
    if (this.riskList == null) {
      this.riskList = new java.util.ArrayList<TRiskResult>();
    }
    this.riskList.add(elem);
  }

  public java.util.List<TRiskResult> getRiskList() {
    return this.riskList;
  }

  public TDayProfit setRiskList(java.util.List<TRiskResult> riskList) {
    this.riskList = riskList;
    return this;
  }

  public void unsetRiskList() {
    this.riskList = null;
  }

  /** Returns true if field riskList is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskList() {
    return this.riskList != null;
  }

  public void setRiskListIsSet(boolean value) {
    if (!value) {
      this.riskList = null;
    }
  }

  public double getRunTime() {
    return this.runTime;
  }

  public TDayProfit setRunTime(double runTime) {
    this.runTime = runTime;
    setRunTimeIsSet(true);
    return this;
  }

  public void unsetRunTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNTIME_ISSET_ID);
  }

  /** Returns true if field runTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRunTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNTIME_ISSET_ID);
  }

  public void setRunTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNTIME_ISSET_ID, value);
  }

  public int getRunPercent() {
    return this.runPercent;
  }

  public TDayProfit setRunPercent(int runPercent) {
    this.runPercent = runPercent;
    setRunPercentIsSet(true);
    return this;
  }

  public void unsetRunPercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNPERCENT_ISSET_ID);
  }

  /** Returns true if field runPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetRunPercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNPERCENT_ISSET_ID);
  }

  public void setRunPercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNPERCENT_ISSET_ID, value);
  }

  public int getTransactionDetailsSize() {
    return (this.transactionDetails == null) ? 0 : this.transactionDetails.size();
  }

  public java.util.Iterator<TTransactionDetail> getTransactionDetailsIterator() {
    return (this.transactionDetails == null) ? null : this.transactionDetails.iterator();
  }

  public void addToTransactionDetails(TTransactionDetail elem) {
    if (this.transactionDetails == null) {
      this.transactionDetails = new java.util.ArrayList<TTransactionDetail>();
    }
    this.transactionDetails.add(elem);
  }

  public java.util.List<TTransactionDetail> getTransactionDetails() {
    return this.transactionDetails;
  }

  public TDayProfit setTransactionDetails(java.util.List<TTransactionDetail> transactionDetails) {
    this.transactionDetails = transactionDetails;
    return this;
  }

  public void unsetTransactionDetails() {
    this.transactionDetails = null;
  }

  /** Returns true if field transactionDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionDetails() {
    return this.transactionDetails != null;
  }

  public void setTransactionDetailsIsSet(boolean value) {
    if (!value) {
      this.transactionDetails = null;
    }
  }

  public double getPreBenchmarkPrice() {
    return this.preBenchmarkPrice;
  }

  public TDayProfit setPreBenchmarkPrice(double preBenchmarkPrice) {
    this.preBenchmarkPrice = preBenchmarkPrice;
    setPreBenchmarkPriceIsSet(true);
    return this;
  }

  public void unsetPreBenchmarkPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PREBENCHMARKPRICE_ISSET_ID);
  }

  /** Returns true if field preBenchmarkPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetPreBenchmarkPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PREBENCHMARKPRICE_ISSET_ID);
  }

  public void setPreBenchmarkPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PREBENCHMARKPRICE_ISSET_ID, value);
  }

  public double getInitialValueWeekly() {
    return this.initialValueWeekly;
  }

  public TDayProfit setInitialValueWeekly(double initialValueWeekly) {
    this.initialValueWeekly = initialValueWeekly;
    setInitialValueWeeklyIsSet(true);
    return this;
  }

  public void unsetInitialValueWeekly() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INITIALVALUEWEEKLY_ISSET_ID);
  }

  /** Returns true if field initialValueWeekly is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialValueWeekly() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INITIALVALUEWEEKLY_ISSET_ID);
  }

  public void setInitialValueWeeklyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INITIALVALUEWEEKLY_ISSET_ID, value);
  }

  public double getInitialValueMonthly() {
    return this.initialValueMonthly;
  }

  public TDayProfit setInitialValueMonthly(double initialValueMonthly) {
    this.initialValueMonthly = initialValueMonthly;
    setInitialValueMonthlyIsSet(true);
    return this;
  }

  public void unsetInitialValueMonthly() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INITIALVALUEMONTHLY_ISSET_ID);
  }

  /** Returns true if field initialValueMonthly is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialValueMonthly() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INITIALVALUEMONTHLY_ISSET_ID);
  }

  public void setInitialValueMonthlyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INITIALVALUEMONTHLY_ISSET_ID, value);
  }

  public int getDaysPassed() {
    return this.daysPassed;
  }

  public TDayProfit setDaysPassed(int daysPassed) {
    this.daysPassed = daysPassed;
    setDaysPassedIsSet(true);
    return this;
  }

  public void unsetDaysPassed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DAYSPASSED_ISSET_ID);
  }

  /** Returns true if field daysPassed is set (has been assigned a value) and false otherwise */
  public boolean isSetDaysPassed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DAYSPASSED_ISSET_ID);
  }

  public void setDaysPassedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DAYSPASSED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((Double)value);
      }
      break;

    case CUMULATIVE_PERCENT:
      if (value == null) {
        unsetCumulativePercent();
      } else {
        setCumulativePercent((Double)value);
      }
      break;

    case BENCHMARK_PERCENT:
      if (value == null) {
        unsetBenchmarkPercent();
      } else {
        setBenchmarkPercent((Double)value);
      }
      break;

    case YEAR_PERCENT:
      if (value == null) {
        unsetYearPercent();
      } else {
        setYearPercent((Double)value);
      }
      break;

    case YEAR_BENCHMARK_PERCENT:
      if (value == null) {
        unsetYearBenchmarkPercent();
      } else {
        setYearBenchmarkPercent((Double)value);
      }
      break;

    case DAY_PROFIT:
      if (value == null) {
        unsetDayProfit();
      } else {
        setDayProfit((Double)value);
      }
      break;

    case BUY:
      if (value == null) {
        unsetBuy();
      } else {
        setBuy((Double)value);
      }
      break;

    case SELL:
      if (value == null) {
        unsetSell();
      } else {
        setSell((Double)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case CASH:
      if (value == null) {
        unsetCash();
      } else {
        setCash((Double)value);
      }
      break;

    case TOTAL_POSITION_PRICE:
      if (value == null) {
        unsetTotalPositionPrice();
      } else {
        setTotalPositionPrice((Double)value);
      }
      break;

    case TOTAL_PORTFOLIO_VALUE:
      if (value == null) {
        unsetTotalPortfolioValue();
      } else {
        setTotalPortfolioValue((Double)value);
      }
      break;

    case TOTAL_DAY_PROFIT:
      if (value == null) {
        unsetTotalDayProfit();
      } else {
        setTotalDayProfit((Double)value);
      }
      break;

    case HOLD_DETAILS:
      if (value == null) {
        unsetHoldDetails();
      } else {
        setHoldDetails((java.util.List<THoldDetail>)value);
      }
      break;

    case LOG_LIST:
      if (value == null) {
        unsetLogList();
      } else {
        setLogList((java.util.List<TLogOutput>)value);
      }
      break;

    case PLOT_MAP:
      if (value == null) {
        unsetPlotMap();
      } else {
        setPlotMap((java.util.Map<String,Double>)value);
      }
      break;

    case QUANT_SUMMARY:
      if (value == null) {
        unsetQuantSummary();
      } else {
        setQuantSummary((TQuantSummary)value);
      }
      break;

    case RISK_LIST:
      if (value == null) {
        unsetRiskList();
      } else {
        setRiskList((java.util.List<TRiskResult>)value);
      }
      break;

    case RUN_TIME:
      if (value == null) {
        unsetRunTime();
      } else {
        setRunTime((Double)value);
      }
      break;

    case RUN_PERCENT:
      if (value == null) {
        unsetRunPercent();
      } else {
        setRunPercent((Integer)value);
      }
      break;

    case TRANSACTION_DETAILS:
      if (value == null) {
        unsetTransactionDetails();
      } else {
        setTransactionDetails((java.util.List<TTransactionDetail>)value);
      }
      break;

    case PRE_BENCHMARK_PRICE:
      if (value == null) {
        unsetPreBenchmarkPrice();
      } else {
        setPreBenchmarkPrice((Double)value);
      }
      break;

    case INITIAL_VALUE_WEEKLY:
      if (value == null) {
        unsetInitialValueWeekly();
      } else {
        setInitialValueWeekly((Double)value);
      }
      break;

    case INITIAL_VALUE_MONTHLY:
      if (value == null) {
        unsetInitialValueMonthly();
      } else {
        setInitialValueMonthly((Double)value);
      }
      break;

    case DAYS_PASSED:
      if (value == null) {
        unsetDaysPassed();
      } else {
        setDaysPassed((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMISSION:
      return getCommission();

    case CUMULATIVE_PERCENT:
      return getCumulativePercent();

    case BENCHMARK_PERCENT:
      return getBenchmarkPercent();

    case YEAR_PERCENT:
      return getYearPercent();

    case YEAR_BENCHMARK_PERCENT:
      return getYearBenchmarkPercent();

    case DAY_PROFIT:
      return getDayProfit();

    case BUY:
      return getBuy();

    case SELL:
      return getSell();

    case DATE:
      return getDate();

    case CASH:
      return getCash();

    case TOTAL_POSITION_PRICE:
      return getTotalPositionPrice();

    case TOTAL_PORTFOLIO_VALUE:
      return getTotalPortfolioValue();

    case TOTAL_DAY_PROFIT:
      return getTotalDayProfit();

    case HOLD_DETAILS:
      return getHoldDetails();

    case LOG_LIST:
      return getLogList();

    case PLOT_MAP:
      return getPlotMap();

    case QUANT_SUMMARY:
      return getQuantSummary();

    case RISK_LIST:
      return getRiskList();

    case RUN_TIME:
      return getRunTime();

    case RUN_PERCENT:
      return getRunPercent();

    case TRANSACTION_DETAILS:
      return getTransactionDetails();

    case PRE_BENCHMARK_PRICE:
      return getPreBenchmarkPrice();

    case INITIAL_VALUE_WEEKLY:
      return getInitialValueWeekly();

    case INITIAL_VALUE_MONTHLY:
      return getInitialValueMonthly();

    case DAYS_PASSED:
      return getDaysPassed();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMISSION:
      return isSetCommission();
    case CUMULATIVE_PERCENT:
      return isSetCumulativePercent();
    case BENCHMARK_PERCENT:
      return isSetBenchmarkPercent();
    case YEAR_PERCENT:
      return isSetYearPercent();
    case YEAR_BENCHMARK_PERCENT:
      return isSetYearBenchmarkPercent();
    case DAY_PROFIT:
      return isSetDayProfit();
    case BUY:
      return isSetBuy();
    case SELL:
      return isSetSell();
    case DATE:
      return isSetDate();
    case CASH:
      return isSetCash();
    case TOTAL_POSITION_PRICE:
      return isSetTotalPositionPrice();
    case TOTAL_PORTFOLIO_VALUE:
      return isSetTotalPortfolioValue();
    case TOTAL_DAY_PROFIT:
      return isSetTotalDayProfit();
    case HOLD_DETAILS:
      return isSetHoldDetails();
    case LOG_LIST:
      return isSetLogList();
    case PLOT_MAP:
      return isSetPlotMap();
    case QUANT_SUMMARY:
      return isSetQuantSummary();
    case RISK_LIST:
      return isSetRiskList();
    case RUN_TIME:
      return isSetRunTime();
    case RUN_PERCENT:
      return isSetRunPercent();
    case TRANSACTION_DETAILS:
      return isSetTransactionDetails();
    case PRE_BENCHMARK_PRICE:
      return isSetPreBenchmarkPrice();
    case INITIAL_VALUE_WEEKLY:
      return isSetInitialValueWeekly();
    case INITIAL_VALUE_MONTHLY:
      return isSetInitialValueMonthly();
    case DAYS_PASSED:
      return isSetDaysPassed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDayProfit)
      return this.equals((TDayProfit)that);
    return false;
  }

  public boolean equals(TDayProfit that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_commission = true && this.isSetCommission();
    boolean that_present_commission = true && that.isSetCommission();
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (this.commission != that.commission)
        return false;
    }

    boolean this_present_cumulativePercent = true && this.isSetCumulativePercent();
    boolean that_present_cumulativePercent = true && that.isSetCumulativePercent();
    if (this_present_cumulativePercent || that_present_cumulativePercent) {
      if (!(this_present_cumulativePercent && that_present_cumulativePercent))
        return false;
      if (this.cumulativePercent != that.cumulativePercent)
        return false;
    }

    boolean this_present_benchmarkPercent = true && this.isSetBenchmarkPercent();
    boolean that_present_benchmarkPercent = true && that.isSetBenchmarkPercent();
    if (this_present_benchmarkPercent || that_present_benchmarkPercent) {
      if (!(this_present_benchmarkPercent && that_present_benchmarkPercent))
        return false;
      if (this.benchmarkPercent != that.benchmarkPercent)
        return false;
    }

    boolean this_present_yearPercent = true && this.isSetYearPercent();
    boolean that_present_yearPercent = true && that.isSetYearPercent();
    if (this_present_yearPercent || that_present_yearPercent) {
      if (!(this_present_yearPercent && that_present_yearPercent))
        return false;
      if (this.yearPercent != that.yearPercent)
        return false;
    }

    boolean this_present_yearBenchmarkPercent = true && this.isSetYearBenchmarkPercent();
    boolean that_present_yearBenchmarkPercent = true && that.isSetYearBenchmarkPercent();
    if (this_present_yearBenchmarkPercent || that_present_yearBenchmarkPercent) {
      if (!(this_present_yearBenchmarkPercent && that_present_yearBenchmarkPercent))
        return false;
      if (this.yearBenchmarkPercent != that.yearBenchmarkPercent)
        return false;
    }

    boolean this_present_dayProfit = true && this.isSetDayProfit();
    boolean that_present_dayProfit = true && that.isSetDayProfit();
    if (this_present_dayProfit || that_present_dayProfit) {
      if (!(this_present_dayProfit && that_present_dayProfit))
        return false;
      if (this.dayProfit != that.dayProfit)
        return false;
    }

    boolean this_present_buy = true && this.isSetBuy();
    boolean that_present_buy = true && that.isSetBuy();
    if (this_present_buy || that_present_buy) {
      if (!(this_present_buy && that_present_buy))
        return false;
      if (this.buy != that.buy)
        return false;
    }

    boolean this_present_sell = true && this.isSetSell();
    boolean that_present_sell = true && that.isSetSell();
    if (this_present_sell || that_present_sell) {
      if (!(this_present_sell && that_present_sell))
        return false;
      if (this.sell != that.sell)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_cash = true && this.isSetCash();
    boolean that_present_cash = true && that.isSetCash();
    if (this_present_cash || that_present_cash) {
      if (!(this_present_cash && that_present_cash))
        return false;
      if (this.cash != that.cash)
        return false;
    }

    boolean this_present_totalPositionPrice = true && this.isSetTotalPositionPrice();
    boolean that_present_totalPositionPrice = true && that.isSetTotalPositionPrice();
    if (this_present_totalPositionPrice || that_present_totalPositionPrice) {
      if (!(this_present_totalPositionPrice && that_present_totalPositionPrice))
        return false;
      if (this.totalPositionPrice != that.totalPositionPrice)
        return false;
    }

    boolean this_present_totalPortfolioValue = true && this.isSetTotalPortfolioValue();
    boolean that_present_totalPortfolioValue = true && that.isSetTotalPortfolioValue();
    if (this_present_totalPortfolioValue || that_present_totalPortfolioValue) {
      if (!(this_present_totalPortfolioValue && that_present_totalPortfolioValue))
        return false;
      if (this.totalPortfolioValue != that.totalPortfolioValue)
        return false;
    }

    boolean this_present_totalDayProfit = true && this.isSetTotalDayProfit();
    boolean that_present_totalDayProfit = true && that.isSetTotalDayProfit();
    if (this_present_totalDayProfit || that_present_totalDayProfit) {
      if (!(this_present_totalDayProfit && that_present_totalDayProfit))
        return false;
      if (this.totalDayProfit != that.totalDayProfit)
        return false;
    }

    boolean this_present_holdDetails = true && this.isSetHoldDetails();
    boolean that_present_holdDetails = true && that.isSetHoldDetails();
    if (this_present_holdDetails || that_present_holdDetails) {
      if (!(this_present_holdDetails && that_present_holdDetails))
        return false;
      if (!this.holdDetails.equals(that.holdDetails))
        return false;
    }

    boolean this_present_logList = true && this.isSetLogList();
    boolean that_present_logList = true && that.isSetLogList();
    if (this_present_logList || that_present_logList) {
      if (!(this_present_logList && that_present_logList))
        return false;
      if (!this.logList.equals(that.logList))
        return false;
    }

    boolean this_present_plotMap = true && this.isSetPlotMap();
    boolean that_present_plotMap = true && that.isSetPlotMap();
    if (this_present_plotMap || that_present_plotMap) {
      if (!(this_present_plotMap && that_present_plotMap))
        return false;
      if (!this.plotMap.equals(that.plotMap))
        return false;
    }

    boolean this_present_quantSummary = true && this.isSetQuantSummary();
    boolean that_present_quantSummary = true && that.isSetQuantSummary();
    if (this_present_quantSummary || that_present_quantSummary) {
      if (!(this_present_quantSummary && that_present_quantSummary))
        return false;
      if (!this.quantSummary.equals(that.quantSummary))
        return false;
    }

    boolean this_present_riskList = true && this.isSetRiskList();
    boolean that_present_riskList = true && that.isSetRiskList();
    if (this_present_riskList || that_present_riskList) {
      if (!(this_present_riskList && that_present_riskList))
        return false;
      if (!this.riskList.equals(that.riskList))
        return false;
    }

    boolean this_present_runTime = true && this.isSetRunTime();
    boolean that_present_runTime = true && that.isSetRunTime();
    if (this_present_runTime || that_present_runTime) {
      if (!(this_present_runTime && that_present_runTime))
        return false;
      if (this.runTime != that.runTime)
        return false;
    }

    boolean this_present_runPercent = true && this.isSetRunPercent();
    boolean that_present_runPercent = true && that.isSetRunPercent();
    if (this_present_runPercent || that_present_runPercent) {
      if (!(this_present_runPercent && that_present_runPercent))
        return false;
      if (this.runPercent != that.runPercent)
        return false;
    }

    boolean this_present_transactionDetails = true && this.isSetTransactionDetails();
    boolean that_present_transactionDetails = true && that.isSetTransactionDetails();
    if (this_present_transactionDetails || that_present_transactionDetails) {
      if (!(this_present_transactionDetails && that_present_transactionDetails))
        return false;
      if (!this.transactionDetails.equals(that.transactionDetails))
        return false;
    }

    boolean this_present_preBenchmarkPrice = true && this.isSetPreBenchmarkPrice();
    boolean that_present_preBenchmarkPrice = true && that.isSetPreBenchmarkPrice();
    if (this_present_preBenchmarkPrice || that_present_preBenchmarkPrice) {
      if (!(this_present_preBenchmarkPrice && that_present_preBenchmarkPrice))
        return false;
      if (this.preBenchmarkPrice != that.preBenchmarkPrice)
        return false;
    }

    boolean this_present_initialValueWeekly = true && this.isSetInitialValueWeekly();
    boolean that_present_initialValueWeekly = true && that.isSetInitialValueWeekly();
    if (this_present_initialValueWeekly || that_present_initialValueWeekly) {
      if (!(this_present_initialValueWeekly && that_present_initialValueWeekly))
        return false;
      if (this.initialValueWeekly != that.initialValueWeekly)
        return false;
    }

    boolean this_present_initialValueMonthly = true && this.isSetInitialValueMonthly();
    boolean that_present_initialValueMonthly = true && that.isSetInitialValueMonthly();
    if (this_present_initialValueMonthly || that_present_initialValueMonthly) {
      if (!(this_present_initialValueMonthly && that_present_initialValueMonthly))
        return false;
      if (this.initialValueMonthly != that.initialValueMonthly)
        return false;
    }

    boolean this_present_daysPassed = true && this.isSetDaysPassed();
    boolean that_present_daysPassed = true && that.isSetDaysPassed();
    if (this_present_daysPassed || that_present_daysPassed) {
      if (!(this_present_daysPassed && that_present_daysPassed))
        return false;
      if (this.daysPassed != that.daysPassed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommission()) ? 131071 : 524287);
    if (isSetCommission())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commission);

    hashCode = hashCode * 8191 + ((isSetCumulativePercent()) ? 131071 : 524287);
    if (isSetCumulativePercent())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cumulativePercent);

    hashCode = hashCode * 8191 + ((isSetBenchmarkPercent()) ? 131071 : 524287);
    if (isSetBenchmarkPercent())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(benchmarkPercent);

    hashCode = hashCode * 8191 + ((isSetYearPercent()) ? 131071 : 524287);
    if (isSetYearPercent())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(yearPercent);

    hashCode = hashCode * 8191 + ((isSetYearBenchmarkPercent()) ? 131071 : 524287);
    if (isSetYearBenchmarkPercent())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(yearBenchmarkPercent);

    hashCode = hashCode * 8191 + ((isSetDayProfit()) ? 131071 : 524287);
    if (isSetDayProfit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dayProfit);

    hashCode = hashCode * 8191 + ((isSetBuy()) ? 131071 : 524287);
    if (isSetBuy())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(buy);

    hashCode = hashCode * 8191 + ((isSetSell()) ? 131071 : 524287);
    if (isSetSell())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sell);

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + ((isSetCash()) ? 131071 : 524287);
    if (isSetCash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cash);

    hashCode = hashCode * 8191 + ((isSetTotalPositionPrice()) ? 131071 : 524287);
    if (isSetTotalPositionPrice())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalPositionPrice);

    hashCode = hashCode * 8191 + ((isSetTotalPortfolioValue()) ? 131071 : 524287);
    if (isSetTotalPortfolioValue())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalPortfolioValue);

    hashCode = hashCode * 8191 + ((isSetTotalDayProfit()) ? 131071 : 524287);
    if (isSetTotalDayProfit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalDayProfit);

    hashCode = hashCode * 8191 + ((isSetHoldDetails()) ? 131071 : 524287);
    if (isSetHoldDetails())
      hashCode = hashCode * 8191 + holdDetails.hashCode();

    hashCode = hashCode * 8191 + ((isSetLogList()) ? 131071 : 524287);
    if (isSetLogList())
      hashCode = hashCode * 8191 + logList.hashCode();

    hashCode = hashCode * 8191 + ((isSetPlotMap()) ? 131071 : 524287);
    if (isSetPlotMap())
      hashCode = hashCode * 8191 + plotMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuantSummary()) ? 131071 : 524287);
    if (isSetQuantSummary())
      hashCode = hashCode * 8191 + quantSummary.hashCode();

    hashCode = hashCode * 8191 + ((isSetRiskList()) ? 131071 : 524287);
    if (isSetRiskList())
      hashCode = hashCode * 8191 + riskList.hashCode();

    hashCode = hashCode * 8191 + ((isSetRunTime()) ? 131071 : 524287);
    if (isSetRunTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(runTime);

    hashCode = hashCode * 8191 + ((isSetRunPercent()) ? 131071 : 524287);
    if (isSetRunPercent())
      hashCode = hashCode * 8191 + runPercent;

    hashCode = hashCode * 8191 + ((isSetTransactionDetails()) ? 131071 : 524287);
    if (isSetTransactionDetails())
      hashCode = hashCode * 8191 + transactionDetails.hashCode();

    hashCode = hashCode * 8191 + ((isSetPreBenchmarkPrice()) ? 131071 : 524287);
    if (isSetPreBenchmarkPrice())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(preBenchmarkPrice);

    hashCode = hashCode * 8191 + ((isSetInitialValueWeekly()) ? 131071 : 524287);
    if (isSetInitialValueWeekly())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(initialValueWeekly);

    hashCode = hashCode * 8191 + ((isSetInitialValueMonthly()) ? 131071 : 524287);
    if (isSetInitialValueMonthly())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(initialValueMonthly);

    hashCode = hashCode * 8191 + ((isSetDaysPassed()) ? 131071 : 524287);
    if (isSetDaysPassed())
      hashCode = hashCode * 8191 + daysPassed;

    return hashCode;
  }

  @Override
  public int compareTo(TDayProfit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(other.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, other.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCumulativePercent()).compareTo(other.isSetCumulativePercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCumulativePercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cumulativePercent, other.cumulativePercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBenchmarkPercent()).compareTo(other.isSetBenchmarkPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBenchmarkPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.benchmarkPercent, other.benchmarkPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearPercent()).compareTo(other.isSetYearPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearPercent, other.yearPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearBenchmarkPercent()).compareTo(other.isSetYearBenchmarkPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearBenchmarkPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearBenchmarkPercent, other.yearBenchmarkPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayProfit()).compareTo(other.isSetDayProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayProfit, other.dayProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuy()).compareTo(other.isSetBuy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buy, other.buy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSell()).compareTo(other.isSetSell());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSell()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sell, other.sell);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCash()).compareTo(other.isSetCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cash, other.cash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPositionPrice()).compareTo(other.isSetTotalPositionPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPositionPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPositionPrice, other.totalPositionPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPortfolioValue()).compareTo(other.isSetTotalPortfolioValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPortfolioValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPortfolioValue, other.totalPortfolioValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalDayProfit()).compareTo(other.isSetTotalDayProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalDayProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalDayProfit, other.totalDayProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHoldDetails()).compareTo(other.isSetHoldDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHoldDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.holdDetails, other.holdDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogList()).compareTo(other.isSetLogList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logList, other.logList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlotMap()).compareTo(other.isSetPlotMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlotMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plotMap, other.plotMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantSummary()).compareTo(other.isSetQuantSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantSummary, other.quantSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskList()).compareTo(other.isSetRiskList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskList, other.riskList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunTime()).compareTo(other.isSetRunTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runTime, other.runTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunPercent()).compareTo(other.isSetRunPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runPercent, other.runPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionDetails()).compareTo(other.isSetTransactionDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionDetails, other.transactionDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreBenchmarkPrice()).compareTo(other.isSetPreBenchmarkPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreBenchmarkPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preBenchmarkPrice, other.preBenchmarkPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitialValueWeekly()).compareTo(other.isSetInitialValueWeekly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialValueWeekly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialValueWeekly, other.initialValueWeekly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitialValueMonthly()).compareTo(other.isSetInitialValueMonthly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialValueMonthly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialValueMonthly, other.initialValueMonthly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDaysPassed()).compareTo(other.isSetDaysPassed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDaysPassed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.daysPassed, other.daysPassed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDayProfit(");
    boolean first = true;

    if (isSetCommission()) {
      sb.append("commission:");
      sb.append(this.commission);
      first = false;
    }
    if (isSetCumulativePercent()) {
      if (!first) sb.append(", ");
      sb.append("cumulativePercent:");
      sb.append(this.cumulativePercent);
      first = false;
    }
    if (isSetBenchmarkPercent()) {
      if (!first) sb.append(", ");
      sb.append("benchmarkPercent:");
      sb.append(this.benchmarkPercent);
      first = false;
    }
    if (isSetYearPercent()) {
      if (!first) sb.append(", ");
      sb.append("yearPercent:");
      sb.append(this.yearPercent);
      first = false;
    }
    if (isSetYearBenchmarkPercent()) {
      if (!first) sb.append(", ");
      sb.append("yearBenchmarkPercent:");
      sb.append(this.yearBenchmarkPercent);
      first = false;
    }
    if (isSetDayProfit()) {
      if (!first) sb.append(", ");
      sb.append("dayProfit:");
      sb.append(this.dayProfit);
      first = false;
    }
    if (isSetBuy()) {
      if (!first) sb.append(", ");
      sb.append("buy:");
      sb.append(this.buy);
      first = false;
    }
    if (isSetSell()) {
      if (!first) sb.append(", ");
      sb.append("sell:");
      sb.append(this.sell);
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetCash()) {
      if (!first) sb.append(", ");
      sb.append("cash:");
      sb.append(this.cash);
      first = false;
    }
    if (isSetTotalPositionPrice()) {
      if (!first) sb.append(", ");
      sb.append("totalPositionPrice:");
      sb.append(this.totalPositionPrice);
      first = false;
    }
    if (isSetTotalPortfolioValue()) {
      if (!first) sb.append(", ");
      sb.append("totalPortfolioValue:");
      sb.append(this.totalPortfolioValue);
      first = false;
    }
    if (isSetTotalDayProfit()) {
      if (!first) sb.append(", ");
      sb.append("totalDayProfit:");
      sb.append(this.totalDayProfit);
      first = false;
    }
    if (isSetHoldDetails()) {
      if (!first) sb.append(", ");
      sb.append("holdDetails:");
      if (this.holdDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.holdDetails);
      }
      first = false;
    }
    if (isSetLogList()) {
      if (!first) sb.append(", ");
      sb.append("logList:");
      if (this.logList == null) {
        sb.append("null");
      } else {
        sb.append(this.logList);
      }
      first = false;
    }
    if (isSetPlotMap()) {
      if (!first) sb.append(", ");
      sb.append("plotMap:");
      if (this.plotMap == null) {
        sb.append("null");
      } else {
        sb.append(this.plotMap);
      }
      first = false;
    }
    if (isSetQuantSummary()) {
      if (!first) sb.append(", ");
      sb.append("quantSummary:");
      if (this.quantSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.quantSummary);
      }
      first = false;
    }
    if (isSetRiskList()) {
      if (!first) sb.append(", ");
      sb.append("riskList:");
      if (this.riskList == null) {
        sb.append("null");
      } else {
        sb.append(this.riskList);
      }
      first = false;
    }
    if (isSetRunTime()) {
      if (!first) sb.append(", ");
      sb.append("runTime:");
      sb.append(this.runTime);
      first = false;
    }
    if (isSetRunPercent()) {
      if (!first) sb.append(", ");
      sb.append("runPercent:");
      sb.append(this.runPercent);
      first = false;
    }
    if (isSetTransactionDetails()) {
      if (!first) sb.append(", ");
      sb.append("transactionDetails:");
      if (this.transactionDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.transactionDetails);
      }
      first = false;
    }
    if (isSetPreBenchmarkPrice()) {
      if (!first) sb.append(", ");
      sb.append("preBenchmarkPrice:");
      sb.append(this.preBenchmarkPrice);
      first = false;
    }
    if (isSetInitialValueWeekly()) {
      if (!first) sb.append(", ");
      sb.append("initialValueWeekly:");
      sb.append(this.initialValueWeekly);
      first = false;
    }
    if (isSetInitialValueMonthly()) {
      if (!first) sb.append(", ");
      sb.append("initialValueMonthly:");
      sb.append(this.initialValueMonthly);
      first = false;
    }
    if (isSetDaysPassed()) {
      if (!first) sb.append(", ");
      sb.append("daysPassed:");
      sb.append(this.daysPassed);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (quantSummary != null) {
      quantSummary.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDayProfitStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDayProfitStandardScheme getScheme() {
      return new TDayProfitStandardScheme();
    }
  }

  private static class TDayProfitStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDayProfit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDayProfit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commission = iprot.readDouble();
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUMULATIVE_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cumulativePercent = iprot.readDouble();
              struct.setCumulativePercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BENCHMARK_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.benchmarkPercent = iprot.readDouble();
              struct.setBenchmarkPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // YEAR_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yearPercent = iprot.readDouble();
              struct.setYearPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // YEAR_BENCHMARK_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yearBenchmarkPercent = iprot.readDouble();
              struct.setYearBenchmarkPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DAY_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dayProfit = iprot.readDouble();
              struct.setDayProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.buy = iprot.readDouble();
              struct.setBuyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SELL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sell = iprot.readDouble();
              struct.setSellIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cash = iprot.readDouble();
              struct.setCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TOTAL_POSITION_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPositionPrice = iprot.readDouble();
              struct.setTotalPositionPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL_PORTFOLIO_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPortfolioValue = iprot.readDouble();
              struct.setTotalPortfolioValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOTAL_DAY_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalDayProfit = iprot.readDouble();
              struct.setTotalDayProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HOLD_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.holdDetails = new java.util.ArrayList<THoldDetail>(_list26.size);
                THoldDetail _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = new THoldDetail();
                  _elem27.read(iprot);
                  struct.holdDetails.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setHoldDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOG_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                struct.logList = new java.util.ArrayList<TLogOutput>(_list29.size);
                TLogOutput _elem30;
                for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                {
                  _elem30 = new TLogOutput();
                  _elem30.read(iprot);
                  struct.logList.add(_elem30);
                }
                iprot.readListEnd();
              }
              struct.setLogListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PLOT_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                struct.plotMap = new java.util.HashMap<String,Double>(2*_map32.size);
                String _key33;
                double _val34;
                for (int _i35 = 0; _i35 < _map32.size; ++_i35)
                {
                  _key33 = iprot.readString();
                  _val34 = iprot.readDouble();
                  struct.plotMap.put(_key33, _val34);
                }
                iprot.readMapEnd();
              }
              struct.setPlotMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // QUANT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.quantSummary = new TQuantSummary();
              struct.quantSummary.read(iprot);
              struct.setQuantSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RISK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.riskList = new java.util.ArrayList<TRiskResult>(_list36.size);
                TRiskResult _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = new TRiskResult();
                  _elem37.read(iprot);
                  struct.riskList.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setRiskListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RUN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.runTime = iprot.readDouble();
              struct.setRunTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RUN_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runPercent = iprot.readI32();
              struct.setRunPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TRANSACTION_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.transactionDetails = new java.util.ArrayList<TTransactionDetail>(_list39.size);
                TTransactionDetail _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = new TTransactionDetail();
                  _elem40.read(iprot);
                  struct.transactionDetails.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setTransactionDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PRE_BENCHMARK_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preBenchmarkPrice = iprot.readDouble();
              struct.setPreBenchmarkPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // INITIAL_VALUE_WEEKLY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.initialValueWeekly = iprot.readDouble();
              struct.setInitialValueWeeklyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // INITIAL_VALUE_MONTHLY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.initialValueMonthly = iprot.readDouble();
              struct.setInitialValueMonthlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DAYS_PASSED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.daysPassed = iprot.readI32();
              struct.setDaysPassedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDayProfit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCommission()) {
        oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.commission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCumulativePercent()) {
        oprot.writeFieldBegin(CUMULATIVE_PERCENT_FIELD_DESC);
        oprot.writeDouble(struct.cumulativePercent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBenchmarkPercent()) {
        oprot.writeFieldBegin(BENCHMARK_PERCENT_FIELD_DESC);
        oprot.writeDouble(struct.benchmarkPercent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYearPercent()) {
        oprot.writeFieldBegin(YEAR_PERCENT_FIELD_DESC);
        oprot.writeDouble(struct.yearPercent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYearBenchmarkPercent()) {
        oprot.writeFieldBegin(YEAR_BENCHMARK_PERCENT_FIELD_DESC);
        oprot.writeDouble(struct.yearBenchmarkPercent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDayProfit()) {
        oprot.writeFieldBegin(DAY_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.dayProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBuy()) {
        oprot.writeFieldBegin(BUY_FIELD_DESC);
        oprot.writeDouble(struct.buy);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSell()) {
        oprot.writeFieldBegin(SELL_FIELD_DESC);
        oprot.writeDouble(struct.sell);
        oprot.writeFieldEnd();
      }
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCash()) {
        oprot.writeFieldBegin(CASH_FIELD_DESC);
        oprot.writeDouble(struct.cash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalPositionPrice()) {
        oprot.writeFieldBegin(TOTAL_POSITION_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.totalPositionPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalPortfolioValue()) {
        oprot.writeFieldBegin(TOTAL_PORTFOLIO_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.totalPortfolioValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalDayProfit()) {
        oprot.writeFieldBegin(TOTAL_DAY_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.totalDayProfit);
        oprot.writeFieldEnd();
      }
      if (struct.holdDetails != null) {
        if (struct.isSetHoldDetails()) {
          oprot.writeFieldBegin(HOLD_DETAILS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.holdDetails.size()));
            for (THoldDetail _iter42 : struct.holdDetails)
            {
              _iter42.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.logList != null) {
        if (struct.isSetLogList()) {
          oprot.writeFieldBegin(LOG_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.logList.size()));
            for (TLogOutput _iter43 : struct.logList)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.plotMap != null) {
        if (struct.isSetPlotMap()) {
          oprot.writeFieldBegin(PLOT_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.plotMap.size()));
            for (java.util.Map.Entry<String, Double> _iter44 : struct.plotMap.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeDouble(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.quantSummary != null) {
        if (struct.isSetQuantSummary()) {
          oprot.writeFieldBegin(QUANT_SUMMARY_FIELD_DESC);
          struct.quantSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.riskList != null) {
        if (struct.isSetRiskList()) {
          oprot.writeFieldBegin(RISK_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.riskList.size()));
            for (TRiskResult _iter45 : struct.riskList)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRunTime()) {
        oprot.writeFieldBegin(RUN_TIME_FIELD_DESC);
        oprot.writeDouble(struct.runTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRunPercent()) {
        oprot.writeFieldBegin(RUN_PERCENT_FIELD_DESC);
        oprot.writeI32(struct.runPercent);
        oprot.writeFieldEnd();
      }
      if (struct.transactionDetails != null) {
        if (struct.isSetTransactionDetails()) {
          oprot.writeFieldBegin(TRANSACTION_DETAILS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.transactionDetails.size()));
            for (TTransactionDetail _iter46 : struct.transactionDetails)
            {
              _iter46.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPreBenchmarkPrice()) {
        oprot.writeFieldBegin(PRE_BENCHMARK_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.preBenchmarkPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInitialValueWeekly()) {
        oprot.writeFieldBegin(INITIAL_VALUE_WEEKLY_FIELD_DESC);
        oprot.writeDouble(struct.initialValueWeekly);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInitialValueMonthly()) {
        oprot.writeFieldBegin(INITIAL_VALUE_MONTHLY_FIELD_DESC);
        oprot.writeDouble(struct.initialValueMonthly);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDaysPassed()) {
        oprot.writeFieldBegin(DAYS_PASSED_FIELD_DESC);
        oprot.writeI32(struct.daysPassed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDayProfitTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDayProfitTupleScheme getScheme() {
      return new TDayProfitTupleScheme();
    }
  }

  private static class TDayProfitTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDayProfit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDayProfit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCommission()) {
        optionals.set(0);
      }
      if (struct.isSetCumulativePercent()) {
        optionals.set(1);
      }
      if (struct.isSetBenchmarkPercent()) {
        optionals.set(2);
      }
      if (struct.isSetYearPercent()) {
        optionals.set(3);
      }
      if (struct.isSetYearBenchmarkPercent()) {
        optionals.set(4);
      }
      if (struct.isSetDayProfit()) {
        optionals.set(5);
      }
      if (struct.isSetBuy()) {
        optionals.set(6);
      }
      if (struct.isSetSell()) {
        optionals.set(7);
      }
      if (struct.isSetDate()) {
        optionals.set(8);
      }
      if (struct.isSetCash()) {
        optionals.set(9);
      }
      if (struct.isSetTotalPositionPrice()) {
        optionals.set(10);
      }
      if (struct.isSetTotalPortfolioValue()) {
        optionals.set(11);
      }
      if (struct.isSetTotalDayProfit()) {
        optionals.set(12);
      }
      if (struct.isSetHoldDetails()) {
        optionals.set(13);
      }
      if (struct.isSetLogList()) {
        optionals.set(14);
      }
      if (struct.isSetPlotMap()) {
        optionals.set(15);
      }
      if (struct.isSetQuantSummary()) {
        optionals.set(16);
      }
      if (struct.isSetRiskList()) {
        optionals.set(17);
      }
      if (struct.isSetRunTime()) {
        optionals.set(18);
      }
      if (struct.isSetRunPercent()) {
        optionals.set(19);
      }
      if (struct.isSetTransactionDetails()) {
        optionals.set(20);
      }
      if (struct.isSetPreBenchmarkPrice()) {
        optionals.set(21);
      }
      if (struct.isSetInitialValueWeekly()) {
        optionals.set(22);
      }
      if (struct.isSetInitialValueMonthly()) {
        optionals.set(23);
      }
      if (struct.isSetDaysPassed()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetCommission()) {
        oprot.writeDouble(struct.commission);
      }
      if (struct.isSetCumulativePercent()) {
        oprot.writeDouble(struct.cumulativePercent);
      }
      if (struct.isSetBenchmarkPercent()) {
        oprot.writeDouble(struct.benchmarkPercent);
      }
      if (struct.isSetYearPercent()) {
        oprot.writeDouble(struct.yearPercent);
      }
      if (struct.isSetYearBenchmarkPercent()) {
        oprot.writeDouble(struct.yearBenchmarkPercent);
      }
      if (struct.isSetDayProfit()) {
        oprot.writeDouble(struct.dayProfit);
      }
      if (struct.isSetBuy()) {
        oprot.writeDouble(struct.buy);
      }
      if (struct.isSetSell()) {
        oprot.writeDouble(struct.sell);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetCash()) {
        oprot.writeDouble(struct.cash);
      }
      if (struct.isSetTotalPositionPrice()) {
        oprot.writeDouble(struct.totalPositionPrice);
      }
      if (struct.isSetTotalPortfolioValue()) {
        oprot.writeDouble(struct.totalPortfolioValue);
      }
      if (struct.isSetTotalDayProfit()) {
        oprot.writeDouble(struct.totalDayProfit);
      }
      if (struct.isSetHoldDetails()) {
        {
          oprot.writeI32(struct.holdDetails.size());
          for (THoldDetail _iter47 : struct.holdDetails)
          {
            _iter47.write(oprot);
          }
        }
      }
      if (struct.isSetLogList()) {
        {
          oprot.writeI32(struct.logList.size());
          for (TLogOutput _iter48 : struct.logList)
          {
            _iter48.write(oprot);
          }
        }
      }
      if (struct.isSetPlotMap()) {
        {
          oprot.writeI32(struct.plotMap.size());
          for (java.util.Map.Entry<String, Double> _iter49 : struct.plotMap.entrySet())
          {
            oprot.writeString(_iter49.getKey());
            oprot.writeDouble(_iter49.getValue());
          }
        }
      }
      if (struct.isSetQuantSummary()) {
        struct.quantSummary.write(oprot);
      }
      if (struct.isSetRiskList()) {
        {
          oprot.writeI32(struct.riskList.size());
          for (TRiskResult _iter50 : struct.riskList)
          {
            _iter50.write(oprot);
          }
        }
      }
      if (struct.isSetRunTime()) {
        oprot.writeDouble(struct.runTime);
      }
      if (struct.isSetRunPercent()) {
        oprot.writeI32(struct.runPercent);
      }
      if (struct.isSetTransactionDetails()) {
        {
          oprot.writeI32(struct.transactionDetails.size());
          for (TTransactionDetail _iter51 : struct.transactionDetails)
          {
            _iter51.write(oprot);
          }
        }
      }
      if (struct.isSetPreBenchmarkPrice()) {
        oprot.writeDouble(struct.preBenchmarkPrice);
      }
      if (struct.isSetInitialValueWeekly()) {
        oprot.writeDouble(struct.initialValueWeekly);
      }
      if (struct.isSetInitialValueMonthly()) {
        oprot.writeDouble(struct.initialValueMonthly);
      }
      if (struct.isSetDaysPassed()) {
        oprot.writeI32(struct.daysPassed);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDayProfit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.commission = iprot.readDouble();
        struct.setCommissionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cumulativePercent = iprot.readDouble();
        struct.setCumulativePercentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.benchmarkPercent = iprot.readDouble();
        struct.setBenchmarkPercentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.yearPercent = iprot.readDouble();
        struct.setYearPercentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.yearBenchmarkPercent = iprot.readDouble();
        struct.setYearBenchmarkPercentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dayProfit = iprot.readDouble();
        struct.setDayProfitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.buy = iprot.readDouble();
        struct.setBuyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sell = iprot.readDouble();
        struct.setSellIsSet(true);
      }
      if (incoming.get(8)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cash = iprot.readDouble();
        struct.setCashIsSet(true);
      }
      if (incoming.get(10)) {
        struct.totalPositionPrice = iprot.readDouble();
        struct.setTotalPositionPriceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.totalPortfolioValue = iprot.readDouble();
        struct.setTotalPortfolioValueIsSet(true);
      }
      if (incoming.get(12)) {
        struct.totalDayProfit = iprot.readDouble();
        struct.setTotalDayProfitIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.holdDetails = new java.util.ArrayList<THoldDetail>(_list52.size);
          THoldDetail _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = new THoldDetail();
            _elem53.read(iprot);
            struct.holdDetails.add(_elem53);
          }
        }
        struct.setHoldDetailsIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.logList = new java.util.ArrayList<TLogOutput>(_list55.size);
          TLogOutput _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = new TLogOutput();
            _elem56.read(iprot);
            struct.logList.add(_elem56);
          }
        }
        struct.setLogListIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TMap _map58 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.plotMap = new java.util.HashMap<String,Double>(2*_map58.size);
          String _key59;
          double _val60;
          for (int _i61 = 0; _i61 < _map58.size; ++_i61)
          {
            _key59 = iprot.readString();
            _val60 = iprot.readDouble();
            struct.plotMap.put(_key59, _val60);
          }
        }
        struct.setPlotMapIsSet(true);
      }
      if (incoming.get(16)) {
        struct.quantSummary = new TQuantSummary();
        struct.quantSummary.read(iprot);
        struct.setQuantSummaryIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list62 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.riskList = new java.util.ArrayList<TRiskResult>(_list62.size);
          TRiskResult _elem63;
          for (int _i64 = 0; _i64 < _list62.size; ++_i64)
          {
            _elem63 = new TRiskResult();
            _elem63.read(iprot);
            struct.riskList.add(_elem63);
          }
        }
        struct.setRiskListIsSet(true);
      }
      if (incoming.get(18)) {
        struct.runTime = iprot.readDouble();
        struct.setRunTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.runPercent = iprot.readI32();
        struct.setRunPercentIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.transactionDetails = new java.util.ArrayList<TTransactionDetail>(_list65.size);
          TTransactionDetail _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = new TTransactionDetail();
            _elem66.read(iprot);
            struct.transactionDetails.add(_elem66);
          }
        }
        struct.setTransactionDetailsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.preBenchmarkPrice = iprot.readDouble();
        struct.setPreBenchmarkPriceIsSet(true);
      }
      if (incoming.get(22)) {
        struct.initialValueWeekly = iprot.readDouble();
        struct.setInitialValueWeeklyIsSet(true);
      }
      if (incoming.get(23)) {
        struct.initialValueMonthly = iprot.readDouble();
        struct.setInitialValueMonthlyIsSet(true);
      }
      if (incoming.get(24)) {
        struct.daysPassed = iprot.readI32();
        struct.setDaysPassedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

