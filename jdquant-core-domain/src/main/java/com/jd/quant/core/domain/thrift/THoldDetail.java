/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jd.quant.core.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 持仓详情
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-21")
public class THoldDetail implements org.apache.thrift.TBase<THoldDetail, THoldDetail._Fields>, java.io.Serializable, Cloneable, Comparable<THoldDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THoldDetail");

  private static final org.apache.thrift.protocol.TField ORDER_BOOK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderBookId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLOSING_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("closingPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DAY_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dayProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField COST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("costPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new THoldDetailStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new THoldDetailTupleSchemeFactory();

  public String orderBookId; // optional
  public double closingPrice; // optional
  public double count; // optional
  public double dayProfit; // optional
  public double costPrice; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_BOOK_ID((short)1, "orderBookId"),
    CLOSING_PRICE((short)2, "closingPrice"),
    COUNT((short)3, "count"),
    DAY_PROFIT((short)4, "dayProfit"),
    COST_PRICE((short)5, "costPrice");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_BOOK_ID
          return ORDER_BOOK_ID;
        case 2: // CLOSING_PRICE
          return CLOSING_PRICE;
        case 3: // COUNT
          return COUNT;
        case 4: // DAY_PROFIT
          return DAY_PROFIT;
        case 5: // COST_PRICE
          return COST_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLOSINGPRICE_ISSET_ID = 0;
  private static final int __COUNT_ISSET_ID = 1;
  private static final int __DAYPROFIT_ISSET_ID = 2;
  private static final int __COSTPRICE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORDER_BOOK_ID,_Fields.CLOSING_PRICE,_Fields.COUNT,_Fields.DAY_PROFIT,_Fields.COST_PRICE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_BOOK_ID, new org.apache.thrift.meta_data.FieldMetaData("orderBookId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLOSING_PRICE, new org.apache.thrift.meta_data.FieldMetaData("closingPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAY_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("dayProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("costPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THoldDetail.class, metaDataMap);
  }

  public THoldDetail() {
    this.closingPrice = 0;

    this.count = 0;

    this.dayProfit = 0;

    this.costPrice = 0;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THoldDetail(THoldDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderBookId()) {
      this.orderBookId = other.orderBookId;
    }
    this.closingPrice = other.closingPrice;
    this.count = other.count;
    this.dayProfit = other.dayProfit;
    this.costPrice = other.costPrice;
  }

  public THoldDetail deepCopy() {
    return new THoldDetail(this);
  }

  @Override
  public void clear() {
    this.orderBookId = null;
    this.closingPrice = 0;

    this.count = 0;

    this.dayProfit = 0;

    this.costPrice = 0;

  }

  public String getOrderBookId() {
    return this.orderBookId;
  }

  public THoldDetail setOrderBookId(String orderBookId) {
    this.orderBookId = orderBookId;
    return this;
  }

  public void unsetOrderBookId() {
    this.orderBookId = null;
  }

  /** Returns true if field orderBookId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderBookId() {
    return this.orderBookId != null;
  }

  public void setOrderBookIdIsSet(boolean value) {
    if (!value) {
      this.orderBookId = null;
    }
  }

  public double getClosingPrice() {
    return this.closingPrice;
  }

  public THoldDetail setClosingPrice(double closingPrice) {
    this.closingPrice = closingPrice;
    setClosingPriceIsSet(true);
    return this;
  }

  public void unsetClosingPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLOSINGPRICE_ISSET_ID);
  }

  /** Returns true if field closingPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetClosingPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLOSINGPRICE_ISSET_ID);
  }

  public void setClosingPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLOSINGPRICE_ISSET_ID, value);
  }

  public double getCount() {
    return this.count;
  }

  public THoldDetail setCount(double count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public double getDayProfit() {
    return this.dayProfit;
  }

  public THoldDetail setDayProfit(double dayProfit) {
    this.dayProfit = dayProfit;
    setDayProfitIsSet(true);
    return this;
  }

  public void unsetDayProfit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DAYPROFIT_ISSET_ID);
  }

  /** Returns true if field dayProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetDayProfit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DAYPROFIT_ISSET_ID);
  }

  public void setDayProfitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DAYPROFIT_ISSET_ID, value);
  }

  public double getCostPrice() {
    return this.costPrice;
  }

  public THoldDetail setCostPrice(double costPrice) {
    this.costPrice = costPrice;
    setCostPriceIsSet(true);
    return this;
  }

  public void unsetCostPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COSTPRICE_ISSET_ID);
  }

  /** Returns true if field costPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCostPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COSTPRICE_ISSET_ID);
  }

  public void setCostPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COSTPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_BOOK_ID:
      if (value == null) {
        unsetOrderBookId();
      } else {
        setOrderBookId((String)value);
      }
      break;

    case CLOSING_PRICE:
      if (value == null) {
        unsetClosingPrice();
      } else {
        setClosingPrice((Double)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Double)value);
      }
      break;

    case DAY_PROFIT:
      if (value == null) {
        unsetDayProfit();
      } else {
        setDayProfit((Double)value);
      }
      break;

    case COST_PRICE:
      if (value == null) {
        unsetCostPrice();
      } else {
        setCostPrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_BOOK_ID:
      return getOrderBookId();

    case CLOSING_PRICE:
      return getClosingPrice();

    case COUNT:
      return getCount();

    case DAY_PROFIT:
      return getDayProfit();

    case COST_PRICE:
      return getCostPrice();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_BOOK_ID:
      return isSetOrderBookId();
    case CLOSING_PRICE:
      return isSetClosingPrice();
    case COUNT:
      return isSetCount();
    case DAY_PROFIT:
      return isSetDayProfit();
    case COST_PRICE:
      return isSetCostPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THoldDetail)
      return this.equals((THoldDetail)that);
    return false;
  }

  public boolean equals(THoldDetail that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_orderBookId = true && this.isSetOrderBookId();
    boolean that_present_orderBookId = true && that.isSetOrderBookId();
    if (this_present_orderBookId || that_present_orderBookId) {
      if (!(this_present_orderBookId && that_present_orderBookId))
        return false;
      if (!this.orderBookId.equals(that.orderBookId))
        return false;
    }

    boolean this_present_closingPrice = true && this.isSetClosingPrice();
    boolean that_present_closingPrice = true && that.isSetClosingPrice();
    if (this_present_closingPrice || that_present_closingPrice) {
      if (!(this_present_closingPrice && that_present_closingPrice))
        return false;
      if (this.closingPrice != that.closingPrice)
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_dayProfit = true && this.isSetDayProfit();
    boolean that_present_dayProfit = true && that.isSetDayProfit();
    if (this_present_dayProfit || that_present_dayProfit) {
      if (!(this_present_dayProfit && that_present_dayProfit))
        return false;
      if (this.dayProfit != that.dayProfit)
        return false;
    }

    boolean this_present_costPrice = true && this.isSetCostPrice();
    boolean that_present_costPrice = true && that.isSetCostPrice();
    if (this_present_costPrice || that_present_costPrice) {
      if (!(this_present_costPrice && that_present_costPrice))
        return false;
      if (this.costPrice != that.costPrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrderBookId()) ? 131071 : 524287);
    if (isSetOrderBookId())
      hashCode = hashCode * 8191 + orderBookId.hashCode();

    hashCode = hashCode * 8191 + ((isSetClosingPrice()) ? 131071 : 524287);
    if (isSetClosingPrice())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(closingPrice);

    hashCode = hashCode * 8191 + ((isSetCount()) ? 131071 : 524287);
    if (isSetCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(count);

    hashCode = hashCode * 8191 + ((isSetDayProfit()) ? 131071 : 524287);
    if (isSetDayProfit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dayProfit);

    hashCode = hashCode * 8191 + ((isSetCostPrice()) ? 131071 : 524287);
    if (isSetCostPrice())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(costPrice);

    return hashCode;
  }

  @Override
  public int compareTo(THoldDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderBookId()).compareTo(other.isSetOrderBookId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderBookId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderBookId, other.orderBookId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClosingPrice()).compareTo(other.isSetClosingPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClosingPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closingPrice, other.closingPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayProfit()).compareTo(other.isSetDayProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayProfit, other.dayProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostPrice()).compareTo(other.isSetCostPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costPrice, other.costPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THoldDetail(");
    boolean first = true;

    if (isSetOrderBookId()) {
      sb.append("orderBookId:");
      if (this.orderBookId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderBookId);
      }
      first = false;
    }
    if (isSetClosingPrice()) {
      if (!first) sb.append(", ");
      sb.append("closingPrice:");
      sb.append(this.closingPrice);
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetDayProfit()) {
      if (!first) sb.append(", ");
      sb.append("dayProfit:");
      sb.append(this.dayProfit);
      first = false;
    }
    if (isSetCostPrice()) {
      if (!first) sb.append(", ");
      sb.append("costPrice:");
      sb.append(this.costPrice);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THoldDetailStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public THoldDetailStandardScheme getScheme() {
      return new THoldDetailStandardScheme();
    }
  }

  private static class THoldDetailStandardScheme extends org.apache.thrift.scheme.StandardScheme<THoldDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THoldDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_BOOK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderBookId = iprot.readString();
              struct.setOrderBookIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLOSING_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closingPrice = iprot.readDouble();
              struct.setClosingPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.count = iprot.readDouble();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DAY_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dayProfit = iprot.readDouble();
              struct.setDayProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.costPrice = iprot.readDouble();
              struct.setCostPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THoldDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderBookId != null) {
        if (struct.isSetOrderBookId()) {
          oprot.writeFieldBegin(ORDER_BOOK_ID_FIELD_DESC);
          oprot.writeString(struct.orderBookId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetClosingPrice()) {
        oprot.writeFieldBegin(CLOSING_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.closingPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeDouble(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDayProfit()) {
        oprot.writeFieldBegin(DAY_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.dayProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCostPrice()) {
        oprot.writeFieldBegin(COST_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.costPrice);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THoldDetailTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public THoldDetailTupleScheme getScheme() {
      return new THoldDetailTupleScheme();
    }
  }

  private static class THoldDetailTupleScheme extends org.apache.thrift.scheme.TupleScheme<THoldDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THoldDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrderBookId()) {
        optionals.set(0);
      }
      if (struct.isSetClosingPrice()) {
        optionals.set(1);
      }
      if (struct.isSetCount()) {
        optionals.set(2);
      }
      if (struct.isSetDayProfit()) {
        optionals.set(3);
      }
      if (struct.isSetCostPrice()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOrderBookId()) {
        oprot.writeString(struct.orderBookId);
      }
      if (struct.isSetClosingPrice()) {
        oprot.writeDouble(struct.closingPrice);
      }
      if (struct.isSetCount()) {
        oprot.writeDouble(struct.count);
      }
      if (struct.isSetDayProfit()) {
        oprot.writeDouble(struct.dayProfit);
      }
      if (struct.isSetCostPrice()) {
        oprot.writeDouble(struct.costPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THoldDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.orderBookId = iprot.readString();
        struct.setOrderBookIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.closingPrice = iprot.readDouble();
        struct.setClosingPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.count = iprot.readDouble();
        struct.setCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dayProfit = iprot.readDouble();
        struct.setDayProfitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.costPrice = iprot.readDouble();
        struct.setCostPriceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

