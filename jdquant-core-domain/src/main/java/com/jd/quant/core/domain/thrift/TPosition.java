/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jd.quant.core.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 股票持仓信息
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-21")
public class TPosition implements org.apache.thrift.TBase<TPosition, TPosition._Fields>, java.io.Serializable, Cloneable, Comparable<TPosition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPosition");

  private static final org.apache.thrift.protocol.TField ORDER_BOOK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("order_book_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField BOUGHT_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("bought_quantity", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField SOLD_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("sold_quantity", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SOLD_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("sold_value", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField SELLABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("sellable", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("total_orders", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_TRADES_FIELD_DESC = new org.apache.thrift.protocol.TField("total_trades", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("total_commission", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField TOTAL_PROFIT_AND_LOSS_FIELD_DESC = new org.apache.thrift.protocol.TField("total_profit_and_loss", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField CLOSING_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("closing_price", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField CAN_SELL_SHARES_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("can_sell_shares_num", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField BOUGHT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("bought_value", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField COST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("cost_price", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField BUY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("buy_time", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField HOLD_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("hold_days", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField POSITION_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("position_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPositionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPositionTupleSchemeFactory();

  public String order_book_id; // optional
  public double quantity; // optional
  public double bought_quantity; // optional
  public double sold_quantity; // optional
  public double sold_value; // optional
  public double sellable; // optional
  public double total_orders; // optional
  public double total_trades; // optional
  public double total_commission; // optional
  public double total_profit_and_loss; // optional
  public double closing_price; // optional
  public double can_sell_shares_num; // optional
  public double bought_value; // optional
  public double cost_price; // optional
  public String buy_time; // optional
  public int hold_days; // optional
  public double position_ratio; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_BOOK_ID((short)1, "order_book_id"),
    QUANTITY((short)2, "quantity"),
    BOUGHT_QUANTITY((short)3, "bought_quantity"),
    SOLD_QUANTITY((short)4, "sold_quantity"),
    SOLD_VALUE((short)5, "sold_value"),
    SELLABLE((short)6, "sellable"),
    TOTAL_ORDERS((short)7, "total_orders"),
    TOTAL_TRADES((short)8, "total_trades"),
    TOTAL_COMMISSION((short)9, "total_commission"),
    TOTAL_PROFIT_AND_LOSS((short)10, "total_profit_and_loss"),
    CLOSING_PRICE((short)11, "closing_price"),
    CAN_SELL_SHARES_NUM((short)12, "can_sell_shares_num"),
    BOUGHT_VALUE((short)13, "bought_value"),
    COST_PRICE((short)14, "cost_price"),
    BUY_TIME((short)15, "buy_time"),
    HOLD_DAYS((short)16, "hold_days"),
    POSITION_RATIO((short)17, "position_ratio");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_BOOK_ID
          return ORDER_BOOK_ID;
        case 2: // QUANTITY
          return QUANTITY;
        case 3: // BOUGHT_QUANTITY
          return BOUGHT_QUANTITY;
        case 4: // SOLD_QUANTITY
          return SOLD_QUANTITY;
        case 5: // SOLD_VALUE
          return SOLD_VALUE;
        case 6: // SELLABLE
          return SELLABLE;
        case 7: // TOTAL_ORDERS
          return TOTAL_ORDERS;
        case 8: // TOTAL_TRADES
          return TOTAL_TRADES;
        case 9: // TOTAL_COMMISSION
          return TOTAL_COMMISSION;
        case 10: // TOTAL_PROFIT_AND_LOSS
          return TOTAL_PROFIT_AND_LOSS;
        case 11: // CLOSING_PRICE
          return CLOSING_PRICE;
        case 12: // CAN_SELL_SHARES_NUM
          return CAN_SELL_SHARES_NUM;
        case 13: // BOUGHT_VALUE
          return BOUGHT_VALUE;
        case 14: // COST_PRICE
          return COST_PRICE;
        case 15: // BUY_TIME
          return BUY_TIME;
        case 16: // HOLD_DAYS
          return HOLD_DAYS;
        case 17: // POSITION_RATIO
          return POSITION_RATIO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUANTITY_ISSET_ID = 0;
  private static final int __BOUGHT_QUANTITY_ISSET_ID = 1;
  private static final int __SOLD_QUANTITY_ISSET_ID = 2;
  private static final int __SOLD_VALUE_ISSET_ID = 3;
  private static final int __SELLABLE_ISSET_ID = 4;
  private static final int __TOTAL_ORDERS_ISSET_ID = 5;
  private static final int __TOTAL_TRADES_ISSET_ID = 6;
  private static final int __TOTAL_COMMISSION_ISSET_ID = 7;
  private static final int __TOTAL_PROFIT_AND_LOSS_ISSET_ID = 8;
  private static final int __CLOSING_PRICE_ISSET_ID = 9;
  private static final int __CAN_SELL_SHARES_NUM_ISSET_ID = 10;
  private static final int __BOUGHT_VALUE_ISSET_ID = 11;
  private static final int __COST_PRICE_ISSET_ID = 12;
  private static final int __HOLD_DAYS_ISSET_ID = 13;
  private static final int __POSITION_RATIO_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORDER_BOOK_ID,_Fields.QUANTITY,_Fields.BOUGHT_QUANTITY,_Fields.SOLD_QUANTITY,_Fields.SOLD_VALUE,_Fields.SELLABLE,_Fields.TOTAL_ORDERS,_Fields.TOTAL_TRADES,_Fields.TOTAL_COMMISSION,_Fields.TOTAL_PROFIT_AND_LOSS,_Fields.CLOSING_PRICE,_Fields.CAN_SELL_SHARES_NUM,_Fields.BOUGHT_VALUE,_Fields.COST_PRICE,_Fields.BUY_TIME,_Fields.HOLD_DAYS,_Fields.POSITION_RATIO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_BOOK_ID, new org.apache.thrift.meta_data.FieldMetaData("order_book_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BOUGHT_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("bought_quantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SOLD_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("sold_quantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SOLD_VALUE, new org.apache.thrift.meta_data.FieldMetaData("sold_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELLABLE, new org.apache.thrift.meta_data.FieldMetaData("sellable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_ORDERS, new org.apache.thrift.meta_data.FieldMetaData("total_orders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_TRADES, new org.apache.thrift.meta_data.FieldMetaData("total_trades", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("total_commission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_PROFIT_AND_LOSS, new org.apache.thrift.meta_data.FieldMetaData("total_profit_and_loss", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSING_PRICE, new org.apache.thrift.meta_data.FieldMetaData("closing_price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CAN_SELL_SHARES_NUM, new org.apache.thrift.meta_data.FieldMetaData("can_sell_shares_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BOUGHT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("bought_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("cost_price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUY_TIME, new org.apache.thrift.meta_data.FieldMetaData("buy_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOLD_DAYS, new org.apache.thrift.meta_data.FieldMetaData("hold_days", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_RATIO, new org.apache.thrift.meta_data.FieldMetaData("position_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPosition.class, metaDataMap);
  }

  public TPosition() {
    this.quantity = 0;

    this.bought_quantity = 0;

    this.sold_quantity = 0;

    this.sold_value = 0;

    this.sellable = 0;

    this.total_orders = 0;

    this.total_trades = 0;

    this.total_commission = 0;

    this.total_profit_and_loss = 0;

    this.closing_price = 0;

    this.can_sell_shares_num = 0;

    this.bought_value = 0;

    this.cost_price = 0;

    this.hold_days = 0;

    this.position_ratio = 0;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPosition(TPosition other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrder_book_id()) {
      this.order_book_id = other.order_book_id;
    }
    this.quantity = other.quantity;
    this.bought_quantity = other.bought_quantity;
    this.sold_quantity = other.sold_quantity;
    this.sold_value = other.sold_value;
    this.sellable = other.sellable;
    this.total_orders = other.total_orders;
    this.total_trades = other.total_trades;
    this.total_commission = other.total_commission;
    this.total_profit_and_loss = other.total_profit_and_loss;
    this.closing_price = other.closing_price;
    this.can_sell_shares_num = other.can_sell_shares_num;
    this.bought_value = other.bought_value;
    this.cost_price = other.cost_price;
    if (other.isSetBuy_time()) {
      this.buy_time = other.buy_time;
    }
    this.hold_days = other.hold_days;
    this.position_ratio = other.position_ratio;
  }

  public TPosition deepCopy() {
    return new TPosition(this);
  }

  @Override
  public void clear() {
    this.order_book_id = null;
    this.quantity = 0;

    this.bought_quantity = 0;

    this.sold_quantity = 0;

    this.sold_value = 0;

    this.sellable = 0;

    this.total_orders = 0;

    this.total_trades = 0;

    this.total_commission = 0;

    this.total_profit_and_loss = 0;

    this.closing_price = 0;

    this.can_sell_shares_num = 0;

    this.bought_value = 0;

    this.cost_price = 0;

    this.buy_time = null;
    this.hold_days = 0;

    this.position_ratio = 0;

  }

  public String getOrder_book_id() {
    return this.order_book_id;
  }

  public TPosition setOrder_book_id(String order_book_id) {
    this.order_book_id = order_book_id;
    return this;
  }

  public void unsetOrder_book_id() {
    this.order_book_id = null;
  }

  /** Returns true if field order_book_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder_book_id() {
    return this.order_book_id != null;
  }

  public void setOrder_book_idIsSet(boolean value) {
    if (!value) {
      this.order_book_id = null;
    }
  }

  public double getQuantity() {
    return this.quantity;
  }

  public TPosition setQuantity(double quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  public double getBought_quantity() {
    return this.bought_quantity;
  }

  public TPosition setBought_quantity(double bought_quantity) {
    this.bought_quantity = bought_quantity;
    setBought_quantityIsSet(true);
    return this;
  }

  public void unsetBought_quantity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOUGHT_QUANTITY_ISSET_ID);
  }

  /** Returns true if field bought_quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetBought_quantity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOUGHT_QUANTITY_ISSET_ID);
  }

  public void setBought_quantityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOUGHT_QUANTITY_ISSET_ID, value);
  }

  public double getSold_quantity() {
    return this.sold_quantity;
  }

  public TPosition setSold_quantity(double sold_quantity) {
    this.sold_quantity = sold_quantity;
    setSold_quantityIsSet(true);
    return this;
  }

  public void unsetSold_quantity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOLD_QUANTITY_ISSET_ID);
  }

  /** Returns true if field sold_quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetSold_quantity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOLD_QUANTITY_ISSET_ID);
  }

  public void setSold_quantityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOLD_QUANTITY_ISSET_ID, value);
  }

  public double getSold_value() {
    return this.sold_value;
  }

  public TPosition setSold_value(double sold_value) {
    this.sold_value = sold_value;
    setSold_valueIsSet(true);
    return this;
  }

  public void unsetSold_value() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOLD_VALUE_ISSET_ID);
  }

  /** Returns true if field sold_value is set (has been assigned a value) and false otherwise */
  public boolean isSetSold_value() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOLD_VALUE_ISSET_ID);
  }

  public void setSold_valueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOLD_VALUE_ISSET_ID, value);
  }

  public double getSellable() {
    return this.sellable;
  }

  public TPosition setSellable(double sellable) {
    this.sellable = sellable;
    setSellableIsSet(true);
    return this;
  }

  public void unsetSellable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SELLABLE_ISSET_ID);
  }

  /** Returns true if field sellable is set (has been assigned a value) and false otherwise */
  public boolean isSetSellable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SELLABLE_ISSET_ID);
  }

  public void setSellableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SELLABLE_ISSET_ID, value);
  }

  public double getTotal_orders() {
    return this.total_orders;
  }

  public TPosition setTotal_orders(double total_orders) {
    this.total_orders = total_orders;
    setTotal_ordersIsSet(true);
    return this;
  }

  public void unsetTotal_orders() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ORDERS_ISSET_ID);
  }

  /** Returns true if field total_orders is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_orders() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_ORDERS_ISSET_ID);
  }

  public void setTotal_ordersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_ORDERS_ISSET_ID, value);
  }

  public double getTotal_trades() {
    return this.total_trades;
  }

  public TPosition setTotal_trades(double total_trades) {
    this.total_trades = total_trades;
    setTotal_tradesIsSet(true);
    return this;
  }

  public void unsetTotal_trades() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_TRADES_ISSET_ID);
  }

  /** Returns true if field total_trades is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_trades() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_TRADES_ISSET_ID);
  }

  public void setTotal_tradesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_TRADES_ISSET_ID, value);
  }

  public double getTotal_commission() {
    return this.total_commission;
  }

  public TPosition setTotal_commission(double total_commission) {
    this.total_commission = total_commission;
    setTotal_commissionIsSet(true);
    return this;
  }

  public void unsetTotal_commission() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_COMMISSION_ISSET_ID);
  }

  /** Returns true if field total_commission is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_commission() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_COMMISSION_ISSET_ID);
  }

  public void setTotal_commissionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_COMMISSION_ISSET_ID, value);
  }

  public double getTotal_profit_and_loss() {
    return this.total_profit_and_loss;
  }

  public TPosition setTotal_profit_and_loss(double total_profit_and_loss) {
    this.total_profit_and_loss = total_profit_and_loss;
    setTotal_profit_and_lossIsSet(true);
    return this;
  }

  public void unsetTotal_profit_and_loss() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_PROFIT_AND_LOSS_ISSET_ID);
  }

  /** Returns true if field total_profit_and_loss is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_profit_and_loss() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_PROFIT_AND_LOSS_ISSET_ID);
  }

  public void setTotal_profit_and_lossIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_PROFIT_AND_LOSS_ISSET_ID, value);
  }

  public double getClosing_price() {
    return this.closing_price;
  }

  public TPosition setClosing_price(double closing_price) {
    this.closing_price = closing_price;
    setClosing_priceIsSet(true);
    return this;
  }

  public void unsetClosing_price() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLOSING_PRICE_ISSET_ID);
  }

  /** Returns true if field closing_price is set (has been assigned a value) and false otherwise */
  public boolean isSetClosing_price() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLOSING_PRICE_ISSET_ID);
  }

  public void setClosing_priceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLOSING_PRICE_ISSET_ID, value);
  }

  public double getCan_sell_shares_num() {
    return this.can_sell_shares_num;
  }

  public TPosition setCan_sell_shares_num(double can_sell_shares_num) {
    this.can_sell_shares_num = can_sell_shares_num;
    setCan_sell_shares_numIsSet(true);
    return this;
  }

  public void unsetCan_sell_shares_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAN_SELL_SHARES_NUM_ISSET_ID);
  }

  /** Returns true if field can_sell_shares_num is set (has been assigned a value) and false otherwise */
  public boolean isSetCan_sell_shares_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAN_SELL_SHARES_NUM_ISSET_ID);
  }

  public void setCan_sell_shares_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAN_SELL_SHARES_NUM_ISSET_ID, value);
  }

  public double getBought_value() {
    return this.bought_value;
  }

  public TPosition setBought_value(double bought_value) {
    this.bought_value = bought_value;
    setBought_valueIsSet(true);
    return this;
  }

  public void unsetBought_value() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOUGHT_VALUE_ISSET_ID);
  }

  /** Returns true if field bought_value is set (has been assigned a value) and false otherwise */
  public boolean isSetBought_value() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOUGHT_VALUE_ISSET_ID);
  }

  public void setBought_valueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOUGHT_VALUE_ISSET_ID, value);
  }

  public double getCost_price() {
    return this.cost_price;
  }

  public TPosition setCost_price(double cost_price) {
    this.cost_price = cost_price;
    setCost_priceIsSet(true);
    return this;
  }

  public void unsetCost_price() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COST_PRICE_ISSET_ID);
  }

  /** Returns true if field cost_price is set (has been assigned a value) and false otherwise */
  public boolean isSetCost_price() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COST_PRICE_ISSET_ID);
  }

  public void setCost_priceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COST_PRICE_ISSET_ID, value);
  }

  public String getBuy_time() {
    return this.buy_time;
  }

  public TPosition setBuy_time(String buy_time) {
    this.buy_time = buy_time;
    return this;
  }

  public void unsetBuy_time() {
    this.buy_time = null;
  }

  /** Returns true if field buy_time is set (has been assigned a value) and false otherwise */
  public boolean isSetBuy_time() {
    return this.buy_time != null;
  }

  public void setBuy_timeIsSet(boolean value) {
    if (!value) {
      this.buy_time = null;
    }
  }

  public int getHold_days() {
    return this.hold_days;
  }

  public TPosition setHold_days(int hold_days) {
    this.hold_days = hold_days;
    setHold_daysIsSet(true);
    return this;
  }

  public void unsetHold_days() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HOLD_DAYS_ISSET_ID);
  }

  /** Returns true if field hold_days is set (has been assigned a value) and false otherwise */
  public boolean isSetHold_days() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HOLD_DAYS_ISSET_ID);
  }

  public void setHold_daysIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HOLD_DAYS_ISSET_ID, value);
  }

  public double getPosition_ratio() {
    return this.position_ratio;
  }

  public TPosition setPosition_ratio(double position_ratio) {
    this.position_ratio = position_ratio;
    setPosition_ratioIsSet(true);
    return this;
  }

  public void unsetPosition_ratio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_RATIO_ISSET_ID);
  }

  /** Returns true if field position_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition_ratio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_RATIO_ISSET_ID);
  }

  public void setPosition_ratioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_RATIO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_BOOK_ID:
      if (value == null) {
        unsetOrder_book_id();
      } else {
        setOrder_book_id((String)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Double)value);
      }
      break;

    case BOUGHT_QUANTITY:
      if (value == null) {
        unsetBought_quantity();
      } else {
        setBought_quantity((Double)value);
      }
      break;

    case SOLD_QUANTITY:
      if (value == null) {
        unsetSold_quantity();
      } else {
        setSold_quantity((Double)value);
      }
      break;

    case SOLD_VALUE:
      if (value == null) {
        unsetSold_value();
      } else {
        setSold_value((Double)value);
      }
      break;

    case SELLABLE:
      if (value == null) {
        unsetSellable();
      } else {
        setSellable((Double)value);
      }
      break;

    case TOTAL_ORDERS:
      if (value == null) {
        unsetTotal_orders();
      } else {
        setTotal_orders((Double)value);
      }
      break;

    case TOTAL_TRADES:
      if (value == null) {
        unsetTotal_trades();
      } else {
        setTotal_trades((Double)value);
      }
      break;

    case TOTAL_COMMISSION:
      if (value == null) {
        unsetTotal_commission();
      } else {
        setTotal_commission((Double)value);
      }
      break;

    case TOTAL_PROFIT_AND_LOSS:
      if (value == null) {
        unsetTotal_profit_and_loss();
      } else {
        setTotal_profit_and_loss((Double)value);
      }
      break;

    case CLOSING_PRICE:
      if (value == null) {
        unsetClosing_price();
      } else {
        setClosing_price((Double)value);
      }
      break;

    case CAN_SELL_SHARES_NUM:
      if (value == null) {
        unsetCan_sell_shares_num();
      } else {
        setCan_sell_shares_num((Double)value);
      }
      break;

    case BOUGHT_VALUE:
      if (value == null) {
        unsetBought_value();
      } else {
        setBought_value((Double)value);
      }
      break;

    case COST_PRICE:
      if (value == null) {
        unsetCost_price();
      } else {
        setCost_price((Double)value);
      }
      break;

    case BUY_TIME:
      if (value == null) {
        unsetBuy_time();
      } else {
        setBuy_time((String)value);
      }
      break;

    case HOLD_DAYS:
      if (value == null) {
        unsetHold_days();
      } else {
        setHold_days((Integer)value);
      }
      break;

    case POSITION_RATIO:
      if (value == null) {
        unsetPosition_ratio();
      } else {
        setPosition_ratio((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_BOOK_ID:
      return getOrder_book_id();

    case QUANTITY:
      return getQuantity();

    case BOUGHT_QUANTITY:
      return getBought_quantity();

    case SOLD_QUANTITY:
      return getSold_quantity();

    case SOLD_VALUE:
      return getSold_value();

    case SELLABLE:
      return getSellable();

    case TOTAL_ORDERS:
      return getTotal_orders();

    case TOTAL_TRADES:
      return getTotal_trades();

    case TOTAL_COMMISSION:
      return getTotal_commission();

    case TOTAL_PROFIT_AND_LOSS:
      return getTotal_profit_and_loss();

    case CLOSING_PRICE:
      return getClosing_price();

    case CAN_SELL_SHARES_NUM:
      return getCan_sell_shares_num();

    case BOUGHT_VALUE:
      return getBought_value();

    case COST_PRICE:
      return getCost_price();

    case BUY_TIME:
      return getBuy_time();

    case HOLD_DAYS:
      return getHold_days();

    case POSITION_RATIO:
      return getPosition_ratio();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_BOOK_ID:
      return isSetOrder_book_id();
    case QUANTITY:
      return isSetQuantity();
    case BOUGHT_QUANTITY:
      return isSetBought_quantity();
    case SOLD_QUANTITY:
      return isSetSold_quantity();
    case SOLD_VALUE:
      return isSetSold_value();
    case SELLABLE:
      return isSetSellable();
    case TOTAL_ORDERS:
      return isSetTotal_orders();
    case TOTAL_TRADES:
      return isSetTotal_trades();
    case TOTAL_COMMISSION:
      return isSetTotal_commission();
    case TOTAL_PROFIT_AND_LOSS:
      return isSetTotal_profit_and_loss();
    case CLOSING_PRICE:
      return isSetClosing_price();
    case CAN_SELL_SHARES_NUM:
      return isSetCan_sell_shares_num();
    case BOUGHT_VALUE:
      return isSetBought_value();
    case COST_PRICE:
      return isSetCost_price();
    case BUY_TIME:
      return isSetBuy_time();
    case HOLD_DAYS:
      return isSetHold_days();
    case POSITION_RATIO:
      return isSetPosition_ratio();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPosition)
      return this.equals((TPosition)that);
    return false;
  }

  public boolean equals(TPosition that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_order_book_id = true && this.isSetOrder_book_id();
    boolean that_present_order_book_id = true && that.isSetOrder_book_id();
    if (this_present_order_book_id || that_present_order_book_id) {
      if (!(this_present_order_book_id && that_present_order_book_id))
        return false;
      if (!this.order_book_id.equals(that.order_book_id))
        return false;
    }

    boolean this_present_quantity = true && this.isSetQuantity();
    boolean that_present_quantity = true && that.isSetQuantity();
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_bought_quantity = true && this.isSetBought_quantity();
    boolean that_present_bought_quantity = true && that.isSetBought_quantity();
    if (this_present_bought_quantity || that_present_bought_quantity) {
      if (!(this_present_bought_quantity && that_present_bought_quantity))
        return false;
      if (this.bought_quantity != that.bought_quantity)
        return false;
    }

    boolean this_present_sold_quantity = true && this.isSetSold_quantity();
    boolean that_present_sold_quantity = true && that.isSetSold_quantity();
    if (this_present_sold_quantity || that_present_sold_quantity) {
      if (!(this_present_sold_quantity && that_present_sold_quantity))
        return false;
      if (this.sold_quantity != that.sold_quantity)
        return false;
    }

    boolean this_present_sold_value = true && this.isSetSold_value();
    boolean that_present_sold_value = true && that.isSetSold_value();
    if (this_present_sold_value || that_present_sold_value) {
      if (!(this_present_sold_value && that_present_sold_value))
        return false;
      if (this.sold_value != that.sold_value)
        return false;
    }

    boolean this_present_sellable = true && this.isSetSellable();
    boolean that_present_sellable = true && that.isSetSellable();
    if (this_present_sellable || that_present_sellable) {
      if (!(this_present_sellable && that_present_sellable))
        return false;
      if (this.sellable != that.sellable)
        return false;
    }

    boolean this_present_total_orders = true && this.isSetTotal_orders();
    boolean that_present_total_orders = true && that.isSetTotal_orders();
    if (this_present_total_orders || that_present_total_orders) {
      if (!(this_present_total_orders && that_present_total_orders))
        return false;
      if (this.total_orders != that.total_orders)
        return false;
    }

    boolean this_present_total_trades = true && this.isSetTotal_trades();
    boolean that_present_total_trades = true && that.isSetTotal_trades();
    if (this_present_total_trades || that_present_total_trades) {
      if (!(this_present_total_trades && that_present_total_trades))
        return false;
      if (this.total_trades != that.total_trades)
        return false;
    }

    boolean this_present_total_commission = true && this.isSetTotal_commission();
    boolean that_present_total_commission = true && that.isSetTotal_commission();
    if (this_present_total_commission || that_present_total_commission) {
      if (!(this_present_total_commission && that_present_total_commission))
        return false;
      if (this.total_commission != that.total_commission)
        return false;
    }

    boolean this_present_total_profit_and_loss = true && this.isSetTotal_profit_and_loss();
    boolean that_present_total_profit_and_loss = true && that.isSetTotal_profit_and_loss();
    if (this_present_total_profit_and_loss || that_present_total_profit_and_loss) {
      if (!(this_present_total_profit_and_loss && that_present_total_profit_and_loss))
        return false;
      if (this.total_profit_and_loss != that.total_profit_and_loss)
        return false;
    }

    boolean this_present_closing_price = true && this.isSetClosing_price();
    boolean that_present_closing_price = true && that.isSetClosing_price();
    if (this_present_closing_price || that_present_closing_price) {
      if (!(this_present_closing_price && that_present_closing_price))
        return false;
      if (this.closing_price != that.closing_price)
        return false;
    }

    boolean this_present_can_sell_shares_num = true && this.isSetCan_sell_shares_num();
    boolean that_present_can_sell_shares_num = true && that.isSetCan_sell_shares_num();
    if (this_present_can_sell_shares_num || that_present_can_sell_shares_num) {
      if (!(this_present_can_sell_shares_num && that_present_can_sell_shares_num))
        return false;
      if (this.can_sell_shares_num != that.can_sell_shares_num)
        return false;
    }

    boolean this_present_bought_value = true && this.isSetBought_value();
    boolean that_present_bought_value = true && that.isSetBought_value();
    if (this_present_bought_value || that_present_bought_value) {
      if (!(this_present_bought_value && that_present_bought_value))
        return false;
      if (this.bought_value != that.bought_value)
        return false;
    }

    boolean this_present_cost_price = true && this.isSetCost_price();
    boolean that_present_cost_price = true && that.isSetCost_price();
    if (this_present_cost_price || that_present_cost_price) {
      if (!(this_present_cost_price && that_present_cost_price))
        return false;
      if (this.cost_price != that.cost_price)
        return false;
    }

    boolean this_present_buy_time = true && this.isSetBuy_time();
    boolean that_present_buy_time = true && that.isSetBuy_time();
    if (this_present_buy_time || that_present_buy_time) {
      if (!(this_present_buy_time && that_present_buy_time))
        return false;
      if (!this.buy_time.equals(that.buy_time))
        return false;
    }

    boolean this_present_hold_days = true && this.isSetHold_days();
    boolean that_present_hold_days = true && that.isSetHold_days();
    if (this_present_hold_days || that_present_hold_days) {
      if (!(this_present_hold_days && that_present_hold_days))
        return false;
      if (this.hold_days != that.hold_days)
        return false;
    }

    boolean this_present_position_ratio = true && this.isSetPosition_ratio();
    boolean that_present_position_ratio = true && that.isSetPosition_ratio();
    if (this_present_position_ratio || that_present_position_ratio) {
      if (!(this_present_position_ratio && that_present_position_ratio))
        return false;
      if (this.position_ratio != that.position_ratio)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrder_book_id()) ? 131071 : 524287);
    if (isSetOrder_book_id())
      hashCode = hashCode * 8191 + order_book_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuantity()) ? 131071 : 524287);
    if (isSetQuantity())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(quantity);

    hashCode = hashCode * 8191 + ((isSetBought_quantity()) ? 131071 : 524287);
    if (isSetBought_quantity())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bought_quantity);

    hashCode = hashCode * 8191 + ((isSetSold_quantity()) ? 131071 : 524287);
    if (isSetSold_quantity())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sold_quantity);

    hashCode = hashCode * 8191 + ((isSetSold_value()) ? 131071 : 524287);
    if (isSetSold_value())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sold_value);

    hashCode = hashCode * 8191 + ((isSetSellable()) ? 131071 : 524287);
    if (isSetSellable())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sellable);

    hashCode = hashCode * 8191 + ((isSetTotal_orders()) ? 131071 : 524287);
    if (isSetTotal_orders())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_orders);

    hashCode = hashCode * 8191 + ((isSetTotal_trades()) ? 131071 : 524287);
    if (isSetTotal_trades())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_trades);

    hashCode = hashCode * 8191 + ((isSetTotal_commission()) ? 131071 : 524287);
    if (isSetTotal_commission())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_commission);

    hashCode = hashCode * 8191 + ((isSetTotal_profit_and_loss()) ? 131071 : 524287);
    if (isSetTotal_profit_and_loss())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_profit_and_loss);

    hashCode = hashCode * 8191 + ((isSetClosing_price()) ? 131071 : 524287);
    if (isSetClosing_price())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(closing_price);

    hashCode = hashCode * 8191 + ((isSetCan_sell_shares_num()) ? 131071 : 524287);
    if (isSetCan_sell_shares_num())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(can_sell_shares_num);

    hashCode = hashCode * 8191 + ((isSetBought_value()) ? 131071 : 524287);
    if (isSetBought_value())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bought_value);

    hashCode = hashCode * 8191 + ((isSetCost_price()) ? 131071 : 524287);
    if (isSetCost_price())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cost_price);

    hashCode = hashCode * 8191 + ((isSetBuy_time()) ? 131071 : 524287);
    if (isSetBuy_time())
      hashCode = hashCode * 8191 + buy_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetHold_days()) ? 131071 : 524287);
    if (isSetHold_days())
      hashCode = hashCode * 8191 + hold_days;

    hashCode = hashCode * 8191 + ((isSetPosition_ratio()) ? 131071 : 524287);
    if (isSetPosition_ratio())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(position_ratio);

    return hashCode;
  }

  @Override
  public int compareTo(TPosition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrder_book_id()).compareTo(other.isSetOrder_book_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder_book_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_book_id, other.order_book_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBought_quantity()).compareTo(other.isSetBought_quantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBought_quantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bought_quantity, other.bought_quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSold_quantity()).compareTo(other.isSetSold_quantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSold_quantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sold_quantity, other.sold_quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSold_value()).compareTo(other.isSetSold_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSold_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sold_value, other.sold_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellable()).compareTo(other.isSetSellable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellable, other.sellable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_orders()).compareTo(other.isSetTotal_orders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_orders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_orders, other.total_orders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_trades()).compareTo(other.isSetTotal_trades());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_trades()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_trades, other.total_trades);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_commission()).compareTo(other.isSetTotal_commission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_commission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_commission, other.total_commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_profit_and_loss()).compareTo(other.isSetTotal_profit_and_loss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_profit_and_loss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_profit_and_loss, other.total_profit_and_loss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClosing_price()).compareTo(other.isSetClosing_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClosing_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closing_price, other.closing_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCan_sell_shares_num()).compareTo(other.isSetCan_sell_shares_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCan_sell_shares_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.can_sell_shares_num, other.can_sell_shares_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBought_value()).compareTo(other.isSetBought_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBought_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bought_value, other.bought_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCost_price()).compareTo(other.isSetCost_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCost_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cost_price, other.cost_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuy_time()).compareTo(other.isSetBuy_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuy_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buy_time, other.buy_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHold_days()).compareTo(other.isSetHold_days());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHold_days()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hold_days, other.hold_days);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition_ratio()).compareTo(other.isSetPosition_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_ratio, other.position_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPosition(");
    boolean first = true;

    if (isSetOrder_book_id()) {
      sb.append("order_book_id:");
      if (this.order_book_id == null) {
        sb.append("null");
      } else {
        sb.append(this.order_book_id);
      }
      first = false;
    }
    if (isSetQuantity()) {
      if (!first) sb.append(", ");
      sb.append("quantity:");
      sb.append(this.quantity);
      first = false;
    }
    if (isSetBought_quantity()) {
      if (!first) sb.append(", ");
      sb.append("bought_quantity:");
      sb.append(this.bought_quantity);
      first = false;
    }
    if (isSetSold_quantity()) {
      if (!first) sb.append(", ");
      sb.append("sold_quantity:");
      sb.append(this.sold_quantity);
      first = false;
    }
    if (isSetSold_value()) {
      if (!first) sb.append(", ");
      sb.append("sold_value:");
      sb.append(this.sold_value);
      first = false;
    }
    if (isSetSellable()) {
      if (!first) sb.append(", ");
      sb.append("sellable:");
      sb.append(this.sellable);
      first = false;
    }
    if (isSetTotal_orders()) {
      if (!first) sb.append(", ");
      sb.append("total_orders:");
      sb.append(this.total_orders);
      first = false;
    }
    if (isSetTotal_trades()) {
      if (!first) sb.append(", ");
      sb.append("total_trades:");
      sb.append(this.total_trades);
      first = false;
    }
    if (isSetTotal_commission()) {
      if (!first) sb.append(", ");
      sb.append("total_commission:");
      sb.append(this.total_commission);
      first = false;
    }
    if (isSetTotal_profit_and_loss()) {
      if (!first) sb.append(", ");
      sb.append("total_profit_and_loss:");
      sb.append(this.total_profit_and_loss);
      first = false;
    }
    if (isSetClosing_price()) {
      if (!first) sb.append(", ");
      sb.append("closing_price:");
      sb.append(this.closing_price);
      first = false;
    }
    if (isSetCan_sell_shares_num()) {
      if (!first) sb.append(", ");
      sb.append("can_sell_shares_num:");
      sb.append(this.can_sell_shares_num);
      first = false;
    }
    if (isSetBought_value()) {
      if (!first) sb.append(", ");
      sb.append("bought_value:");
      sb.append(this.bought_value);
      first = false;
    }
    if (isSetCost_price()) {
      if (!first) sb.append(", ");
      sb.append("cost_price:");
      sb.append(this.cost_price);
      first = false;
    }
    if (isSetBuy_time()) {
      if (!first) sb.append(", ");
      sb.append("buy_time:");
      if (this.buy_time == null) {
        sb.append("null");
      } else {
        sb.append(this.buy_time);
      }
      first = false;
    }
    if (isSetHold_days()) {
      if (!first) sb.append(", ");
      sb.append("hold_days:");
      sb.append(this.hold_days);
      first = false;
    }
    if (isSetPosition_ratio()) {
      if (!first) sb.append(", ");
      sb.append("position_ratio:");
      sb.append(this.position_ratio);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPositionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPositionStandardScheme getScheme() {
      return new TPositionStandardScheme();
    }
  }

  private static class TPositionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPosition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_BOOK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.order_book_id = iprot.readString();
              struct.setOrder_book_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.quantity = iprot.readDouble();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BOUGHT_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bought_quantity = iprot.readDouble();
              struct.setBought_quantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOLD_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sold_quantity = iprot.readDouble();
              struct.setSold_quantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SOLD_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sold_value = iprot.readDouble();
              struct.setSold_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SELLABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sellable = iprot.readDouble();
              struct.setSellableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_ORDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total_orders = iprot.readDouble();
              struct.setTotal_ordersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_TRADES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total_trades = iprot.readDouble();
              struct.setTotal_tradesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total_commission = iprot.readDouble();
              struct.setTotal_commissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOTAL_PROFIT_AND_LOSS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total_profit_and_loss = iprot.readDouble();
              struct.setTotal_profit_and_lossIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CLOSING_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closing_price = iprot.readDouble();
              struct.setClosing_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CAN_SELL_SHARES_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.can_sell_shares_num = iprot.readDouble();
              struct.setCan_sell_shares_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BOUGHT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bought_value = iprot.readDouble();
              struct.setBought_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cost_price = iprot.readDouble();
              struct.setCost_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BUY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buy_time = iprot.readString();
              struct.setBuy_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HOLD_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hold_days = iprot.readI32();
              struct.setHold_daysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // POSITION_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.position_ratio = iprot.readDouble();
              struct.setPosition_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPosition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.order_book_id != null) {
        if (struct.isSetOrder_book_id()) {
          oprot.writeFieldBegin(ORDER_BOOK_ID_FIELD_DESC);
          oprot.writeString(struct.order_book_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetQuantity()) {
        oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
        oprot.writeDouble(struct.quantity);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBought_quantity()) {
        oprot.writeFieldBegin(BOUGHT_QUANTITY_FIELD_DESC);
        oprot.writeDouble(struct.bought_quantity);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSold_quantity()) {
        oprot.writeFieldBegin(SOLD_QUANTITY_FIELD_DESC);
        oprot.writeDouble(struct.sold_quantity);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSold_value()) {
        oprot.writeFieldBegin(SOLD_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.sold_value);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSellable()) {
        oprot.writeFieldBegin(SELLABLE_FIELD_DESC);
        oprot.writeDouble(struct.sellable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotal_orders()) {
        oprot.writeFieldBegin(TOTAL_ORDERS_FIELD_DESC);
        oprot.writeDouble(struct.total_orders);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotal_trades()) {
        oprot.writeFieldBegin(TOTAL_TRADES_FIELD_DESC);
        oprot.writeDouble(struct.total_trades);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotal_commission()) {
        oprot.writeFieldBegin(TOTAL_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.total_commission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotal_profit_and_loss()) {
        oprot.writeFieldBegin(TOTAL_PROFIT_AND_LOSS_FIELD_DESC);
        oprot.writeDouble(struct.total_profit_and_loss);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClosing_price()) {
        oprot.writeFieldBegin(CLOSING_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.closing_price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCan_sell_shares_num()) {
        oprot.writeFieldBegin(CAN_SELL_SHARES_NUM_FIELD_DESC);
        oprot.writeDouble(struct.can_sell_shares_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBought_value()) {
        oprot.writeFieldBegin(BOUGHT_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.bought_value);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCost_price()) {
        oprot.writeFieldBegin(COST_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.cost_price);
        oprot.writeFieldEnd();
      }
      if (struct.buy_time != null) {
        if (struct.isSetBuy_time()) {
          oprot.writeFieldBegin(BUY_TIME_FIELD_DESC);
          oprot.writeString(struct.buy_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHold_days()) {
        oprot.writeFieldBegin(HOLD_DAYS_FIELD_DESC);
        oprot.writeI32(struct.hold_days);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPosition_ratio()) {
        oprot.writeFieldBegin(POSITION_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.position_ratio);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPositionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPositionTupleScheme getScheme() {
      return new TPositionTupleScheme();
    }
  }

  private static class TPositionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPosition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrder_book_id()) {
        optionals.set(0);
      }
      if (struct.isSetQuantity()) {
        optionals.set(1);
      }
      if (struct.isSetBought_quantity()) {
        optionals.set(2);
      }
      if (struct.isSetSold_quantity()) {
        optionals.set(3);
      }
      if (struct.isSetSold_value()) {
        optionals.set(4);
      }
      if (struct.isSetSellable()) {
        optionals.set(5);
      }
      if (struct.isSetTotal_orders()) {
        optionals.set(6);
      }
      if (struct.isSetTotal_trades()) {
        optionals.set(7);
      }
      if (struct.isSetTotal_commission()) {
        optionals.set(8);
      }
      if (struct.isSetTotal_profit_and_loss()) {
        optionals.set(9);
      }
      if (struct.isSetClosing_price()) {
        optionals.set(10);
      }
      if (struct.isSetCan_sell_shares_num()) {
        optionals.set(11);
      }
      if (struct.isSetBought_value()) {
        optionals.set(12);
      }
      if (struct.isSetCost_price()) {
        optionals.set(13);
      }
      if (struct.isSetBuy_time()) {
        optionals.set(14);
      }
      if (struct.isSetHold_days()) {
        optionals.set(15);
      }
      if (struct.isSetPosition_ratio()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetOrder_book_id()) {
        oprot.writeString(struct.order_book_id);
      }
      if (struct.isSetQuantity()) {
        oprot.writeDouble(struct.quantity);
      }
      if (struct.isSetBought_quantity()) {
        oprot.writeDouble(struct.bought_quantity);
      }
      if (struct.isSetSold_quantity()) {
        oprot.writeDouble(struct.sold_quantity);
      }
      if (struct.isSetSold_value()) {
        oprot.writeDouble(struct.sold_value);
      }
      if (struct.isSetSellable()) {
        oprot.writeDouble(struct.sellable);
      }
      if (struct.isSetTotal_orders()) {
        oprot.writeDouble(struct.total_orders);
      }
      if (struct.isSetTotal_trades()) {
        oprot.writeDouble(struct.total_trades);
      }
      if (struct.isSetTotal_commission()) {
        oprot.writeDouble(struct.total_commission);
      }
      if (struct.isSetTotal_profit_and_loss()) {
        oprot.writeDouble(struct.total_profit_and_loss);
      }
      if (struct.isSetClosing_price()) {
        oprot.writeDouble(struct.closing_price);
      }
      if (struct.isSetCan_sell_shares_num()) {
        oprot.writeDouble(struct.can_sell_shares_num);
      }
      if (struct.isSetBought_value()) {
        oprot.writeDouble(struct.bought_value);
      }
      if (struct.isSetCost_price()) {
        oprot.writeDouble(struct.cost_price);
      }
      if (struct.isSetBuy_time()) {
        oprot.writeString(struct.buy_time);
      }
      if (struct.isSetHold_days()) {
        oprot.writeI32(struct.hold_days);
      }
      if (struct.isSetPosition_ratio()) {
        oprot.writeDouble(struct.position_ratio);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.order_book_id = iprot.readString();
        struct.setOrder_book_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.quantity = iprot.readDouble();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bought_quantity = iprot.readDouble();
        struct.setBought_quantityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sold_quantity = iprot.readDouble();
        struct.setSold_quantityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sold_value = iprot.readDouble();
        struct.setSold_valueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sellable = iprot.readDouble();
        struct.setSellableIsSet(true);
      }
      if (incoming.get(6)) {
        struct.total_orders = iprot.readDouble();
        struct.setTotal_ordersIsSet(true);
      }
      if (incoming.get(7)) {
        struct.total_trades = iprot.readDouble();
        struct.setTotal_tradesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.total_commission = iprot.readDouble();
        struct.setTotal_commissionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.total_profit_and_loss = iprot.readDouble();
        struct.setTotal_profit_and_lossIsSet(true);
      }
      if (incoming.get(10)) {
        struct.closing_price = iprot.readDouble();
        struct.setClosing_priceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.can_sell_shares_num = iprot.readDouble();
        struct.setCan_sell_shares_numIsSet(true);
      }
      if (incoming.get(12)) {
        struct.bought_value = iprot.readDouble();
        struct.setBought_valueIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cost_price = iprot.readDouble();
        struct.setCost_priceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.buy_time = iprot.readString();
        struct.setBuy_timeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.hold_days = iprot.readI32();
        struct.setHold_daysIsSet(true);
      }
      if (incoming.get(16)) {
        struct.position_ratio = iprot.readDouble();
        struct.setPosition_ratioIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

