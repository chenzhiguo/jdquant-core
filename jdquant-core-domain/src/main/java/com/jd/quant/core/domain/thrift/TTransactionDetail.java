/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jd.quant.core.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 交易详情
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-21")
public class TTransactionDetail implements org.apache.thrift.TBase<TTransactionDetail, TTransactionDetail._Fields>, java.io.Serializable, Cloneable, Comparable<TTransactionDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTransactionDetail");

  private static final org.apache.thrift.protocol.TField ORDER_BOOK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderBookId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField BUY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("buyCount", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TAX_FIELD_DESC = new org.apache.thrift.protocol.TField("tax", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField TOTLE_FIELD_DESC = new org.apache.thrift.protocol.TField("totle", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField ORDER_STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStyle", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PROPORTION_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("proportionFrom", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField PROPORTION_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("proportionTo", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField STOCK_NUMBER_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("stockNumberFrom", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField STOCK_NUMBER_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("stockNumberTo", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTransactionDetailStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTransactionDetailTupleSchemeFactory();

  public String orderBookId; // optional
  public String orderType; // optional
  public double count; // optional
  public double buyCount; // optional
  public double price; // optional
  public double tax; // optional
  public double totle; // optional
  public double commission; // optional
  public String date; // optional
  public boolean flag; // optional
  public String message; // optional
  public long orderId; // optional
  public int orderStyle; // optional
  public double proportionFrom; // optional
  public double proportionTo; // optional
  public int stockNumberFrom; // optional
  public int stockNumberTo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_BOOK_ID((short)1, "orderBookId"),
    ORDER_TYPE((short)2, "orderType"),
    COUNT((short)3, "count"),
    BUY_COUNT((short)4, "buyCount"),
    PRICE((short)5, "price"),
    TAX((short)6, "tax"),
    TOTLE((short)7, "totle"),
    COMMISSION((short)8, "commission"),
    DATE((short)9, "date"),
    FLAG((short)10, "flag"),
    MESSAGE((short)11, "message"),
    ORDER_ID((short)12, "orderId"),
    ORDER_STYLE((short)13, "orderStyle"),
    PROPORTION_FROM((short)14, "proportionFrom"),
    PROPORTION_TO((short)15, "proportionTo"),
    STOCK_NUMBER_FROM((short)16, "stockNumberFrom"),
    STOCK_NUMBER_TO((short)17, "stockNumberTo");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_BOOK_ID
          return ORDER_BOOK_ID;
        case 2: // ORDER_TYPE
          return ORDER_TYPE;
        case 3: // COUNT
          return COUNT;
        case 4: // BUY_COUNT
          return BUY_COUNT;
        case 5: // PRICE
          return PRICE;
        case 6: // TAX
          return TAX;
        case 7: // TOTLE
          return TOTLE;
        case 8: // COMMISSION
          return COMMISSION;
        case 9: // DATE
          return DATE;
        case 10: // FLAG
          return FLAG;
        case 11: // MESSAGE
          return MESSAGE;
        case 12: // ORDER_ID
          return ORDER_ID;
        case 13: // ORDER_STYLE
          return ORDER_STYLE;
        case 14: // PROPORTION_FROM
          return PROPORTION_FROM;
        case 15: // PROPORTION_TO
          return PROPORTION_TO;
        case 16: // STOCK_NUMBER_FROM
          return STOCK_NUMBER_FROM;
        case 17: // STOCK_NUMBER_TO
          return STOCK_NUMBER_TO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUNT_ISSET_ID = 0;
  private static final int __BUYCOUNT_ISSET_ID = 1;
  private static final int __PRICE_ISSET_ID = 2;
  private static final int __TAX_ISSET_ID = 3;
  private static final int __TOTLE_ISSET_ID = 4;
  private static final int __COMMISSION_ISSET_ID = 5;
  private static final int __FLAG_ISSET_ID = 6;
  private static final int __ORDERID_ISSET_ID = 7;
  private static final int __ORDERSTYLE_ISSET_ID = 8;
  private static final int __PROPORTIONFROM_ISSET_ID = 9;
  private static final int __PROPORTIONTO_ISSET_ID = 10;
  private static final int __STOCKNUMBERFROM_ISSET_ID = 11;
  private static final int __STOCKNUMBERTO_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORDER_BOOK_ID,_Fields.ORDER_TYPE,_Fields.COUNT,_Fields.BUY_COUNT,_Fields.PRICE,_Fields.TAX,_Fields.TOTLE,_Fields.COMMISSION,_Fields.DATE,_Fields.FLAG,_Fields.MESSAGE,_Fields.ORDER_ID,_Fields.ORDER_STYLE,_Fields.PROPORTION_FROM,_Fields.PROPORTION_TO,_Fields.STOCK_NUMBER_FROM,_Fields.STOCK_NUMBER_TO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_BOOK_ID, new org.apache.thrift.meta_data.FieldMetaData("orderBookId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("buyCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TAX, new org.apache.thrift.meta_data.FieldMetaData("tax", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTLE, new org.apache.thrift.meta_data.FieldMetaData("totle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_STYLE, new org.apache.thrift.meta_data.FieldMetaData("orderStyle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROPORTION_FROM, new org.apache.thrift.meta_data.FieldMetaData("proportionFrom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROPORTION_TO, new org.apache.thrift.meta_data.FieldMetaData("proportionTo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STOCK_NUMBER_FROM, new org.apache.thrift.meta_data.FieldMetaData("stockNumberFrom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STOCK_NUMBER_TO, new org.apache.thrift.meta_data.FieldMetaData("stockNumberTo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTransactionDetail.class, metaDataMap);
  }

  public TTransactionDetail() {
    this.count = 0;

    this.buyCount = 0;

    this.price = 0;

    this.tax = 0;

    this.totle = 0;

    this.commission = 0;

    this.flag = true;

    this.orderStyle = 1;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTransactionDetail(TTransactionDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderBookId()) {
      this.orderBookId = other.orderBookId;
    }
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    this.count = other.count;
    this.buyCount = other.buyCount;
    this.price = other.price;
    this.tax = other.tax;
    this.totle = other.totle;
    this.commission = other.commission;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.flag = other.flag;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    this.orderId = other.orderId;
    this.orderStyle = other.orderStyle;
    this.proportionFrom = other.proportionFrom;
    this.proportionTo = other.proportionTo;
    this.stockNumberFrom = other.stockNumberFrom;
    this.stockNumberTo = other.stockNumberTo;
  }

  public TTransactionDetail deepCopy() {
    return new TTransactionDetail(this);
  }

  @Override
  public void clear() {
    this.orderBookId = null;
    this.orderType = null;
    this.count = 0;

    this.buyCount = 0;

    this.price = 0;

    this.tax = 0;

    this.totle = 0;

    this.commission = 0;

    this.date = null;
    this.flag = true;

    this.message = null;
    setOrderIdIsSet(false);
    this.orderId = 0;
    this.orderStyle = 1;

    setProportionFromIsSet(false);
    this.proportionFrom = 0.0;
    setProportionToIsSet(false);
    this.proportionTo = 0.0;
    setStockNumberFromIsSet(false);
    this.stockNumberFrom = 0;
    setStockNumberToIsSet(false);
    this.stockNumberTo = 0;
  }

  public String getOrderBookId() {
    return this.orderBookId;
  }

  public TTransactionDetail setOrderBookId(String orderBookId) {
    this.orderBookId = orderBookId;
    return this;
  }

  public void unsetOrderBookId() {
    this.orderBookId = null;
  }

  /** Returns true if field orderBookId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderBookId() {
    return this.orderBookId != null;
  }

  public void setOrderBookIdIsSet(boolean value) {
    if (!value) {
      this.orderBookId = null;
    }
  }

  public String getOrderType() {
    return this.orderType;
  }

  public TTransactionDetail setOrderType(String orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  public double getCount() {
    return this.count;
  }

  public TTransactionDetail setCount(double count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public double getBuyCount() {
    return this.buyCount;
  }

  public TTransactionDetail setBuyCount(double buyCount) {
    this.buyCount = buyCount;
    setBuyCountIsSet(true);
    return this;
  }

  public void unsetBuyCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUYCOUNT_ISSET_ID);
  }

  /** Returns true if field buyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUYCOUNT_ISSET_ID);
  }

  public void setBuyCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUYCOUNT_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public TTransactionDetail setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public double getTax() {
    return this.tax;
  }

  public TTransactionDetail setTax(double tax) {
    this.tax = tax;
    setTaxIsSet(true);
    return this;
  }

  public void unsetTax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAX_ISSET_ID);
  }

  /** Returns true if field tax is set (has been assigned a value) and false otherwise */
  public boolean isSetTax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAX_ISSET_ID);
  }

  public void setTaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAX_ISSET_ID, value);
  }

  public double getTotle() {
    return this.totle;
  }

  public TTransactionDetail setTotle(double totle) {
    this.totle = totle;
    setTotleIsSet(true);
    return this;
  }

  public void unsetTotle() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTLE_ISSET_ID);
  }

  /** Returns true if field totle is set (has been assigned a value) and false otherwise */
  public boolean isSetTotle() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTLE_ISSET_ID);
  }

  public void setTotleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTLE_ISSET_ID, value);
  }

  public double getCommission() {
    return this.commission;
  }

  public TTransactionDetail setCommission(double commission) {
    this.commission = commission;
    setCommissionIsSet(true);
    return this;
  }

  public void unsetCommission() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  public void setCommissionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMISSION_ISSET_ID, value);
  }

  public String getDate() {
    return this.date;
  }

  public TTransactionDetail setDate(String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public boolean isFlag() {
    return this.flag;
  }

  public TTransactionDetail setFlag(boolean flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public String getMessage() {
    return this.message;
  }

  public TTransactionDetail setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public long getOrderId() {
    return this.orderId;
  }

  public TTransactionDetail setOrderId(long orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public int getOrderStyle() {
    return this.orderStyle;
  }

  public TTransactionDetail setOrderStyle(int orderStyle) {
    this.orderStyle = orderStyle;
    setOrderStyleIsSet(true);
    return this;
  }

  public void unsetOrderStyle() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDERSTYLE_ISSET_ID);
  }

  /** Returns true if field orderStyle is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStyle() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDERSTYLE_ISSET_ID);
  }

  public void setOrderStyleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDERSTYLE_ISSET_ID, value);
  }

  public double getProportionFrom() {
    return this.proportionFrom;
  }

  public TTransactionDetail setProportionFrom(double proportionFrom) {
    this.proportionFrom = proportionFrom;
    setProportionFromIsSet(true);
    return this;
  }

  public void unsetProportionFrom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROPORTIONFROM_ISSET_ID);
  }

  /** Returns true if field proportionFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetProportionFrom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROPORTIONFROM_ISSET_ID);
  }

  public void setProportionFromIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROPORTIONFROM_ISSET_ID, value);
  }

  public double getProportionTo() {
    return this.proportionTo;
  }

  public TTransactionDetail setProportionTo(double proportionTo) {
    this.proportionTo = proportionTo;
    setProportionToIsSet(true);
    return this;
  }

  public void unsetProportionTo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROPORTIONTO_ISSET_ID);
  }

  /** Returns true if field proportionTo is set (has been assigned a value) and false otherwise */
  public boolean isSetProportionTo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROPORTIONTO_ISSET_ID);
  }

  public void setProportionToIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROPORTIONTO_ISSET_ID, value);
  }

  public int getStockNumberFrom() {
    return this.stockNumberFrom;
  }

  public TTransactionDetail setStockNumberFrom(int stockNumberFrom) {
    this.stockNumberFrom = stockNumberFrom;
    setStockNumberFromIsSet(true);
    return this;
  }

  public void unsetStockNumberFrom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOCKNUMBERFROM_ISSET_ID);
  }

  /** Returns true if field stockNumberFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetStockNumberFrom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOCKNUMBERFROM_ISSET_ID);
  }

  public void setStockNumberFromIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOCKNUMBERFROM_ISSET_ID, value);
  }

  public int getStockNumberTo() {
    return this.stockNumberTo;
  }

  public TTransactionDetail setStockNumberTo(int stockNumberTo) {
    this.stockNumberTo = stockNumberTo;
    setStockNumberToIsSet(true);
    return this;
  }

  public void unsetStockNumberTo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOCKNUMBERTO_ISSET_ID);
  }

  /** Returns true if field stockNumberTo is set (has been assigned a value) and false otherwise */
  public boolean isSetStockNumberTo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOCKNUMBERTO_ISSET_ID);
  }

  public void setStockNumberToIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOCKNUMBERTO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_BOOK_ID:
      if (value == null) {
        unsetOrderBookId();
      } else {
        setOrderBookId((String)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Double)value);
      }
      break;

    case BUY_COUNT:
      if (value == null) {
        unsetBuyCount();
      } else {
        setBuyCount((Double)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case TAX:
      if (value == null) {
        unsetTax();
      } else {
        setTax((Double)value);
      }
      break;

    case TOTLE:
      if (value == null) {
        unsetTotle();
      } else {
        setTotle((Double)value);
      }
      break;

    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((Double)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Boolean)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Long)value);
      }
      break;

    case ORDER_STYLE:
      if (value == null) {
        unsetOrderStyle();
      } else {
        setOrderStyle((Integer)value);
      }
      break;

    case PROPORTION_FROM:
      if (value == null) {
        unsetProportionFrom();
      } else {
        setProportionFrom((Double)value);
      }
      break;

    case PROPORTION_TO:
      if (value == null) {
        unsetProportionTo();
      } else {
        setProportionTo((Double)value);
      }
      break;

    case STOCK_NUMBER_FROM:
      if (value == null) {
        unsetStockNumberFrom();
      } else {
        setStockNumberFrom((Integer)value);
      }
      break;

    case STOCK_NUMBER_TO:
      if (value == null) {
        unsetStockNumberTo();
      } else {
        setStockNumberTo((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_BOOK_ID:
      return getOrderBookId();

    case ORDER_TYPE:
      return getOrderType();

    case COUNT:
      return getCount();

    case BUY_COUNT:
      return getBuyCount();

    case PRICE:
      return getPrice();

    case TAX:
      return getTax();

    case TOTLE:
      return getTotle();

    case COMMISSION:
      return getCommission();

    case DATE:
      return getDate();

    case FLAG:
      return isFlag();

    case MESSAGE:
      return getMessage();

    case ORDER_ID:
      return getOrderId();

    case ORDER_STYLE:
      return getOrderStyle();

    case PROPORTION_FROM:
      return getProportionFrom();

    case PROPORTION_TO:
      return getProportionTo();

    case STOCK_NUMBER_FROM:
      return getStockNumberFrom();

    case STOCK_NUMBER_TO:
      return getStockNumberTo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_BOOK_ID:
      return isSetOrderBookId();
    case ORDER_TYPE:
      return isSetOrderType();
    case COUNT:
      return isSetCount();
    case BUY_COUNT:
      return isSetBuyCount();
    case PRICE:
      return isSetPrice();
    case TAX:
      return isSetTax();
    case TOTLE:
      return isSetTotle();
    case COMMISSION:
      return isSetCommission();
    case DATE:
      return isSetDate();
    case FLAG:
      return isSetFlag();
    case MESSAGE:
      return isSetMessage();
    case ORDER_ID:
      return isSetOrderId();
    case ORDER_STYLE:
      return isSetOrderStyle();
    case PROPORTION_FROM:
      return isSetProportionFrom();
    case PROPORTION_TO:
      return isSetProportionTo();
    case STOCK_NUMBER_FROM:
      return isSetStockNumberFrom();
    case STOCK_NUMBER_TO:
      return isSetStockNumberTo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTransactionDetail)
      return this.equals((TTransactionDetail)that);
    return false;
  }

  public boolean equals(TTransactionDetail that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_orderBookId = true && this.isSetOrderBookId();
    boolean that_present_orderBookId = true && that.isSetOrderBookId();
    if (this_present_orderBookId || that_present_orderBookId) {
      if (!(this_present_orderBookId && that_present_orderBookId))
        return false;
      if (!this.orderBookId.equals(that.orderBookId))
        return false;
    }

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_buyCount = true && this.isSetBuyCount();
    boolean that_present_buyCount = true && that.isSetBuyCount();
    if (this_present_buyCount || that_present_buyCount) {
      if (!(this_present_buyCount && that_present_buyCount))
        return false;
      if (this.buyCount != that.buyCount)
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_tax = true && this.isSetTax();
    boolean that_present_tax = true && that.isSetTax();
    if (this_present_tax || that_present_tax) {
      if (!(this_present_tax && that_present_tax))
        return false;
      if (this.tax != that.tax)
        return false;
    }

    boolean this_present_totle = true && this.isSetTotle();
    boolean that_present_totle = true && that.isSetTotle();
    if (this_present_totle || that_present_totle) {
      if (!(this_present_totle && that_present_totle))
        return false;
      if (this.totle != that.totle)
        return false;
    }

    boolean this_present_commission = true && this.isSetCommission();
    boolean that_present_commission = true && that.isSetCommission();
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (this.commission != that.commission)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_flag = true && this.isSetFlag();
    boolean that_present_flag = true && that.isSetFlag();
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_orderStyle = true && this.isSetOrderStyle();
    boolean that_present_orderStyle = true && that.isSetOrderStyle();
    if (this_present_orderStyle || that_present_orderStyle) {
      if (!(this_present_orderStyle && that_present_orderStyle))
        return false;
      if (this.orderStyle != that.orderStyle)
        return false;
    }

    boolean this_present_proportionFrom = true && this.isSetProportionFrom();
    boolean that_present_proportionFrom = true && that.isSetProportionFrom();
    if (this_present_proportionFrom || that_present_proportionFrom) {
      if (!(this_present_proportionFrom && that_present_proportionFrom))
        return false;
      if (this.proportionFrom != that.proportionFrom)
        return false;
    }

    boolean this_present_proportionTo = true && this.isSetProportionTo();
    boolean that_present_proportionTo = true && that.isSetProportionTo();
    if (this_present_proportionTo || that_present_proportionTo) {
      if (!(this_present_proportionTo && that_present_proportionTo))
        return false;
      if (this.proportionTo != that.proportionTo)
        return false;
    }

    boolean this_present_stockNumberFrom = true && this.isSetStockNumberFrom();
    boolean that_present_stockNumberFrom = true && that.isSetStockNumberFrom();
    if (this_present_stockNumberFrom || that_present_stockNumberFrom) {
      if (!(this_present_stockNumberFrom && that_present_stockNumberFrom))
        return false;
      if (this.stockNumberFrom != that.stockNumberFrom)
        return false;
    }

    boolean this_present_stockNumberTo = true && this.isSetStockNumberTo();
    boolean that_present_stockNumberTo = true && that.isSetStockNumberTo();
    if (this_present_stockNumberTo || that_present_stockNumberTo) {
      if (!(this_present_stockNumberTo && that_present_stockNumberTo))
        return false;
      if (this.stockNumberTo != that.stockNumberTo)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrderBookId()) ? 131071 : 524287);
    if (isSetOrderBookId())
      hashCode = hashCode * 8191 + orderBookId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrderType()) ? 131071 : 524287);
    if (isSetOrderType())
      hashCode = hashCode * 8191 + orderType.hashCode();

    hashCode = hashCode * 8191 + ((isSetCount()) ? 131071 : 524287);
    if (isSetCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(count);

    hashCode = hashCode * 8191 + ((isSetBuyCount()) ? 131071 : 524287);
    if (isSetBuyCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(buyCount);

    hashCode = hashCode * 8191 + ((isSetPrice()) ? 131071 : 524287);
    if (isSetPrice())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(price);

    hashCode = hashCode * 8191 + ((isSetTax()) ? 131071 : 524287);
    if (isSetTax())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tax);

    hashCode = hashCode * 8191 + ((isSetTotle()) ? 131071 : 524287);
    if (isSetTotle())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totle);

    hashCode = hashCode * 8191 + ((isSetCommission()) ? 131071 : 524287);
    if (isSetCommission())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commission);

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + ((isSetFlag()) ? 131071 : 524287);
    if (isSetFlag())
      hashCode = hashCode * 8191 + ((flag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrderId()) ? 131071 : 524287);
    if (isSetOrderId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(orderId);

    hashCode = hashCode * 8191 + ((isSetOrderStyle()) ? 131071 : 524287);
    if (isSetOrderStyle())
      hashCode = hashCode * 8191 + orderStyle;

    hashCode = hashCode * 8191 + ((isSetProportionFrom()) ? 131071 : 524287);
    if (isSetProportionFrom())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(proportionFrom);

    hashCode = hashCode * 8191 + ((isSetProportionTo()) ? 131071 : 524287);
    if (isSetProportionTo())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(proportionTo);

    hashCode = hashCode * 8191 + ((isSetStockNumberFrom()) ? 131071 : 524287);
    if (isSetStockNumberFrom())
      hashCode = hashCode * 8191 + stockNumberFrom;

    hashCode = hashCode * 8191 + ((isSetStockNumberTo()) ? 131071 : 524287);
    if (isSetStockNumberTo())
      hashCode = hashCode * 8191 + stockNumberTo;

    return hashCode;
  }

  @Override
  public int compareTo(TTransactionDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderBookId()).compareTo(other.isSetOrderBookId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderBookId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderBookId, other.orderBookId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyCount()).compareTo(other.isSetBuyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyCount, other.buyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTax()).compareTo(other.isSetTax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tax, other.tax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotle()).compareTo(other.isSetTotle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totle, other.totle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(other.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, other.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStyle()).compareTo(other.isSetOrderStyle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStyle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStyle, other.orderStyle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProportionFrom()).compareTo(other.isSetProportionFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProportionFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proportionFrom, other.proportionFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProportionTo()).compareTo(other.isSetProportionTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProportionTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proportionTo, other.proportionTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStockNumberFrom()).compareTo(other.isSetStockNumberFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStockNumberFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockNumberFrom, other.stockNumberFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStockNumberTo()).compareTo(other.isSetStockNumberTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStockNumberTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockNumberTo, other.stockNumberTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTransactionDetail(");
    boolean first = true;

    if (isSetOrderBookId()) {
      sb.append("orderBookId:");
      if (this.orderBookId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderBookId);
      }
      first = false;
    }
    if (isSetOrderType()) {
      if (!first) sb.append(", ");
      sb.append("orderType:");
      if (this.orderType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderType);
      }
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetBuyCount()) {
      if (!first) sb.append(", ");
      sb.append("buyCount:");
      sb.append(this.buyCount);
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetTax()) {
      if (!first) sb.append(", ");
      sb.append("tax:");
      sb.append(this.tax);
      first = false;
    }
    if (isSetTotle()) {
      if (!first) sb.append(", ");
      sb.append("totle:");
      sb.append(this.totle);
      first = false;
    }
    if (isSetCommission()) {
      if (!first) sb.append(", ");
      sb.append("commission:");
      sb.append(this.commission);
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetFlag()) {
      if (!first) sb.append(", ");
      sb.append("flag:");
      sb.append(this.flag);
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetOrderId()) {
      if (!first) sb.append(", ");
      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
    }
    if (isSetOrderStyle()) {
      if (!first) sb.append(", ");
      sb.append("orderStyle:");
      sb.append(this.orderStyle);
      first = false;
    }
    if (isSetProportionFrom()) {
      if (!first) sb.append(", ");
      sb.append("proportionFrom:");
      sb.append(this.proportionFrom);
      first = false;
    }
    if (isSetProportionTo()) {
      if (!first) sb.append(", ");
      sb.append("proportionTo:");
      sb.append(this.proportionTo);
      first = false;
    }
    if (isSetStockNumberFrom()) {
      if (!first) sb.append(", ");
      sb.append("stockNumberFrom:");
      sb.append(this.stockNumberFrom);
      first = false;
    }
    if (isSetStockNumberTo()) {
      if (!first) sb.append(", ");
      sb.append("stockNumberTo:");
      sb.append(this.stockNumberTo);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTransactionDetailStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTransactionDetailStandardScheme getScheme() {
      return new TTransactionDetailStandardScheme();
    }
  }

  private static class TTransactionDetailStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTransactionDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTransactionDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_BOOK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderBookId = iprot.readString();
              struct.setOrderBookIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderType = iprot.readString();
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.count = iprot.readDouble();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.buyCount = iprot.readDouble();
              struct.setBuyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tax = iprot.readDouble();
              struct.setTaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totle = iprot.readDouble();
              struct.setTotleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commission = iprot.readDouble();
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.flag = iprot.readBool();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderId = iprot.readI64();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ORDER_STYLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderStyle = iprot.readI32();
              struct.setOrderStyleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PROPORTION_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.proportionFrom = iprot.readDouble();
              struct.setProportionFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PROPORTION_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.proportionTo = iprot.readDouble();
              struct.setProportionToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STOCK_NUMBER_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stockNumberFrom = iprot.readI32();
              struct.setStockNumberFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STOCK_NUMBER_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stockNumberTo = iprot.readI32();
              struct.setStockNumberToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTransactionDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderBookId != null) {
        if (struct.isSetOrderBookId()) {
          oprot.writeFieldBegin(ORDER_BOOK_ID_FIELD_DESC);
          oprot.writeString(struct.orderBookId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderType != null) {
        if (struct.isSetOrderType()) {
          oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
          oprot.writeString(struct.orderType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeDouble(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBuyCount()) {
        oprot.writeFieldBegin(BUY_COUNT_FIELD_DESC);
        oprot.writeDouble(struct.buyCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTax()) {
        oprot.writeFieldBegin(TAX_FIELD_DESC);
        oprot.writeDouble(struct.tax);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotle()) {
        oprot.writeFieldBegin(TOTLE_FIELD_DESC);
        oprot.writeDouble(struct.totle);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommission()) {
        oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.commission);
        oprot.writeFieldEnd();
      }
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFlag()) {
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeBool(struct.flag);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderId()) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderStyle()) {
        oprot.writeFieldBegin(ORDER_STYLE_FIELD_DESC);
        oprot.writeI32(struct.orderStyle);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProportionFrom()) {
        oprot.writeFieldBegin(PROPORTION_FROM_FIELD_DESC);
        oprot.writeDouble(struct.proportionFrom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProportionTo()) {
        oprot.writeFieldBegin(PROPORTION_TO_FIELD_DESC);
        oprot.writeDouble(struct.proportionTo);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStockNumberFrom()) {
        oprot.writeFieldBegin(STOCK_NUMBER_FROM_FIELD_DESC);
        oprot.writeI32(struct.stockNumberFrom);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStockNumberTo()) {
        oprot.writeFieldBegin(STOCK_NUMBER_TO_FIELD_DESC);
        oprot.writeI32(struct.stockNumberTo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTransactionDetailTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTransactionDetailTupleScheme getScheme() {
      return new TTransactionDetailTupleScheme();
    }
  }

  private static class TTransactionDetailTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTransactionDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTransactionDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrderBookId()) {
        optionals.set(0);
      }
      if (struct.isSetOrderType()) {
        optionals.set(1);
      }
      if (struct.isSetCount()) {
        optionals.set(2);
      }
      if (struct.isSetBuyCount()) {
        optionals.set(3);
      }
      if (struct.isSetPrice()) {
        optionals.set(4);
      }
      if (struct.isSetTax()) {
        optionals.set(5);
      }
      if (struct.isSetTotle()) {
        optionals.set(6);
      }
      if (struct.isSetCommission()) {
        optionals.set(7);
      }
      if (struct.isSetDate()) {
        optionals.set(8);
      }
      if (struct.isSetFlag()) {
        optionals.set(9);
      }
      if (struct.isSetMessage()) {
        optionals.set(10);
      }
      if (struct.isSetOrderId()) {
        optionals.set(11);
      }
      if (struct.isSetOrderStyle()) {
        optionals.set(12);
      }
      if (struct.isSetProportionFrom()) {
        optionals.set(13);
      }
      if (struct.isSetProportionTo()) {
        optionals.set(14);
      }
      if (struct.isSetStockNumberFrom()) {
        optionals.set(15);
      }
      if (struct.isSetStockNumberTo()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetOrderBookId()) {
        oprot.writeString(struct.orderBookId);
      }
      if (struct.isSetOrderType()) {
        oprot.writeString(struct.orderType);
      }
      if (struct.isSetCount()) {
        oprot.writeDouble(struct.count);
      }
      if (struct.isSetBuyCount()) {
        oprot.writeDouble(struct.buyCount);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetTax()) {
        oprot.writeDouble(struct.tax);
      }
      if (struct.isSetTotle()) {
        oprot.writeDouble(struct.totle);
      }
      if (struct.isSetCommission()) {
        oprot.writeDouble(struct.commission);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetFlag()) {
        oprot.writeBool(struct.flag);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetOrderId()) {
        oprot.writeI64(struct.orderId);
      }
      if (struct.isSetOrderStyle()) {
        oprot.writeI32(struct.orderStyle);
      }
      if (struct.isSetProportionFrom()) {
        oprot.writeDouble(struct.proportionFrom);
      }
      if (struct.isSetProportionTo()) {
        oprot.writeDouble(struct.proportionTo);
      }
      if (struct.isSetStockNumberFrom()) {
        oprot.writeI32(struct.stockNumberFrom);
      }
      if (struct.isSetStockNumberTo()) {
        oprot.writeI32(struct.stockNumberTo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTransactionDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.orderBookId = iprot.readString();
        struct.setOrderBookIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderType = iprot.readString();
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.count = iprot.readDouble();
        struct.setCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.buyCount = iprot.readDouble();
        struct.setBuyCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tax = iprot.readDouble();
        struct.setTaxIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totle = iprot.readDouble();
        struct.setTotleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.commission = iprot.readDouble();
        struct.setCommissionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.flag = iprot.readBool();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(10)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.orderId = iprot.readI64();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.orderStyle = iprot.readI32();
        struct.setOrderStyleIsSet(true);
      }
      if (incoming.get(13)) {
        struct.proportionFrom = iprot.readDouble();
        struct.setProportionFromIsSet(true);
      }
      if (incoming.get(14)) {
        struct.proportionTo = iprot.readDouble();
        struct.setProportionToIsSet(true);
      }
      if (incoming.get(15)) {
        struct.stockNumberFrom = iprot.readI32();
        struct.setStockNumberFromIsSet(true);
      }
      if (incoming.get(16)) {
        struct.stockNumberTo = iprot.readI32();
        struct.setStockNumberToIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

