/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jd.quant.core.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-21")
public class TQuantSummary implements org.apache.thrift.TBase<TQuantSummary, TQuantSummary._Fields>, java.io.Serializable, Cloneable, Comparable<TQuantSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQuantSummary");

  private static final org.apache.thrift.protocol.TField CUMULATIVE_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("cumulativePercent", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField ALPHA_FIELD_DESC = new org.apache.thrift.protocol.TField("alpha", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField BETA_FIELD_DESC = new org.apache.thrift.protocol.TField("beta", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField SHARPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sharpe", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SORTINO_FIELD_DESC = new org.apache.thrift.protocol.TField("sortino", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField INFORMATION_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("InformationRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField VOLATILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("volatility", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField FALL_FIELD_DESC = new org.apache.thrift.protocol.TField("fall", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField TRACKING_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("trackingError", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField DOWNSIDE_RISK_FIELD_DESC = new org.apache.thrift.protocol.TField("downsideRisk", org.apache.thrift.protocol.TType.DOUBLE, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TQuantSummaryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TQuantSummaryTupleSchemeFactory();

  public double cumulativePercent; // optional
  public double alpha; // optional
  public double beta; // optional
  public double sharpe; // optional
  public double sortino; // optional
  public double InformationRatio; // optional
  public double volatility; // optional
  public double fall; // optional
  public double trackingError; // optional
  public double downsideRisk; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CUMULATIVE_PERCENT((short)1, "cumulativePercent"),
    ALPHA((short)2, "alpha"),
    BETA((short)3, "beta"),
    SHARPE((short)4, "sharpe"),
    SORTINO((short)5, "sortino"),
    INFORMATION_RATIO((short)6, "InformationRatio"),
    VOLATILITY((short)7, "volatility"),
    FALL((short)8, "fall"),
    TRACKING_ERROR((short)9, "trackingError"),
    DOWNSIDE_RISK((short)10, "downsideRisk");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUMULATIVE_PERCENT
          return CUMULATIVE_PERCENT;
        case 2: // ALPHA
          return ALPHA;
        case 3: // BETA
          return BETA;
        case 4: // SHARPE
          return SHARPE;
        case 5: // SORTINO
          return SORTINO;
        case 6: // INFORMATION_RATIO
          return INFORMATION_RATIO;
        case 7: // VOLATILITY
          return VOLATILITY;
        case 8: // FALL
          return FALL;
        case 9: // TRACKING_ERROR
          return TRACKING_ERROR;
        case 10: // DOWNSIDE_RISK
          return DOWNSIDE_RISK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CUMULATIVEPERCENT_ISSET_ID = 0;
  private static final int __ALPHA_ISSET_ID = 1;
  private static final int __BETA_ISSET_ID = 2;
  private static final int __SHARPE_ISSET_ID = 3;
  private static final int __SORTINO_ISSET_ID = 4;
  private static final int __INFORMATIONRATIO_ISSET_ID = 5;
  private static final int __VOLATILITY_ISSET_ID = 6;
  private static final int __FALL_ISSET_ID = 7;
  private static final int __TRACKINGERROR_ISSET_ID = 8;
  private static final int __DOWNSIDERISK_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CUMULATIVE_PERCENT,_Fields.ALPHA,_Fields.BETA,_Fields.SHARPE,_Fields.SORTINO,_Fields.INFORMATION_RATIO,_Fields.VOLATILITY,_Fields.FALL,_Fields.TRACKING_ERROR,_Fields.DOWNSIDE_RISK};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUMULATIVE_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("cumulativePercent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ALPHA, new org.apache.thrift.meta_data.FieldMetaData("alpha", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BETA, new org.apache.thrift.meta_data.FieldMetaData("beta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHARPE, new org.apache.thrift.meta_data.FieldMetaData("sharpe", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SORTINO, new org.apache.thrift.meta_data.FieldMetaData("sortino", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INFORMATION_RATIO, new org.apache.thrift.meta_data.FieldMetaData("InformationRatio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOLATILITY, new org.apache.thrift.meta_data.FieldMetaData("volatility", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FALL, new org.apache.thrift.meta_data.FieldMetaData("fall", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRACKING_ERROR, new org.apache.thrift.meta_data.FieldMetaData("trackingError", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DOWNSIDE_RISK, new org.apache.thrift.meta_data.FieldMetaData("downsideRisk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQuantSummary.class, metaDataMap);
  }

  public TQuantSummary() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQuantSummary(TQuantSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cumulativePercent = other.cumulativePercent;
    this.alpha = other.alpha;
    this.beta = other.beta;
    this.sharpe = other.sharpe;
    this.sortino = other.sortino;
    this.InformationRatio = other.InformationRatio;
    this.volatility = other.volatility;
    this.fall = other.fall;
    this.trackingError = other.trackingError;
    this.downsideRisk = other.downsideRisk;
  }

  public TQuantSummary deepCopy() {
    return new TQuantSummary(this);
  }

  @Override
  public void clear() {
    setCumulativePercentIsSet(false);
    this.cumulativePercent = 0.0;
    setAlphaIsSet(false);
    this.alpha = 0.0;
    setBetaIsSet(false);
    this.beta = 0.0;
    setSharpeIsSet(false);
    this.sharpe = 0.0;
    setSortinoIsSet(false);
    this.sortino = 0.0;
    setInformationRatioIsSet(false);
    this.InformationRatio = 0.0;
    setVolatilityIsSet(false);
    this.volatility = 0.0;
    setFallIsSet(false);
    this.fall = 0.0;
    setTrackingErrorIsSet(false);
    this.trackingError = 0.0;
    setDownsideRiskIsSet(false);
    this.downsideRisk = 0.0;
  }

  public double getCumulativePercent() {
    return this.cumulativePercent;
  }

  public TQuantSummary setCumulativePercent(double cumulativePercent) {
    this.cumulativePercent = cumulativePercent;
    setCumulativePercentIsSet(true);
    return this;
  }

  public void unsetCumulativePercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CUMULATIVEPERCENT_ISSET_ID);
  }

  /** Returns true if field cumulativePercent is set (has been assigned a value) and false otherwise */
  public boolean isSetCumulativePercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CUMULATIVEPERCENT_ISSET_ID);
  }

  public void setCumulativePercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CUMULATIVEPERCENT_ISSET_ID, value);
  }

  public double getAlpha() {
    return this.alpha;
  }

  public TQuantSummary setAlpha(double alpha) {
    this.alpha = alpha;
    setAlphaIsSet(true);
    return this;
  }

  public void unsetAlpha() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALPHA_ISSET_ID);
  }

  /** Returns true if field alpha is set (has been assigned a value) and false otherwise */
  public boolean isSetAlpha() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALPHA_ISSET_ID);
  }

  public void setAlphaIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALPHA_ISSET_ID, value);
  }

  public double getBeta() {
    return this.beta;
  }

  public TQuantSummary setBeta(double beta) {
    this.beta = beta;
    setBetaIsSet(true);
    return this;
  }

  public void unsetBeta() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BETA_ISSET_ID);
  }

  /** Returns true if field beta is set (has been assigned a value) and false otherwise */
  public boolean isSetBeta() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BETA_ISSET_ID);
  }

  public void setBetaIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BETA_ISSET_ID, value);
  }

  public double getSharpe() {
    return this.sharpe;
  }

  public TQuantSummary setSharpe(double sharpe) {
    this.sharpe = sharpe;
    setSharpeIsSet(true);
    return this;
  }

  public void unsetSharpe() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARPE_ISSET_ID);
  }

  /** Returns true if field sharpe is set (has been assigned a value) and false otherwise */
  public boolean isSetSharpe() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARPE_ISSET_ID);
  }

  public void setSharpeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARPE_ISSET_ID, value);
  }

  public double getSortino() {
    return this.sortino;
  }

  public TQuantSummary setSortino(double sortino) {
    this.sortino = sortino;
    setSortinoIsSet(true);
    return this;
  }

  public void unsetSortino() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SORTINO_ISSET_ID);
  }

  /** Returns true if field sortino is set (has been assigned a value) and false otherwise */
  public boolean isSetSortino() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SORTINO_ISSET_ID);
  }

  public void setSortinoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SORTINO_ISSET_ID, value);
  }

  public double getInformationRatio() {
    return this.InformationRatio;
  }

  public TQuantSummary setInformationRatio(double InformationRatio) {
    this.InformationRatio = InformationRatio;
    setInformationRatioIsSet(true);
    return this;
  }

  public void unsetInformationRatio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INFORMATIONRATIO_ISSET_ID);
  }

  /** Returns true if field InformationRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetInformationRatio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INFORMATIONRATIO_ISSET_ID);
  }

  public void setInformationRatioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INFORMATIONRATIO_ISSET_ID, value);
  }

  public double getVolatility() {
    return this.volatility;
  }

  public TQuantSummary setVolatility(double volatility) {
    this.volatility = volatility;
    setVolatilityIsSet(true);
    return this;
  }

  public void unsetVolatility() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VOLATILITY_ISSET_ID);
  }

  /** Returns true if field volatility is set (has been assigned a value) and false otherwise */
  public boolean isSetVolatility() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VOLATILITY_ISSET_ID);
  }

  public void setVolatilityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VOLATILITY_ISSET_ID, value);
  }

  public double getFall() {
    return this.fall;
  }

  public TQuantSummary setFall(double fall) {
    this.fall = fall;
    setFallIsSet(true);
    return this;
  }

  public void unsetFall() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FALL_ISSET_ID);
  }

  /** Returns true if field fall is set (has been assigned a value) and false otherwise */
  public boolean isSetFall() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FALL_ISSET_ID);
  }

  public void setFallIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FALL_ISSET_ID, value);
  }

  public double getTrackingError() {
    return this.trackingError;
  }

  public TQuantSummary setTrackingError(double trackingError) {
    this.trackingError = trackingError;
    setTrackingErrorIsSet(true);
    return this;
  }

  public void unsetTrackingError() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRACKINGERROR_ISSET_ID);
  }

  /** Returns true if field trackingError is set (has been assigned a value) and false otherwise */
  public boolean isSetTrackingError() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRACKINGERROR_ISSET_ID);
  }

  public void setTrackingErrorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRACKINGERROR_ISSET_ID, value);
  }

  public double getDownsideRisk() {
    return this.downsideRisk;
  }

  public TQuantSummary setDownsideRisk(double downsideRisk) {
    this.downsideRisk = downsideRisk;
    setDownsideRiskIsSet(true);
    return this;
  }

  public void unsetDownsideRisk() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOWNSIDERISK_ISSET_ID);
  }

  /** Returns true if field downsideRisk is set (has been assigned a value) and false otherwise */
  public boolean isSetDownsideRisk() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOWNSIDERISK_ISSET_ID);
  }

  public void setDownsideRiskIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOWNSIDERISK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CUMULATIVE_PERCENT:
      if (value == null) {
        unsetCumulativePercent();
      } else {
        setCumulativePercent((Double)value);
      }
      break;

    case ALPHA:
      if (value == null) {
        unsetAlpha();
      } else {
        setAlpha((Double)value);
      }
      break;

    case BETA:
      if (value == null) {
        unsetBeta();
      } else {
        setBeta((Double)value);
      }
      break;

    case SHARPE:
      if (value == null) {
        unsetSharpe();
      } else {
        setSharpe((Double)value);
      }
      break;

    case SORTINO:
      if (value == null) {
        unsetSortino();
      } else {
        setSortino((Double)value);
      }
      break;

    case INFORMATION_RATIO:
      if (value == null) {
        unsetInformationRatio();
      } else {
        setInformationRatio((Double)value);
      }
      break;

    case VOLATILITY:
      if (value == null) {
        unsetVolatility();
      } else {
        setVolatility((Double)value);
      }
      break;

    case FALL:
      if (value == null) {
        unsetFall();
      } else {
        setFall((Double)value);
      }
      break;

    case TRACKING_ERROR:
      if (value == null) {
        unsetTrackingError();
      } else {
        setTrackingError((Double)value);
      }
      break;

    case DOWNSIDE_RISK:
      if (value == null) {
        unsetDownsideRisk();
      } else {
        setDownsideRisk((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CUMULATIVE_PERCENT:
      return getCumulativePercent();

    case ALPHA:
      return getAlpha();

    case BETA:
      return getBeta();

    case SHARPE:
      return getSharpe();

    case SORTINO:
      return getSortino();

    case INFORMATION_RATIO:
      return getInformationRatio();

    case VOLATILITY:
      return getVolatility();

    case FALL:
      return getFall();

    case TRACKING_ERROR:
      return getTrackingError();

    case DOWNSIDE_RISK:
      return getDownsideRisk();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CUMULATIVE_PERCENT:
      return isSetCumulativePercent();
    case ALPHA:
      return isSetAlpha();
    case BETA:
      return isSetBeta();
    case SHARPE:
      return isSetSharpe();
    case SORTINO:
      return isSetSortino();
    case INFORMATION_RATIO:
      return isSetInformationRatio();
    case VOLATILITY:
      return isSetVolatility();
    case FALL:
      return isSetFall();
    case TRACKING_ERROR:
      return isSetTrackingError();
    case DOWNSIDE_RISK:
      return isSetDownsideRisk();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQuantSummary)
      return this.equals((TQuantSummary)that);
    return false;
  }

  public boolean equals(TQuantSummary that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cumulativePercent = true && this.isSetCumulativePercent();
    boolean that_present_cumulativePercent = true && that.isSetCumulativePercent();
    if (this_present_cumulativePercent || that_present_cumulativePercent) {
      if (!(this_present_cumulativePercent && that_present_cumulativePercent))
        return false;
      if (this.cumulativePercent != that.cumulativePercent)
        return false;
    }

    boolean this_present_alpha = true && this.isSetAlpha();
    boolean that_present_alpha = true && that.isSetAlpha();
    if (this_present_alpha || that_present_alpha) {
      if (!(this_present_alpha && that_present_alpha))
        return false;
      if (this.alpha != that.alpha)
        return false;
    }

    boolean this_present_beta = true && this.isSetBeta();
    boolean that_present_beta = true && that.isSetBeta();
    if (this_present_beta || that_present_beta) {
      if (!(this_present_beta && that_present_beta))
        return false;
      if (this.beta != that.beta)
        return false;
    }

    boolean this_present_sharpe = true && this.isSetSharpe();
    boolean that_present_sharpe = true && that.isSetSharpe();
    if (this_present_sharpe || that_present_sharpe) {
      if (!(this_present_sharpe && that_present_sharpe))
        return false;
      if (this.sharpe != that.sharpe)
        return false;
    }

    boolean this_present_sortino = true && this.isSetSortino();
    boolean that_present_sortino = true && that.isSetSortino();
    if (this_present_sortino || that_present_sortino) {
      if (!(this_present_sortino && that_present_sortino))
        return false;
      if (this.sortino != that.sortino)
        return false;
    }

    boolean this_present_InformationRatio = true && this.isSetInformationRatio();
    boolean that_present_InformationRatio = true && that.isSetInformationRatio();
    if (this_present_InformationRatio || that_present_InformationRatio) {
      if (!(this_present_InformationRatio && that_present_InformationRatio))
        return false;
      if (this.InformationRatio != that.InformationRatio)
        return false;
    }

    boolean this_present_volatility = true && this.isSetVolatility();
    boolean that_present_volatility = true && that.isSetVolatility();
    if (this_present_volatility || that_present_volatility) {
      if (!(this_present_volatility && that_present_volatility))
        return false;
      if (this.volatility != that.volatility)
        return false;
    }

    boolean this_present_fall = true && this.isSetFall();
    boolean that_present_fall = true && that.isSetFall();
    if (this_present_fall || that_present_fall) {
      if (!(this_present_fall && that_present_fall))
        return false;
      if (this.fall != that.fall)
        return false;
    }

    boolean this_present_trackingError = true && this.isSetTrackingError();
    boolean that_present_trackingError = true && that.isSetTrackingError();
    if (this_present_trackingError || that_present_trackingError) {
      if (!(this_present_trackingError && that_present_trackingError))
        return false;
      if (this.trackingError != that.trackingError)
        return false;
    }

    boolean this_present_downsideRisk = true && this.isSetDownsideRisk();
    boolean that_present_downsideRisk = true && that.isSetDownsideRisk();
    if (this_present_downsideRisk || that_present_downsideRisk) {
      if (!(this_present_downsideRisk && that_present_downsideRisk))
        return false;
      if (this.downsideRisk != that.downsideRisk)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCumulativePercent()) ? 131071 : 524287);
    if (isSetCumulativePercent())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cumulativePercent);

    hashCode = hashCode * 8191 + ((isSetAlpha()) ? 131071 : 524287);
    if (isSetAlpha())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(alpha);

    hashCode = hashCode * 8191 + ((isSetBeta()) ? 131071 : 524287);
    if (isSetBeta())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(beta);

    hashCode = hashCode * 8191 + ((isSetSharpe()) ? 131071 : 524287);
    if (isSetSharpe())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sharpe);

    hashCode = hashCode * 8191 + ((isSetSortino()) ? 131071 : 524287);
    if (isSetSortino())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sortino);

    hashCode = hashCode * 8191 + ((isSetInformationRatio()) ? 131071 : 524287);
    if (isSetInformationRatio())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(InformationRatio);

    hashCode = hashCode * 8191 + ((isSetVolatility()) ? 131071 : 524287);
    if (isSetVolatility())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(volatility);

    hashCode = hashCode * 8191 + ((isSetFall()) ? 131071 : 524287);
    if (isSetFall())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fall);

    hashCode = hashCode * 8191 + ((isSetTrackingError()) ? 131071 : 524287);
    if (isSetTrackingError())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(trackingError);

    hashCode = hashCode * 8191 + ((isSetDownsideRisk()) ? 131071 : 524287);
    if (isSetDownsideRisk())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(downsideRisk);

    return hashCode;
  }

  @Override
  public int compareTo(TQuantSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCumulativePercent()).compareTo(other.isSetCumulativePercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCumulativePercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cumulativePercent, other.cumulativePercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlpha()).compareTo(other.isSetAlpha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlpha()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alpha, other.alpha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeta()).compareTo(other.isSetBeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beta, other.beta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSharpe()).compareTo(other.isSetSharpe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSharpe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sharpe, other.sharpe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortino()).compareTo(other.isSetSortino());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortino()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortino, other.sortino);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInformationRatio()).compareTo(other.isSetInformationRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInformationRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.InformationRatio, other.InformationRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolatility()).compareTo(other.isSetVolatility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolatility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volatility, other.volatility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFall()).compareTo(other.isSetFall());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFall()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fall, other.fall);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrackingError()).compareTo(other.isSetTrackingError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrackingError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trackingError, other.trackingError);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownsideRisk()).compareTo(other.isSetDownsideRisk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownsideRisk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downsideRisk, other.downsideRisk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQuantSummary(");
    boolean first = true;

    if (isSetCumulativePercent()) {
      sb.append("cumulativePercent:");
      sb.append(this.cumulativePercent);
      first = false;
    }
    if (isSetAlpha()) {
      if (!first) sb.append(", ");
      sb.append("alpha:");
      sb.append(this.alpha);
      first = false;
    }
    if (isSetBeta()) {
      if (!first) sb.append(", ");
      sb.append("beta:");
      sb.append(this.beta);
      first = false;
    }
    if (isSetSharpe()) {
      if (!first) sb.append(", ");
      sb.append("sharpe:");
      sb.append(this.sharpe);
      first = false;
    }
    if (isSetSortino()) {
      if (!first) sb.append(", ");
      sb.append("sortino:");
      sb.append(this.sortino);
      first = false;
    }
    if (isSetInformationRatio()) {
      if (!first) sb.append(", ");
      sb.append("InformationRatio:");
      sb.append(this.InformationRatio);
      first = false;
    }
    if (isSetVolatility()) {
      if (!first) sb.append(", ");
      sb.append("volatility:");
      sb.append(this.volatility);
      first = false;
    }
    if (isSetFall()) {
      if (!first) sb.append(", ");
      sb.append("fall:");
      sb.append(this.fall);
      first = false;
    }
    if (isSetTrackingError()) {
      if (!first) sb.append(", ");
      sb.append("trackingError:");
      sb.append(this.trackingError);
      first = false;
    }
    if (isSetDownsideRisk()) {
      if (!first) sb.append(", ");
      sb.append("downsideRisk:");
      sb.append(this.downsideRisk);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQuantSummaryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQuantSummaryStandardScheme getScheme() {
      return new TQuantSummaryStandardScheme();
    }
  }

  private static class TQuantSummaryStandardScheme extends org.apache.thrift.scheme.StandardScheme<TQuantSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQuantSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CUMULATIVE_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cumulativePercent = iprot.readDouble();
              struct.setCumulativePercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALPHA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.alpha = iprot.readDouble();
              struct.setAlphaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BETA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.beta = iprot.readDouble();
              struct.setBetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHARPE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sharpe = iprot.readDouble();
              struct.setSharpeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SORTINO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sortino = iprot.readDouble();
              struct.setSortinoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INFORMATION_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.InformationRatio = iprot.readDouble();
              struct.setInformationRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VOLATILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.volatility = iprot.readDouble();
              struct.setVolatilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FALL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fall = iprot.readDouble();
              struct.setFallIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRACKING_ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.trackingError = iprot.readDouble();
              struct.setTrackingErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DOWNSIDE_RISK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.downsideRisk = iprot.readDouble();
              struct.setDownsideRiskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQuantSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCumulativePercent()) {
        oprot.writeFieldBegin(CUMULATIVE_PERCENT_FIELD_DESC);
        oprot.writeDouble(struct.cumulativePercent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAlpha()) {
        oprot.writeFieldBegin(ALPHA_FIELD_DESC);
        oprot.writeDouble(struct.alpha);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBeta()) {
        oprot.writeFieldBegin(BETA_FIELD_DESC);
        oprot.writeDouble(struct.beta);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSharpe()) {
        oprot.writeFieldBegin(SHARPE_FIELD_DESC);
        oprot.writeDouble(struct.sharpe);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSortino()) {
        oprot.writeFieldBegin(SORTINO_FIELD_DESC);
        oprot.writeDouble(struct.sortino);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInformationRatio()) {
        oprot.writeFieldBegin(INFORMATION_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.InformationRatio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVolatility()) {
        oprot.writeFieldBegin(VOLATILITY_FIELD_DESC);
        oprot.writeDouble(struct.volatility);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFall()) {
        oprot.writeFieldBegin(FALL_FIELD_DESC);
        oprot.writeDouble(struct.fall);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTrackingError()) {
        oprot.writeFieldBegin(TRACKING_ERROR_FIELD_DESC);
        oprot.writeDouble(struct.trackingError);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDownsideRisk()) {
        oprot.writeFieldBegin(DOWNSIDE_RISK_FIELD_DESC);
        oprot.writeDouble(struct.downsideRisk);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQuantSummaryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQuantSummaryTupleScheme getScheme() {
      return new TQuantSummaryTupleScheme();
    }
  }

  private static class TQuantSummaryTupleScheme extends org.apache.thrift.scheme.TupleScheme<TQuantSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQuantSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCumulativePercent()) {
        optionals.set(0);
      }
      if (struct.isSetAlpha()) {
        optionals.set(1);
      }
      if (struct.isSetBeta()) {
        optionals.set(2);
      }
      if (struct.isSetSharpe()) {
        optionals.set(3);
      }
      if (struct.isSetSortino()) {
        optionals.set(4);
      }
      if (struct.isSetInformationRatio()) {
        optionals.set(5);
      }
      if (struct.isSetVolatility()) {
        optionals.set(6);
      }
      if (struct.isSetFall()) {
        optionals.set(7);
      }
      if (struct.isSetTrackingError()) {
        optionals.set(8);
      }
      if (struct.isSetDownsideRisk()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetCumulativePercent()) {
        oprot.writeDouble(struct.cumulativePercent);
      }
      if (struct.isSetAlpha()) {
        oprot.writeDouble(struct.alpha);
      }
      if (struct.isSetBeta()) {
        oprot.writeDouble(struct.beta);
      }
      if (struct.isSetSharpe()) {
        oprot.writeDouble(struct.sharpe);
      }
      if (struct.isSetSortino()) {
        oprot.writeDouble(struct.sortino);
      }
      if (struct.isSetInformationRatio()) {
        oprot.writeDouble(struct.InformationRatio);
      }
      if (struct.isSetVolatility()) {
        oprot.writeDouble(struct.volatility);
      }
      if (struct.isSetFall()) {
        oprot.writeDouble(struct.fall);
      }
      if (struct.isSetTrackingError()) {
        oprot.writeDouble(struct.trackingError);
      }
      if (struct.isSetDownsideRisk()) {
        oprot.writeDouble(struct.downsideRisk);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQuantSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.cumulativePercent = iprot.readDouble();
        struct.setCumulativePercentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.alpha = iprot.readDouble();
        struct.setAlphaIsSet(true);
      }
      if (incoming.get(2)) {
        struct.beta = iprot.readDouble();
        struct.setBetaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sharpe = iprot.readDouble();
        struct.setSharpeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sortino = iprot.readDouble();
        struct.setSortinoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.InformationRatio = iprot.readDouble();
        struct.setInformationRatioIsSet(true);
      }
      if (incoming.get(6)) {
        struct.volatility = iprot.readDouble();
        struct.setVolatilityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fall = iprot.readDouble();
        struct.setFallIsSet(true);
      }
      if (incoming.get(8)) {
        struct.trackingError = iprot.readDouble();
        struct.setTrackingErrorIsSet(true);
      }
      if (incoming.get(9)) {
        struct.downsideRisk = iprot.readDouble();
        struct.setDownsideRiskIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

