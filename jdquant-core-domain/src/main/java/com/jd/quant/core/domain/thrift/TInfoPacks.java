/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jd.quant.core.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 总持仓对象
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-21")
public class TInfoPacks implements org.apache.thrift.TBase<TInfoPacks, TInfoPacks._Fields>, java.io.Serializable, Cloneable, Comparable<TInfoPacks> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TInfoPacks");

  private static final org.apache.thrift.protocol.TField PORTFOLIO_FIELD_DESC = new org.apache.thrift.protocol.TField("portfolio", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField POSITION_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("position_map", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField TRANSACTION_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction_details", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TRANSACTION_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction_param", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField IS_RUNNING_FIELD_DESC = new org.apache.thrift.protocol.TField("isRunning", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField QUANT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("quant_summary", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField RISK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("risk_list", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TInfoPacksStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TInfoPacksTupleSchemeFactory();

  public TPortfolio portfolio; // optional
  public java.util.Map<String,TPosition> position_map; // optional
  public java.util.List<TTransactionDetail> transaction_details; // optional
  public TTransactionParam transaction_param; // optional
  public boolean isRunning; // optional
  public TQuantSummary quant_summary; // optional
  public java.util.List<TRiskResult> risk_list; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PORTFOLIO((short)1, "portfolio"),
    POSITION_MAP((short)2, "position_map"),
    TRANSACTION_DETAILS((short)3, "transaction_details"),
    TRANSACTION_PARAM((short)4, "transaction_param"),
    IS_RUNNING((short)5, "isRunning"),
    QUANT_SUMMARY((short)6, "quant_summary"),
    RISK_LIST((short)7, "risk_list");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PORTFOLIO
          return PORTFOLIO;
        case 2: // POSITION_MAP
          return POSITION_MAP;
        case 3: // TRANSACTION_DETAILS
          return TRANSACTION_DETAILS;
        case 4: // TRANSACTION_PARAM
          return TRANSACTION_PARAM;
        case 5: // IS_RUNNING
          return IS_RUNNING;
        case 6: // QUANT_SUMMARY
          return QUANT_SUMMARY;
        case 7: // RISK_LIST
          return RISK_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISRUNNING_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PORTFOLIO,_Fields.POSITION_MAP,_Fields.TRANSACTION_DETAILS,_Fields.TRANSACTION_PARAM,_Fields.IS_RUNNING,_Fields.QUANT_SUMMARY,_Fields.RISK_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PORTFOLIO, new org.apache.thrift.meta_data.FieldMetaData("portfolio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPortfolio.class)));
    tmpMap.put(_Fields.POSITION_MAP, new org.apache.thrift.meta_data.FieldMetaData("position_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPosition.class))));
    tmpMap.put(_Fields.TRANSACTION_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("transaction_details", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransactionDetail.class))));
    tmpMap.put(_Fields.TRANSACTION_PARAM, new org.apache.thrift.meta_data.FieldMetaData("transaction_param", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransactionParam.class)));
    tmpMap.put(_Fields.IS_RUNNING, new org.apache.thrift.meta_data.FieldMetaData("isRunning", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUANT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("quant_summary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQuantSummary.class)));
    tmpMap.put(_Fields.RISK_LIST, new org.apache.thrift.meta_data.FieldMetaData("risk_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRiskResult.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TInfoPacks.class, metaDataMap);
  }

  public TInfoPacks() {
    this.isRunning = true;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TInfoPacks(TInfoPacks other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPortfolio()) {
      this.portfolio = new TPortfolio(other.portfolio);
    }
    if (other.isSetPosition_map()) {
      java.util.Map<String,TPosition> __this__position_map = new java.util.HashMap<String,TPosition>(other.position_map.size());
      for (java.util.Map.Entry<String, TPosition> other_element : other.position_map.entrySet()) {

        String other_element_key = other_element.getKey();
        TPosition other_element_value = other_element.getValue();

        String __this__position_map_copy_key = other_element_key;

        TPosition __this__position_map_copy_value = new TPosition(other_element_value);

        __this__position_map.put(__this__position_map_copy_key, __this__position_map_copy_value);
      }
      this.position_map = __this__position_map;
    }
    if (other.isSetTransaction_details()) {
      java.util.List<TTransactionDetail> __this__transaction_details = new java.util.ArrayList<TTransactionDetail>(other.transaction_details.size());
      for (TTransactionDetail other_element : other.transaction_details) {
        __this__transaction_details.add(new TTransactionDetail(other_element));
      }
      this.transaction_details = __this__transaction_details;
    }
    if (other.isSetTransaction_param()) {
      this.transaction_param = new TTransactionParam(other.transaction_param);
    }
    this.isRunning = other.isRunning;
    if (other.isSetQuant_summary()) {
      this.quant_summary = new TQuantSummary(other.quant_summary);
    }
    if (other.isSetRisk_list()) {
      java.util.List<TRiskResult> __this__risk_list = new java.util.ArrayList<TRiskResult>(other.risk_list.size());
      for (TRiskResult other_element : other.risk_list) {
        __this__risk_list.add(new TRiskResult(other_element));
      }
      this.risk_list = __this__risk_list;
    }
  }

  public TInfoPacks deepCopy() {
    return new TInfoPacks(this);
  }

  @Override
  public void clear() {
    this.portfolio = null;
    this.position_map = null;
    this.transaction_details = null;
    this.transaction_param = null;
    this.isRunning = true;

    this.quant_summary = null;
    this.risk_list = null;
  }

  public TPortfolio getPortfolio() {
    return this.portfolio;
  }

  public TInfoPacks setPortfolio(TPortfolio portfolio) {
    this.portfolio = portfolio;
    return this;
  }

  public void unsetPortfolio() {
    this.portfolio = null;
  }

  /** Returns true if field portfolio is set (has been assigned a value) and false otherwise */
  public boolean isSetPortfolio() {
    return this.portfolio != null;
  }

  public void setPortfolioIsSet(boolean value) {
    if (!value) {
      this.portfolio = null;
    }
  }

  public int getPosition_mapSize() {
    return (this.position_map == null) ? 0 : this.position_map.size();
  }

  public void putToPosition_map(String key, TPosition val) {
    if (this.position_map == null) {
      this.position_map = new java.util.HashMap<String,TPosition>();
    }
    this.position_map.put(key, val);
  }

  public java.util.Map<String,TPosition> getPosition_map() {
    return this.position_map;
  }

  public TInfoPacks setPosition_map(java.util.Map<String,TPosition> position_map) {
    this.position_map = position_map;
    return this;
  }

  public void unsetPosition_map() {
    this.position_map = null;
  }

  /** Returns true if field position_map is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition_map() {
    return this.position_map != null;
  }

  public void setPosition_mapIsSet(boolean value) {
    if (!value) {
      this.position_map = null;
    }
  }

  public int getTransaction_detailsSize() {
    return (this.transaction_details == null) ? 0 : this.transaction_details.size();
  }

  public java.util.Iterator<TTransactionDetail> getTransaction_detailsIterator() {
    return (this.transaction_details == null) ? null : this.transaction_details.iterator();
  }

  public void addToTransaction_details(TTransactionDetail elem) {
    if (this.transaction_details == null) {
      this.transaction_details = new java.util.ArrayList<TTransactionDetail>();
    }
    this.transaction_details.add(elem);
  }

  public java.util.List<TTransactionDetail> getTransaction_details() {
    return this.transaction_details;
  }

  public TInfoPacks setTransaction_details(java.util.List<TTransactionDetail> transaction_details) {
    this.transaction_details = transaction_details;
    return this;
  }

  public void unsetTransaction_details() {
    this.transaction_details = null;
  }

  /** Returns true if field transaction_details is set (has been assigned a value) and false otherwise */
  public boolean isSetTransaction_details() {
    return this.transaction_details != null;
  }

  public void setTransaction_detailsIsSet(boolean value) {
    if (!value) {
      this.transaction_details = null;
    }
  }

  public TTransactionParam getTransaction_param() {
    return this.transaction_param;
  }

  public TInfoPacks setTransaction_param(TTransactionParam transaction_param) {
    this.transaction_param = transaction_param;
    return this;
  }

  public void unsetTransaction_param() {
    this.transaction_param = null;
  }

  /** Returns true if field transaction_param is set (has been assigned a value) and false otherwise */
  public boolean isSetTransaction_param() {
    return this.transaction_param != null;
  }

  public void setTransaction_paramIsSet(boolean value) {
    if (!value) {
      this.transaction_param = null;
    }
  }

  public boolean isIsRunning() {
    return this.isRunning;
  }

  public TInfoPacks setIsRunning(boolean isRunning) {
    this.isRunning = isRunning;
    setIsRunningIsSet(true);
    return this;
  }

  public void unsetIsRunning() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISRUNNING_ISSET_ID);
  }

  /** Returns true if field isRunning is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRunning() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISRUNNING_ISSET_ID);
  }

  public void setIsRunningIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISRUNNING_ISSET_ID, value);
  }

  public TQuantSummary getQuant_summary() {
    return this.quant_summary;
  }

  public TInfoPacks setQuant_summary(TQuantSummary quant_summary) {
    this.quant_summary = quant_summary;
    return this;
  }

  public void unsetQuant_summary() {
    this.quant_summary = null;
  }

  /** Returns true if field quant_summary is set (has been assigned a value) and false otherwise */
  public boolean isSetQuant_summary() {
    return this.quant_summary != null;
  }

  public void setQuant_summaryIsSet(boolean value) {
    if (!value) {
      this.quant_summary = null;
    }
  }

  public int getRisk_listSize() {
    return (this.risk_list == null) ? 0 : this.risk_list.size();
  }

  public java.util.Iterator<TRiskResult> getRisk_listIterator() {
    return (this.risk_list == null) ? null : this.risk_list.iterator();
  }

  public void addToRisk_list(TRiskResult elem) {
    if (this.risk_list == null) {
      this.risk_list = new java.util.ArrayList<TRiskResult>();
    }
    this.risk_list.add(elem);
  }

  public java.util.List<TRiskResult> getRisk_list() {
    return this.risk_list;
  }

  public TInfoPacks setRisk_list(java.util.List<TRiskResult> risk_list) {
    this.risk_list = risk_list;
    return this;
  }

  public void unsetRisk_list() {
    this.risk_list = null;
  }

  /** Returns true if field risk_list is set (has been assigned a value) and false otherwise */
  public boolean isSetRisk_list() {
    return this.risk_list != null;
  }

  public void setRisk_listIsSet(boolean value) {
    if (!value) {
      this.risk_list = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PORTFOLIO:
      if (value == null) {
        unsetPortfolio();
      } else {
        setPortfolio((TPortfolio)value);
      }
      break;

    case POSITION_MAP:
      if (value == null) {
        unsetPosition_map();
      } else {
        setPosition_map((java.util.Map<String,TPosition>)value);
      }
      break;

    case TRANSACTION_DETAILS:
      if (value == null) {
        unsetTransaction_details();
      } else {
        setTransaction_details((java.util.List<TTransactionDetail>)value);
      }
      break;

    case TRANSACTION_PARAM:
      if (value == null) {
        unsetTransaction_param();
      } else {
        setTransaction_param((TTransactionParam)value);
      }
      break;

    case IS_RUNNING:
      if (value == null) {
        unsetIsRunning();
      } else {
        setIsRunning((Boolean)value);
      }
      break;

    case QUANT_SUMMARY:
      if (value == null) {
        unsetQuant_summary();
      } else {
        setQuant_summary((TQuantSummary)value);
      }
      break;

    case RISK_LIST:
      if (value == null) {
        unsetRisk_list();
      } else {
        setRisk_list((java.util.List<TRiskResult>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PORTFOLIO:
      return getPortfolio();

    case POSITION_MAP:
      return getPosition_map();

    case TRANSACTION_DETAILS:
      return getTransaction_details();

    case TRANSACTION_PARAM:
      return getTransaction_param();

    case IS_RUNNING:
      return isIsRunning();

    case QUANT_SUMMARY:
      return getQuant_summary();

    case RISK_LIST:
      return getRisk_list();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PORTFOLIO:
      return isSetPortfolio();
    case POSITION_MAP:
      return isSetPosition_map();
    case TRANSACTION_DETAILS:
      return isSetTransaction_details();
    case TRANSACTION_PARAM:
      return isSetTransaction_param();
    case IS_RUNNING:
      return isSetIsRunning();
    case QUANT_SUMMARY:
      return isSetQuant_summary();
    case RISK_LIST:
      return isSetRisk_list();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TInfoPacks)
      return this.equals((TInfoPacks)that);
    return false;
  }

  public boolean equals(TInfoPacks that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_portfolio = true && this.isSetPortfolio();
    boolean that_present_portfolio = true && that.isSetPortfolio();
    if (this_present_portfolio || that_present_portfolio) {
      if (!(this_present_portfolio && that_present_portfolio))
        return false;
      if (!this.portfolio.equals(that.portfolio))
        return false;
    }

    boolean this_present_position_map = true && this.isSetPosition_map();
    boolean that_present_position_map = true && that.isSetPosition_map();
    if (this_present_position_map || that_present_position_map) {
      if (!(this_present_position_map && that_present_position_map))
        return false;
      if (!this.position_map.equals(that.position_map))
        return false;
    }

    boolean this_present_transaction_details = true && this.isSetTransaction_details();
    boolean that_present_transaction_details = true && that.isSetTransaction_details();
    if (this_present_transaction_details || that_present_transaction_details) {
      if (!(this_present_transaction_details && that_present_transaction_details))
        return false;
      if (!this.transaction_details.equals(that.transaction_details))
        return false;
    }

    boolean this_present_transaction_param = true && this.isSetTransaction_param();
    boolean that_present_transaction_param = true && that.isSetTransaction_param();
    if (this_present_transaction_param || that_present_transaction_param) {
      if (!(this_present_transaction_param && that_present_transaction_param))
        return false;
      if (!this.transaction_param.equals(that.transaction_param))
        return false;
    }

    boolean this_present_isRunning = true && this.isSetIsRunning();
    boolean that_present_isRunning = true && that.isSetIsRunning();
    if (this_present_isRunning || that_present_isRunning) {
      if (!(this_present_isRunning && that_present_isRunning))
        return false;
      if (this.isRunning != that.isRunning)
        return false;
    }

    boolean this_present_quant_summary = true && this.isSetQuant_summary();
    boolean that_present_quant_summary = true && that.isSetQuant_summary();
    if (this_present_quant_summary || that_present_quant_summary) {
      if (!(this_present_quant_summary && that_present_quant_summary))
        return false;
      if (!this.quant_summary.equals(that.quant_summary))
        return false;
    }

    boolean this_present_risk_list = true && this.isSetRisk_list();
    boolean that_present_risk_list = true && that.isSetRisk_list();
    if (this_present_risk_list || that_present_risk_list) {
      if (!(this_present_risk_list && that_present_risk_list))
        return false;
      if (!this.risk_list.equals(that.risk_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPortfolio()) ? 131071 : 524287);
    if (isSetPortfolio())
      hashCode = hashCode * 8191 + portfolio.hashCode();

    hashCode = hashCode * 8191 + ((isSetPosition_map()) ? 131071 : 524287);
    if (isSetPosition_map())
      hashCode = hashCode * 8191 + position_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetTransaction_details()) ? 131071 : 524287);
    if (isSetTransaction_details())
      hashCode = hashCode * 8191 + transaction_details.hashCode();

    hashCode = hashCode * 8191 + ((isSetTransaction_param()) ? 131071 : 524287);
    if (isSetTransaction_param())
      hashCode = hashCode * 8191 + transaction_param.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsRunning()) ? 131071 : 524287);
    if (isSetIsRunning())
      hashCode = hashCode * 8191 + ((isRunning) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetQuant_summary()) ? 131071 : 524287);
    if (isSetQuant_summary())
      hashCode = hashCode * 8191 + quant_summary.hashCode();

    hashCode = hashCode * 8191 + ((isSetRisk_list()) ? 131071 : 524287);
    if (isSetRisk_list())
      hashCode = hashCode * 8191 + risk_list.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TInfoPacks other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPortfolio()).compareTo(other.isSetPortfolio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortfolio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portfolio, other.portfolio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition_map()).compareTo(other.isSetPosition_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_map, other.position_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransaction_details()).compareTo(other.isSetTransaction_details());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransaction_details()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaction_details, other.transaction_details);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransaction_param()).compareTo(other.isSetTransaction_param());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransaction_param()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaction_param, other.transaction_param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRunning()).compareTo(other.isSetIsRunning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRunning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRunning, other.isRunning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuant_summary()).compareTo(other.isSetQuant_summary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuant_summary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quant_summary, other.quant_summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRisk_list()).compareTo(other.isSetRisk_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRisk_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.risk_list, other.risk_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TInfoPacks(");
    boolean first = true;

    if (isSetPortfolio()) {
      sb.append("portfolio:");
      if (this.portfolio == null) {
        sb.append("null");
      } else {
        sb.append(this.portfolio);
      }
      first = false;
    }
    if (isSetPosition_map()) {
      if (!first) sb.append(", ");
      sb.append("position_map:");
      if (this.position_map == null) {
        sb.append("null");
      } else {
        sb.append(this.position_map);
      }
      first = false;
    }
    if (isSetTransaction_details()) {
      if (!first) sb.append(", ");
      sb.append("transaction_details:");
      if (this.transaction_details == null) {
        sb.append("null");
      } else {
        sb.append(this.transaction_details);
      }
      first = false;
    }
    if (isSetTransaction_param()) {
      if (!first) sb.append(", ");
      sb.append("transaction_param:");
      if (this.transaction_param == null) {
        sb.append("null");
      } else {
        sb.append(this.transaction_param);
      }
      first = false;
    }
    if (isSetIsRunning()) {
      if (!first) sb.append(", ");
      sb.append("isRunning:");
      sb.append(this.isRunning);
      first = false;
    }
    if (isSetQuant_summary()) {
      if (!first) sb.append(", ");
      sb.append("quant_summary:");
      if (this.quant_summary == null) {
        sb.append("null");
      } else {
        sb.append(this.quant_summary);
      }
      first = false;
    }
    if (isSetRisk_list()) {
      if (!first) sb.append(", ");
      sb.append("risk_list:");
      if (this.risk_list == null) {
        sb.append("null");
      } else {
        sb.append(this.risk_list);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (portfolio != null) {
      portfolio.validate();
    }
    if (transaction_param != null) {
      transaction_param.validate();
    }
    if (quant_summary != null) {
      quant_summary.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TInfoPacksStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TInfoPacksStandardScheme getScheme() {
      return new TInfoPacksStandardScheme();
    }
  }

  private static class TInfoPacksStandardScheme extends org.apache.thrift.scheme.StandardScheme<TInfoPacks> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TInfoPacks struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PORTFOLIO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.portfolio = new TPortfolio();
              struct.portfolio.read(iprot);
              struct.setPortfolioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSITION_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map76 = iprot.readMapBegin();
                struct.position_map = new java.util.HashMap<String,TPosition>(2*_map76.size);
                String _key77;
                TPosition _val78;
                for (int _i79 = 0; _i79 < _map76.size; ++_i79)
                {
                  _key77 = iprot.readString();
                  _val78 = new TPosition();
                  _val78.read(iprot);
                  struct.position_map.put(_key77, _val78);
                }
                iprot.readMapEnd();
              }
              struct.setPosition_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANSACTION_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.transaction_details = new java.util.ArrayList<TTransactionDetail>(_list80.size);
                TTransactionDetail _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = new TTransactionDetail();
                  _elem81.read(iprot);
                  struct.transaction_details.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setTransaction_detailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRANSACTION_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.transaction_param = new TTransactionParam();
              struct.transaction_param.read(iprot);
              struct.setTransaction_paramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_RUNNING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRunning = iprot.readBool();
              struct.setIsRunningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUANT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.quant_summary = new TQuantSummary();
              struct.quant_summary.read(iprot);
              struct.setQuant_summaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RISK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                struct.risk_list = new java.util.ArrayList<TRiskResult>(_list83.size);
                TRiskResult _elem84;
                for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                {
                  _elem84 = new TRiskResult();
                  _elem84.read(iprot);
                  struct.risk_list.add(_elem84);
                }
                iprot.readListEnd();
              }
              struct.setRisk_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TInfoPacks struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.portfolio != null) {
        if (struct.isSetPortfolio()) {
          oprot.writeFieldBegin(PORTFOLIO_FIELD_DESC);
          struct.portfolio.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.position_map != null) {
        if (struct.isSetPosition_map()) {
          oprot.writeFieldBegin(POSITION_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.position_map.size()));
            for (java.util.Map.Entry<String, TPosition> _iter86 : struct.position_map.entrySet())
            {
              oprot.writeString(_iter86.getKey());
              _iter86.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.transaction_details != null) {
        if (struct.isSetTransaction_details()) {
          oprot.writeFieldBegin(TRANSACTION_DETAILS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.transaction_details.size()));
            for (TTransactionDetail _iter87 : struct.transaction_details)
            {
              _iter87.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.transaction_param != null) {
        if (struct.isSetTransaction_param()) {
          oprot.writeFieldBegin(TRANSACTION_PARAM_FIELD_DESC);
          struct.transaction_param.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsRunning()) {
        oprot.writeFieldBegin(IS_RUNNING_FIELD_DESC);
        oprot.writeBool(struct.isRunning);
        oprot.writeFieldEnd();
      }
      if (struct.quant_summary != null) {
        if (struct.isSetQuant_summary()) {
          oprot.writeFieldBegin(QUANT_SUMMARY_FIELD_DESC);
          struct.quant_summary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.risk_list != null) {
        if (struct.isSetRisk_list()) {
          oprot.writeFieldBegin(RISK_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.risk_list.size()));
            for (TRiskResult _iter88 : struct.risk_list)
            {
              _iter88.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TInfoPacksTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TInfoPacksTupleScheme getScheme() {
      return new TInfoPacksTupleScheme();
    }
  }

  private static class TInfoPacksTupleScheme extends org.apache.thrift.scheme.TupleScheme<TInfoPacks> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TInfoPacks struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPortfolio()) {
        optionals.set(0);
      }
      if (struct.isSetPosition_map()) {
        optionals.set(1);
      }
      if (struct.isSetTransaction_details()) {
        optionals.set(2);
      }
      if (struct.isSetTransaction_param()) {
        optionals.set(3);
      }
      if (struct.isSetIsRunning()) {
        optionals.set(4);
      }
      if (struct.isSetQuant_summary()) {
        optionals.set(5);
      }
      if (struct.isSetRisk_list()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPortfolio()) {
        struct.portfolio.write(oprot);
      }
      if (struct.isSetPosition_map()) {
        {
          oprot.writeI32(struct.position_map.size());
          for (java.util.Map.Entry<String, TPosition> _iter89 : struct.position_map.entrySet())
          {
            oprot.writeString(_iter89.getKey());
            _iter89.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetTransaction_details()) {
        {
          oprot.writeI32(struct.transaction_details.size());
          for (TTransactionDetail _iter90 : struct.transaction_details)
          {
            _iter90.write(oprot);
          }
        }
      }
      if (struct.isSetTransaction_param()) {
        struct.transaction_param.write(oprot);
      }
      if (struct.isSetIsRunning()) {
        oprot.writeBool(struct.isRunning);
      }
      if (struct.isSetQuant_summary()) {
        struct.quant_summary.write(oprot);
      }
      if (struct.isSetRisk_list()) {
        {
          oprot.writeI32(struct.risk_list.size());
          for (TRiskResult _iter91 : struct.risk_list)
          {
            _iter91.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TInfoPacks struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.portfolio = new TPortfolio();
        struct.portfolio.read(iprot);
        struct.setPortfolioIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map92 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.position_map = new java.util.HashMap<String,TPosition>(2*_map92.size);
          String _key93;
          TPosition _val94;
          for (int _i95 = 0; _i95 < _map92.size; ++_i95)
          {
            _key93 = iprot.readString();
            _val94 = new TPosition();
            _val94.read(iprot);
            struct.position_map.put(_key93, _val94);
          }
        }
        struct.setPosition_mapIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list96 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.transaction_details = new java.util.ArrayList<TTransactionDetail>(_list96.size);
          TTransactionDetail _elem97;
          for (int _i98 = 0; _i98 < _list96.size; ++_i98)
          {
            _elem97 = new TTransactionDetail();
            _elem97.read(iprot);
            struct.transaction_details.add(_elem97);
          }
        }
        struct.setTransaction_detailsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.transaction_param = new TTransactionParam();
        struct.transaction_param.read(iprot);
        struct.setTransaction_paramIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isRunning = iprot.readBool();
        struct.setIsRunningIsSet(true);
      }
      if (incoming.get(5)) {
        struct.quant_summary = new TQuantSummary();
        struct.quant_summary.read(iprot);
        struct.setQuant_summaryIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list99 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.risk_list = new java.util.ArrayList<TRiskResult>(_list99.size);
          TRiskResult _elem100;
          for (int _i101 = 0; _i101 < _list99.size; ++_i101)
          {
            _elem100 = new TRiskResult();
            _elem100.read(iprot);
            struct.risk_list.add(_elem100);
          }
        }
        struct.setRisk_listIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

