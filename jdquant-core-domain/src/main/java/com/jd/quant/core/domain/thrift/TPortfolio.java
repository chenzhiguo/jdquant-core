/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jd.quant.core.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 持仓资产信息
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-15")
public class TPortfolio implements org.apache.thrift.TBase<TPortfolio, TPortfolio._Fields>, java.io.Serializable, Cloneable, Comparable<TPortfolio> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPortfolio");

  private static final org.apache.thrift.protocol.TField STARTING_CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("starting_cash", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("cash", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_RETURNS_FIELD_DESC = new org.apache.thrift.protocol.TField("total_returns", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DAILY_RETURNS_FIELD_DESC = new org.apache.thrift.protocol.TField("daily_returns", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MARKET_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("market_value", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PORTFOLIO_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("portfolio_value", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField TODAY_PNL_FIELD_DESC = new org.apache.thrift.protocol.TField("today_pnl", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField PNL_FIELD_DESC = new org.apache.thrift.protocol.TField("pnl", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_date", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField ANNUALIZED_RETURNS_FIELD_DESC = new org.apache.thrift.protocol.TField("annualized_returns", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField DIVIDEND_RECEIVABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("dividend_receivable", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField PREVIOUS_PORTFOLIO_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("previous_portfolio_value", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField BENCHMARK_DAILY_RETURN_FIELD_DESC = new org.apache.thrift.protocol.TField("benchmark_daily_return", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField YEAR_BENCHMARK_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("year_benchmark_percent", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField BENCHMARK_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("benchmark_percent", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField INITIAL_BENCHMARK_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("initial_benchmark_price", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField PREVIOUS_BENCHMARK_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("previous_benchmark_price", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField CURRENT_BENCHMARK_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("current_benchmark_price", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField PRE_TOTAL_RETURN_FIELD_DESC = new org.apache.thrift.protocol.TField("pre_total_return", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField TOTAL_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("total_commission", org.apache.thrift.protocol.TType.DOUBLE, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPortfolioStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPortfolioTupleSchemeFactory();

  public double starting_cash; // optional
  public double cash; // optional
  public double total_returns; // optional
  public double daily_returns; // optional
  public double market_value; // optional
  public double portfolio_value; // optional
  public double today_pnl; // optional
  public double pnl; // optional
  public double start_date; // optional
  public double annualized_returns; // optional
  public double dividend_receivable; // optional
  public double previous_portfolio_value; // optional
  public double benchmark_daily_return; // optional
  public double year_benchmark_percent; // optional
  public double benchmark_percent; // optional
  public double initial_benchmark_price; // optional
  public double previous_benchmark_price; // optional
  public double current_benchmark_price; // optional
  public double pre_total_return; // optional
  public double total_commission; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STARTING_CASH((short)1, "starting_cash"),
    CASH((short)2, "cash"),
    TOTAL_RETURNS((short)3, "total_returns"),
    DAILY_RETURNS((short)4, "daily_returns"),
    MARKET_VALUE((short)5, "market_value"),
    PORTFOLIO_VALUE((short)6, "portfolio_value"),
    TODAY_PNL((short)7, "today_pnl"),
    PNL((short)8, "pnl"),
    START_DATE((short)9, "start_date"),
    ANNUALIZED_RETURNS((short)10, "annualized_returns"),
    DIVIDEND_RECEIVABLE((short)11, "dividend_receivable"),
    PREVIOUS_PORTFOLIO_VALUE((short)12, "previous_portfolio_value"),
    BENCHMARK_DAILY_RETURN((short)13, "benchmark_daily_return"),
    YEAR_BENCHMARK_PERCENT((short)14, "year_benchmark_percent"),
    BENCHMARK_PERCENT((short)15, "benchmark_percent"),
    INITIAL_BENCHMARK_PRICE((short)16, "initial_benchmark_price"),
    PREVIOUS_BENCHMARK_PRICE((short)17, "previous_benchmark_price"),
    CURRENT_BENCHMARK_PRICE((short)18, "current_benchmark_price"),
    PRE_TOTAL_RETURN((short)19, "pre_total_return"),
    TOTAL_COMMISSION((short)20, "total_commission");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STARTING_CASH
          return STARTING_CASH;
        case 2: // CASH
          return CASH;
        case 3: // TOTAL_RETURNS
          return TOTAL_RETURNS;
        case 4: // DAILY_RETURNS
          return DAILY_RETURNS;
        case 5: // MARKET_VALUE
          return MARKET_VALUE;
        case 6: // PORTFOLIO_VALUE
          return PORTFOLIO_VALUE;
        case 7: // TODAY_PNL
          return TODAY_PNL;
        case 8: // PNL
          return PNL;
        case 9: // START_DATE
          return START_DATE;
        case 10: // ANNUALIZED_RETURNS
          return ANNUALIZED_RETURNS;
        case 11: // DIVIDEND_RECEIVABLE
          return DIVIDEND_RECEIVABLE;
        case 12: // PREVIOUS_PORTFOLIO_VALUE
          return PREVIOUS_PORTFOLIO_VALUE;
        case 13: // BENCHMARK_DAILY_RETURN
          return BENCHMARK_DAILY_RETURN;
        case 14: // YEAR_BENCHMARK_PERCENT
          return YEAR_BENCHMARK_PERCENT;
        case 15: // BENCHMARK_PERCENT
          return BENCHMARK_PERCENT;
        case 16: // INITIAL_BENCHMARK_PRICE
          return INITIAL_BENCHMARK_PRICE;
        case 17: // PREVIOUS_BENCHMARK_PRICE
          return PREVIOUS_BENCHMARK_PRICE;
        case 18: // CURRENT_BENCHMARK_PRICE
          return CURRENT_BENCHMARK_PRICE;
        case 19: // PRE_TOTAL_RETURN
          return PRE_TOTAL_RETURN;
        case 20: // TOTAL_COMMISSION
          return TOTAL_COMMISSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTING_CASH_ISSET_ID = 0;
  private static final int __CASH_ISSET_ID = 1;
  private static final int __TOTAL_RETURNS_ISSET_ID = 2;
  private static final int __DAILY_RETURNS_ISSET_ID = 3;
  private static final int __MARKET_VALUE_ISSET_ID = 4;
  private static final int __PORTFOLIO_VALUE_ISSET_ID = 5;
  private static final int __TODAY_PNL_ISSET_ID = 6;
  private static final int __PNL_ISSET_ID = 7;
  private static final int __START_DATE_ISSET_ID = 8;
  private static final int __ANNUALIZED_RETURNS_ISSET_ID = 9;
  private static final int __DIVIDEND_RECEIVABLE_ISSET_ID = 10;
  private static final int __PREVIOUS_PORTFOLIO_VALUE_ISSET_ID = 11;
  private static final int __BENCHMARK_DAILY_RETURN_ISSET_ID = 12;
  private static final int __YEAR_BENCHMARK_PERCENT_ISSET_ID = 13;
  private static final int __BENCHMARK_PERCENT_ISSET_ID = 14;
  private static final int __INITIAL_BENCHMARK_PRICE_ISSET_ID = 15;
  private static final int __PREVIOUS_BENCHMARK_PRICE_ISSET_ID = 16;
  private static final int __CURRENT_BENCHMARK_PRICE_ISSET_ID = 17;
  private static final int __PRE_TOTAL_RETURN_ISSET_ID = 18;
  private static final int __TOTAL_COMMISSION_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STARTING_CASH,_Fields.CASH,_Fields.TOTAL_RETURNS,_Fields.DAILY_RETURNS,_Fields.MARKET_VALUE,_Fields.PORTFOLIO_VALUE,_Fields.TODAY_PNL,_Fields.PNL,_Fields.START_DATE,_Fields.ANNUALIZED_RETURNS,_Fields.DIVIDEND_RECEIVABLE,_Fields.PREVIOUS_PORTFOLIO_VALUE,_Fields.BENCHMARK_DAILY_RETURN,_Fields.YEAR_BENCHMARK_PERCENT,_Fields.BENCHMARK_PERCENT,_Fields.INITIAL_BENCHMARK_PRICE,_Fields.PREVIOUS_BENCHMARK_PRICE,_Fields.CURRENT_BENCHMARK_PRICE,_Fields.PRE_TOTAL_RETURN,_Fields.TOTAL_COMMISSION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STARTING_CASH, new org.apache.thrift.meta_data.FieldMetaData("starting_cash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH, new org.apache.thrift.meta_data.FieldMetaData("cash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_RETURNS, new org.apache.thrift.meta_data.FieldMetaData("total_returns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAILY_RETURNS, new org.apache.thrift.meta_data.FieldMetaData("daily_returns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MARKET_VALUE, new org.apache.thrift.meta_data.FieldMetaData("market_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PORTFOLIO_VALUE, new org.apache.thrift.meta_data.FieldMetaData("portfolio_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TODAY_PNL, new org.apache.thrift.meta_data.FieldMetaData("today_pnl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PNL, new org.apache.thrift.meta_data.FieldMetaData("pnl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("start_date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ANNUALIZED_RETURNS, new org.apache.thrift.meta_data.FieldMetaData("annualized_returns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DIVIDEND_RECEIVABLE, new org.apache.thrift.meta_data.FieldMetaData("dividend_receivable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREVIOUS_PORTFOLIO_VALUE, new org.apache.thrift.meta_data.FieldMetaData("previous_portfolio_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BENCHMARK_DAILY_RETURN, new org.apache.thrift.meta_data.FieldMetaData("benchmark_daily_return", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEAR_BENCHMARK_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("year_benchmark_percent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BENCHMARK_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("benchmark_percent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INITIAL_BENCHMARK_PRICE, new org.apache.thrift.meta_data.FieldMetaData("initial_benchmark_price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREVIOUS_BENCHMARK_PRICE, new org.apache.thrift.meta_data.FieldMetaData("previous_benchmark_price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENT_BENCHMARK_PRICE, new org.apache.thrift.meta_data.FieldMetaData("current_benchmark_price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_TOTAL_RETURN, new org.apache.thrift.meta_data.FieldMetaData("pre_total_return", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("total_commission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPortfolio.class, metaDataMap);
  }

  public TPortfolio() {
    this.starting_cash = 0;

    this.cash = 0;

    this.total_returns = 0;

    this.daily_returns = 0;

    this.market_value = 0;

    this.portfolio_value = 0;

    this.today_pnl = 0;

    this.pnl = 0;

    this.start_date = 0;

    this.annualized_returns = 0;

    this.dividend_receivable = 0;

    this.previous_portfolio_value = 0;

    this.benchmark_daily_return = 0;

    this.year_benchmark_percent = 0;

    this.benchmark_percent = 0;

    this.initial_benchmark_price = 0;

    this.previous_benchmark_price = 0;

    this.current_benchmark_price = 0;

    this.pre_total_return = 0;

    this.total_commission = 0;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPortfolio(TPortfolio other) {
    __isset_bitfield = other.__isset_bitfield;
    this.starting_cash = other.starting_cash;
    this.cash = other.cash;
    this.total_returns = other.total_returns;
    this.daily_returns = other.daily_returns;
    this.market_value = other.market_value;
    this.portfolio_value = other.portfolio_value;
    this.today_pnl = other.today_pnl;
    this.pnl = other.pnl;
    this.start_date = other.start_date;
    this.annualized_returns = other.annualized_returns;
    this.dividend_receivable = other.dividend_receivable;
    this.previous_portfolio_value = other.previous_portfolio_value;
    this.benchmark_daily_return = other.benchmark_daily_return;
    this.year_benchmark_percent = other.year_benchmark_percent;
    this.benchmark_percent = other.benchmark_percent;
    this.initial_benchmark_price = other.initial_benchmark_price;
    this.previous_benchmark_price = other.previous_benchmark_price;
    this.current_benchmark_price = other.current_benchmark_price;
    this.pre_total_return = other.pre_total_return;
    this.total_commission = other.total_commission;
  }

  public TPortfolio deepCopy() {
    return new TPortfolio(this);
  }

  @Override
  public void clear() {
    this.starting_cash = 0;

    this.cash = 0;

    this.total_returns = 0;

    this.daily_returns = 0;

    this.market_value = 0;

    this.portfolio_value = 0;

    this.today_pnl = 0;

    this.pnl = 0;

    this.start_date = 0;

    this.annualized_returns = 0;

    this.dividend_receivable = 0;

    this.previous_portfolio_value = 0;

    this.benchmark_daily_return = 0;

    this.year_benchmark_percent = 0;

    this.benchmark_percent = 0;

    this.initial_benchmark_price = 0;

    this.previous_benchmark_price = 0;

    this.current_benchmark_price = 0;

    this.pre_total_return = 0;

    this.total_commission = 0;

  }

  public double getStarting_cash() {
    return this.starting_cash;
  }

  public TPortfolio setStarting_cash(double starting_cash) {
    this.starting_cash = starting_cash;
    setStarting_cashIsSet(true);
    return this;
  }

  public void unsetStarting_cash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTING_CASH_ISSET_ID);
  }

  /** Returns true if field starting_cash is set (has been assigned a value) and false otherwise */
  public boolean isSetStarting_cash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTING_CASH_ISSET_ID);
  }

  public void setStarting_cashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTING_CASH_ISSET_ID, value);
  }

  public double getCash() {
    return this.cash;
  }

  public TPortfolio setCash(double cash) {
    this.cash = cash;
    setCashIsSet(true);
    return this;
  }

  public void unsetCash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  /** Returns true if field cash is set (has been assigned a value) and false otherwise */
  public boolean isSetCash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  public void setCashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CASH_ISSET_ID, value);
  }

  public double getTotal_returns() {
    return this.total_returns;
  }

  public TPortfolio setTotal_returns(double total_returns) {
    this.total_returns = total_returns;
    setTotal_returnsIsSet(true);
    return this;
  }

  public void unsetTotal_returns() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_RETURNS_ISSET_ID);
  }

  /** Returns true if field total_returns is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_returns() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_RETURNS_ISSET_ID);
  }

  public void setTotal_returnsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_RETURNS_ISSET_ID, value);
  }

  public double getDaily_returns() {
    return this.daily_returns;
  }

  public TPortfolio setDaily_returns(double daily_returns) {
    this.daily_returns = daily_returns;
    setDaily_returnsIsSet(true);
    return this;
  }

  public void unsetDaily_returns() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DAILY_RETURNS_ISSET_ID);
  }

  /** Returns true if field daily_returns is set (has been assigned a value) and false otherwise */
  public boolean isSetDaily_returns() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DAILY_RETURNS_ISSET_ID);
  }

  public void setDaily_returnsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DAILY_RETURNS_ISSET_ID, value);
  }

  public double getMarket_value() {
    return this.market_value;
  }

  public TPortfolio setMarket_value(double market_value) {
    this.market_value = market_value;
    setMarket_valueIsSet(true);
    return this;
  }

  public void unsetMarket_value() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MARKET_VALUE_ISSET_ID);
  }

  /** Returns true if field market_value is set (has been assigned a value) and false otherwise */
  public boolean isSetMarket_value() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MARKET_VALUE_ISSET_ID);
  }

  public void setMarket_valueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MARKET_VALUE_ISSET_ID, value);
  }

  public double getPortfolio_value() {
    return this.portfolio_value;
  }

  public TPortfolio setPortfolio_value(double portfolio_value) {
    this.portfolio_value = portfolio_value;
    setPortfolio_valueIsSet(true);
    return this;
  }

  public void unsetPortfolio_value() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORTFOLIO_VALUE_ISSET_ID);
  }

  /** Returns true if field portfolio_value is set (has been assigned a value) and false otherwise */
  public boolean isSetPortfolio_value() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORTFOLIO_VALUE_ISSET_ID);
  }

  public void setPortfolio_valueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORTFOLIO_VALUE_ISSET_ID, value);
  }

  public double getToday_pnl() {
    return this.today_pnl;
  }

  public TPortfolio setToday_pnl(double today_pnl) {
    this.today_pnl = today_pnl;
    setToday_pnlIsSet(true);
    return this;
  }

  public void unsetToday_pnl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TODAY_PNL_ISSET_ID);
  }

  /** Returns true if field today_pnl is set (has been assigned a value) and false otherwise */
  public boolean isSetToday_pnl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TODAY_PNL_ISSET_ID);
  }

  public void setToday_pnlIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TODAY_PNL_ISSET_ID, value);
  }

  public double getPnl() {
    return this.pnl;
  }

  public TPortfolio setPnl(double pnl) {
    this.pnl = pnl;
    setPnlIsSet(true);
    return this;
  }

  public void unsetPnl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PNL_ISSET_ID);
  }

  /** Returns true if field pnl is set (has been assigned a value) and false otherwise */
  public boolean isSetPnl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PNL_ISSET_ID);
  }

  public void setPnlIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PNL_ISSET_ID, value);
  }

  public double getStart_date() {
    return this.start_date;
  }

  public TPortfolio setStart_date(double start_date) {
    this.start_date = start_date;
    setStart_dateIsSet(true);
    return this;
  }

  public void unsetStart_date() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_DATE_ISSET_ID);
  }

  /** Returns true if field start_date is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_date() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_DATE_ISSET_ID);
  }

  public void setStart_dateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_DATE_ISSET_ID, value);
  }

  public double getAnnualized_returns() {
    return this.annualized_returns;
  }

  public TPortfolio setAnnualized_returns(double annualized_returns) {
    this.annualized_returns = annualized_returns;
    setAnnualized_returnsIsSet(true);
    return this;
  }

  public void unsetAnnualized_returns() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANNUALIZED_RETURNS_ISSET_ID);
  }

  /** Returns true if field annualized_returns is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnualized_returns() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANNUALIZED_RETURNS_ISSET_ID);
  }

  public void setAnnualized_returnsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANNUALIZED_RETURNS_ISSET_ID, value);
  }

  public double getDividend_receivable() {
    return this.dividend_receivable;
  }

  public TPortfolio setDividend_receivable(double dividend_receivable) {
    this.dividend_receivable = dividend_receivable;
    setDividend_receivableIsSet(true);
    return this;
  }

  public void unsetDividend_receivable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIVIDEND_RECEIVABLE_ISSET_ID);
  }

  /** Returns true if field dividend_receivable is set (has been assigned a value) and false otherwise */
  public boolean isSetDividend_receivable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIVIDEND_RECEIVABLE_ISSET_ID);
  }

  public void setDividend_receivableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIVIDEND_RECEIVABLE_ISSET_ID, value);
  }

  public double getPrevious_portfolio_value() {
    return this.previous_portfolio_value;
  }

  public TPortfolio setPrevious_portfolio_value(double previous_portfolio_value) {
    this.previous_portfolio_value = previous_portfolio_value;
    setPrevious_portfolio_valueIsSet(true);
    return this;
  }

  public void unsetPrevious_portfolio_value() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PREVIOUS_PORTFOLIO_VALUE_ISSET_ID);
  }

  /** Returns true if field previous_portfolio_value is set (has been assigned a value) and false otherwise */
  public boolean isSetPrevious_portfolio_value() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PREVIOUS_PORTFOLIO_VALUE_ISSET_ID);
  }

  public void setPrevious_portfolio_valueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PREVIOUS_PORTFOLIO_VALUE_ISSET_ID, value);
  }

  public double getBenchmark_daily_return() {
    return this.benchmark_daily_return;
  }

  public TPortfolio setBenchmark_daily_return(double benchmark_daily_return) {
    this.benchmark_daily_return = benchmark_daily_return;
    setBenchmark_daily_returnIsSet(true);
    return this;
  }

  public void unsetBenchmark_daily_return() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BENCHMARK_DAILY_RETURN_ISSET_ID);
  }

  /** Returns true if field benchmark_daily_return is set (has been assigned a value) and false otherwise */
  public boolean isSetBenchmark_daily_return() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BENCHMARK_DAILY_RETURN_ISSET_ID);
  }

  public void setBenchmark_daily_returnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BENCHMARK_DAILY_RETURN_ISSET_ID, value);
  }

  public double getYear_benchmark_percent() {
    return this.year_benchmark_percent;
  }

  public TPortfolio setYear_benchmark_percent(double year_benchmark_percent) {
    this.year_benchmark_percent = year_benchmark_percent;
    setYear_benchmark_percentIsSet(true);
    return this;
  }

  public void unsetYear_benchmark_percent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YEAR_BENCHMARK_PERCENT_ISSET_ID);
  }

  /** Returns true if field year_benchmark_percent is set (has been assigned a value) and false otherwise */
  public boolean isSetYear_benchmark_percent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YEAR_BENCHMARK_PERCENT_ISSET_ID);
  }

  public void setYear_benchmark_percentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YEAR_BENCHMARK_PERCENT_ISSET_ID, value);
  }

  public double getBenchmark_percent() {
    return this.benchmark_percent;
  }

  public TPortfolio setBenchmark_percent(double benchmark_percent) {
    this.benchmark_percent = benchmark_percent;
    setBenchmark_percentIsSet(true);
    return this;
  }

  public void unsetBenchmark_percent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BENCHMARK_PERCENT_ISSET_ID);
  }

  /** Returns true if field benchmark_percent is set (has been assigned a value) and false otherwise */
  public boolean isSetBenchmark_percent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BENCHMARK_PERCENT_ISSET_ID);
  }

  public void setBenchmark_percentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BENCHMARK_PERCENT_ISSET_ID, value);
  }

  public double getInitial_benchmark_price() {
    return this.initial_benchmark_price;
  }

  public TPortfolio setInitial_benchmark_price(double initial_benchmark_price) {
    this.initial_benchmark_price = initial_benchmark_price;
    setInitial_benchmark_priceIsSet(true);
    return this;
  }

  public void unsetInitial_benchmark_price() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INITIAL_BENCHMARK_PRICE_ISSET_ID);
  }

  /** Returns true if field initial_benchmark_price is set (has been assigned a value) and false otherwise */
  public boolean isSetInitial_benchmark_price() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INITIAL_BENCHMARK_PRICE_ISSET_ID);
  }

  public void setInitial_benchmark_priceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INITIAL_BENCHMARK_PRICE_ISSET_ID, value);
  }

  public double getPrevious_benchmark_price() {
    return this.previous_benchmark_price;
  }

  public TPortfolio setPrevious_benchmark_price(double previous_benchmark_price) {
    this.previous_benchmark_price = previous_benchmark_price;
    setPrevious_benchmark_priceIsSet(true);
    return this;
  }

  public void unsetPrevious_benchmark_price() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PREVIOUS_BENCHMARK_PRICE_ISSET_ID);
  }

  /** Returns true if field previous_benchmark_price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrevious_benchmark_price() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PREVIOUS_BENCHMARK_PRICE_ISSET_ID);
  }

  public void setPrevious_benchmark_priceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PREVIOUS_BENCHMARK_PRICE_ISSET_ID, value);
  }

  public double getCurrent_benchmark_price() {
    return this.current_benchmark_price;
  }

  public TPortfolio setCurrent_benchmark_price(double current_benchmark_price) {
    this.current_benchmark_price = current_benchmark_price;
    setCurrent_benchmark_priceIsSet(true);
    return this;
  }

  public void unsetCurrent_benchmark_price() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENT_BENCHMARK_PRICE_ISSET_ID);
  }

  /** Returns true if field current_benchmark_price is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_benchmark_price() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENT_BENCHMARK_PRICE_ISSET_ID);
  }

  public void setCurrent_benchmark_priceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENT_BENCHMARK_PRICE_ISSET_ID, value);
  }

  public double getPre_total_return() {
    return this.pre_total_return;
  }

  public TPortfolio setPre_total_return(double pre_total_return) {
    this.pre_total_return = pre_total_return;
    setPre_total_returnIsSet(true);
    return this;
  }

  public void unsetPre_total_return() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRE_TOTAL_RETURN_ISSET_ID);
  }

  /** Returns true if field pre_total_return is set (has been assigned a value) and false otherwise */
  public boolean isSetPre_total_return() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRE_TOTAL_RETURN_ISSET_ID);
  }

  public void setPre_total_returnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRE_TOTAL_RETURN_ISSET_ID, value);
  }

  public double getTotal_commission() {
    return this.total_commission;
  }

  public TPortfolio setTotal_commission(double total_commission) {
    this.total_commission = total_commission;
    setTotal_commissionIsSet(true);
    return this;
  }

  public void unsetTotal_commission() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_COMMISSION_ISSET_ID);
  }

  /** Returns true if field total_commission is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_commission() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_COMMISSION_ISSET_ID);
  }

  public void setTotal_commissionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_COMMISSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STARTING_CASH:
      if (value == null) {
        unsetStarting_cash();
      } else {
        setStarting_cash((Double)value);
      }
      break;

    case CASH:
      if (value == null) {
        unsetCash();
      } else {
        setCash((Double)value);
      }
      break;

    case TOTAL_RETURNS:
      if (value == null) {
        unsetTotal_returns();
      } else {
        setTotal_returns((Double)value);
      }
      break;

    case DAILY_RETURNS:
      if (value == null) {
        unsetDaily_returns();
      } else {
        setDaily_returns((Double)value);
      }
      break;

    case MARKET_VALUE:
      if (value == null) {
        unsetMarket_value();
      } else {
        setMarket_value((Double)value);
      }
      break;

    case PORTFOLIO_VALUE:
      if (value == null) {
        unsetPortfolio_value();
      } else {
        setPortfolio_value((Double)value);
      }
      break;

    case TODAY_PNL:
      if (value == null) {
        unsetToday_pnl();
      } else {
        setToday_pnl((Double)value);
      }
      break;

    case PNL:
      if (value == null) {
        unsetPnl();
      } else {
        setPnl((Double)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStart_date();
      } else {
        setStart_date((Double)value);
      }
      break;

    case ANNUALIZED_RETURNS:
      if (value == null) {
        unsetAnnualized_returns();
      } else {
        setAnnualized_returns((Double)value);
      }
      break;

    case DIVIDEND_RECEIVABLE:
      if (value == null) {
        unsetDividend_receivable();
      } else {
        setDividend_receivable((Double)value);
      }
      break;

    case PREVIOUS_PORTFOLIO_VALUE:
      if (value == null) {
        unsetPrevious_portfolio_value();
      } else {
        setPrevious_portfolio_value((Double)value);
      }
      break;

    case BENCHMARK_DAILY_RETURN:
      if (value == null) {
        unsetBenchmark_daily_return();
      } else {
        setBenchmark_daily_return((Double)value);
      }
      break;

    case YEAR_BENCHMARK_PERCENT:
      if (value == null) {
        unsetYear_benchmark_percent();
      } else {
        setYear_benchmark_percent((Double)value);
      }
      break;

    case BENCHMARK_PERCENT:
      if (value == null) {
        unsetBenchmark_percent();
      } else {
        setBenchmark_percent((Double)value);
      }
      break;

    case INITIAL_BENCHMARK_PRICE:
      if (value == null) {
        unsetInitial_benchmark_price();
      } else {
        setInitial_benchmark_price((Double)value);
      }
      break;

    case PREVIOUS_BENCHMARK_PRICE:
      if (value == null) {
        unsetPrevious_benchmark_price();
      } else {
        setPrevious_benchmark_price((Double)value);
      }
      break;

    case CURRENT_BENCHMARK_PRICE:
      if (value == null) {
        unsetCurrent_benchmark_price();
      } else {
        setCurrent_benchmark_price((Double)value);
      }
      break;

    case PRE_TOTAL_RETURN:
      if (value == null) {
        unsetPre_total_return();
      } else {
        setPre_total_return((Double)value);
      }
      break;

    case TOTAL_COMMISSION:
      if (value == null) {
        unsetTotal_commission();
      } else {
        setTotal_commission((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STARTING_CASH:
      return getStarting_cash();

    case CASH:
      return getCash();

    case TOTAL_RETURNS:
      return getTotal_returns();

    case DAILY_RETURNS:
      return getDaily_returns();

    case MARKET_VALUE:
      return getMarket_value();

    case PORTFOLIO_VALUE:
      return getPortfolio_value();

    case TODAY_PNL:
      return getToday_pnl();

    case PNL:
      return getPnl();

    case START_DATE:
      return getStart_date();

    case ANNUALIZED_RETURNS:
      return getAnnualized_returns();

    case DIVIDEND_RECEIVABLE:
      return getDividend_receivable();

    case PREVIOUS_PORTFOLIO_VALUE:
      return getPrevious_portfolio_value();

    case BENCHMARK_DAILY_RETURN:
      return getBenchmark_daily_return();

    case YEAR_BENCHMARK_PERCENT:
      return getYear_benchmark_percent();

    case BENCHMARK_PERCENT:
      return getBenchmark_percent();

    case INITIAL_BENCHMARK_PRICE:
      return getInitial_benchmark_price();

    case PREVIOUS_BENCHMARK_PRICE:
      return getPrevious_benchmark_price();

    case CURRENT_BENCHMARK_PRICE:
      return getCurrent_benchmark_price();

    case PRE_TOTAL_RETURN:
      return getPre_total_return();

    case TOTAL_COMMISSION:
      return getTotal_commission();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STARTING_CASH:
      return isSetStarting_cash();
    case CASH:
      return isSetCash();
    case TOTAL_RETURNS:
      return isSetTotal_returns();
    case DAILY_RETURNS:
      return isSetDaily_returns();
    case MARKET_VALUE:
      return isSetMarket_value();
    case PORTFOLIO_VALUE:
      return isSetPortfolio_value();
    case TODAY_PNL:
      return isSetToday_pnl();
    case PNL:
      return isSetPnl();
    case START_DATE:
      return isSetStart_date();
    case ANNUALIZED_RETURNS:
      return isSetAnnualized_returns();
    case DIVIDEND_RECEIVABLE:
      return isSetDividend_receivable();
    case PREVIOUS_PORTFOLIO_VALUE:
      return isSetPrevious_portfolio_value();
    case BENCHMARK_DAILY_RETURN:
      return isSetBenchmark_daily_return();
    case YEAR_BENCHMARK_PERCENT:
      return isSetYear_benchmark_percent();
    case BENCHMARK_PERCENT:
      return isSetBenchmark_percent();
    case INITIAL_BENCHMARK_PRICE:
      return isSetInitial_benchmark_price();
    case PREVIOUS_BENCHMARK_PRICE:
      return isSetPrevious_benchmark_price();
    case CURRENT_BENCHMARK_PRICE:
      return isSetCurrent_benchmark_price();
    case PRE_TOTAL_RETURN:
      return isSetPre_total_return();
    case TOTAL_COMMISSION:
      return isSetTotal_commission();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPortfolio)
      return this.equals((TPortfolio)that);
    return false;
  }

  public boolean equals(TPortfolio that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_starting_cash = true && this.isSetStarting_cash();
    boolean that_present_starting_cash = true && that.isSetStarting_cash();
    if (this_present_starting_cash || that_present_starting_cash) {
      if (!(this_present_starting_cash && that_present_starting_cash))
        return false;
      if (this.starting_cash != that.starting_cash)
        return false;
    }

    boolean this_present_cash = true && this.isSetCash();
    boolean that_present_cash = true && that.isSetCash();
    if (this_present_cash || that_present_cash) {
      if (!(this_present_cash && that_present_cash))
        return false;
      if (this.cash != that.cash)
        return false;
    }

    boolean this_present_total_returns = true && this.isSetTotal_returns();
    boolean that_present_total_returns = true && that.isSetTotal_returns();
    if (this_present_total_returns || that_present_total_returns) {
      if (!(this_present_total_returns && that_present_total_returns))
        return false;
      if (this.total_returns != that.total_returns)
        return false;
    }

    boolean this_present_daily_returns = true && this.isSetDaily_returns();
    boolean that_present_daily_returns = true && that.isSetDaily_returns();
    if (this_present_daily_returns || that_present_daily_returns) {
      if (!(this_present_daily_returns && that_present_daily_returns))
        return false;
      if (this.daily_returns != that.daily_returns)
        return false;
    }

    boolean this_present_market_value = true && this.isSetMarket_value();
    boolean that_present_market_value = true && that.isSetMarket_value();
    if (this_present_market_value || that_present_market_value) {
      if (!(this_present_market_value && that_present_market_value))
        return false;
      if (this.market_value != that.market_value)
        return false;
    }

    boolean this_present_portfolio_value = true && this.isSetPortfolio_value();
    boolean that_present_portfolio_value = true && that.isSetPortfolio_value();
    if (this_present_portfolio_value || that_present_portfolio_value) {
      if (!(this_present_portfolio_value && that_present_portfolio_value))
        return false;
      if (this.portfolio_value != that.portfolio_value)
        return false;
    }

    boolean this_present_today_pnl = true && this.isSetToday_pnl();
    boolean that_present_today_pnl = true && that.isSetToday_pnl();
    if (this_present_today_pnl || that_present_today_pnl) {
      if (!(this_present_today_pnl && that_present_today_pnl))
        return false;
      if (this.today_pnl != that.today_pnl)
        return false;
    }

    boolean this_present_pnl = true && this.isSetPnl();
    boolean that_present_pnl = true && that.isSetPnl();
    if (this_present_pnl || that_present_pnl) {
      if (!(this_present_pnl && that_present_pnl))
        return false;
      if (this.pnl != that.pnl)
        return false;
    }

    boolean this_present_start_date = true && this.isSetStart_date();
    boolean that_present_start_date = true && that.isSetStart_date();
    if (this_present_start_date || that_present_start_date) {
      if (!(this_present_start_date && that_present_start_date))
        return false;
      if (this.start_date != that.start_date)
        return false;
    }

    boolean this_present_annualized_returns = true && this.isSetAnnualized_returns();
    boolean that_present_annualized_returns = true && that.isSetAnnualized_returns();
    if (this_present_annualized_returns || that_present_annualized_returns) {
      if (!(this_present_annualized_returns && that_present_annualized_returns))
        return false;
      if (this.annualized_returns != that.annualized_returns)
        return false;
    }

    boolean this_present_dividend_receivable = true && this.isSetDividend_receivable();
    boolean that_present_dividend_receivable = true && that.isSetDividend_receivable();
    if (this_present_dividend_receivable || that_present_dividend_receivable) {
      if (!(this_present_dividend_receivable && that_present_dividend_receivable))
        return false;
      if (this.dividend_receivable != that.dividend_receivable)
        return false;
    }

    boolean this_present_previous_portfolio_value = true && this.isSetPrevious_portfolio_value();
    boolean that_present_previous_portfolio_value = true && that.isSetPrevious_portfolio_value();
    if (this_present_previous_portfolio_value || that_present_previous_portfolio_value) {
      if (!(this_present_previous_portfolio_value && that_present_previous_portfolio_value))
        return false;
      if (this.previous_portfolio_value != that.previous_portfolio_value)
        return false;
    }

    boolean this_present_benchmark_daily_return = true && this.isSetBenchmark_daily_return();
    boolean that_present_benchmark_daily_return = true && that.isSetBenchmark_daily_return();
    if (this_present_benchmark_daily_return || that_present_benchmark_daily_return) {
      if (!(this_present_benchmark_daily_return && that_present_benchmark_daily_return))
        return false;
      if (this.benchmark_daily_return != that.benchmark_daily_return)
        return false;
    }

    boolean this_present_year_benchmark_percent = true && this.isSetYear_benchmark_percent();
    boolean that_present_year_benchmark_percent = true && that.isSetYear_benchmark_percent();
    if (this_present_year_benchmark_percent || that_present_year_benchmark_percent) {
      if (!(this_present_year_benchmark_percent && that_present_year_benchmark_percent))
        return false;
      if (this.year_benchmark_percent != that.year_benchmark_percent)
        return false;
    }

    boolean this_present_benchmark_percent = true && this.isSetBenchmark_percent();
    boolean that_present_benchmark_percent = true && that.isSetBenchmark_percent();
    if (this_present_benchmark_percent || that_present_benchmark_percent) {
      if (!(this_present_benchmark_percent && that_present_benchmark_percent))
        return false;
      if (this.benchmark_percent != that.benchmark_percent)
        return false;
    }

    boolean this_present_initial_benchmark_price = true && this.isSetInitial_benchmark_price();
    boolean that_present_initial_benchmark_price = true && that.isSetInitial_benchmark_price();
    if (this_present_initial_benchmark_price || that_present_initial_benchmark_price) {
      if (!(this_present_initial_benchmark_price && that_present_initial_benchmark_price))
        return false;
      if (this.initial_benchmark_price != that.initial_benchmark_price)
        return false;
    }

    boolean this_present_previous_benchmark_price = true && this.isSetPrevious_benchmark_price();
    boolean that_present_previous_benchmark_price = true && that.isSetPrevious_benchmark_price();
    if (this_present_previous_benchmark_price || that_present_previous_benchmark_price) {
      if (!(this_present_previous_benchmark_price && that_present_previous_benchmark_price))
        return false;
      if (this.previous_benchmark_price != that.previous_benchmark_price)
        return false;
    }

    boolean this_present_current_benchmark_price = true && this.isSetCurrent_benchmark_price();
    boolean that_present_current_benchmark_price = true && that.isSetCurrent_benchmark_price();
    if (this_present_current_benchmark_price || that_present_current_benchmark_price) {
      if (!(this_present_current_benchmark_price && that_present_current_benchmark_price))
        return false;
      if (this.current_benchmark_price != that.current_benchmark_price)
        return false;
    }

    boolean this_present_pre_total_return = true && this.isSetPre_total_return();
    boolean that_present_pre_total_return = true && that.isSetPre_total_return();
    if (this_present_pre_total_return || that_present_pre_total_return) {
      if (!(this_present_pre_total_return && that_present_pre_total_return))
        return false;
      if (this.pre_total_return != that.pre_total_return)
        return false;
    }

    boolean this_present_total_commission = true && this.isSetTotal_commission();
    boolean that_present_total_commission = true && that.isSetTotal_commission();
    if (this_present_total_commission || that_present_total_commission) {
      if (!(this_present_total_commission && that_present_total_commission))
        return false;
      if (this.total_commission != that.total_commission)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStarting_cash()) ? 131071 : 524287);
    if (isSetStarting_cash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(starting_cash);

    hashCode = hashCode * 8191 + ((isSetCash()) ? 131071 : 524287);
    if (isSetCash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cash);

    hashCode = hashCode * 8191 + ((isSetTotal_returns()) ? 131071 : 524287);
    if (isSetTotal_returns())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_returns);

    hashCode = hashCode * 8191 + ((isSetDaily_returns()) ? 131071 : 524287);
    if (isSetDaily_returns())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(daily_returns);

    hashCode = hashCode * 8191 + ((isSetMarket_value()) ? 131071 : 524287);
    if (isSetMarket_value())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(market_value);

    hashCode = hashCode * 8191 + ((isSetPortfolio_value()) ? 131071 : 524287);
    if (isSetPortfolio_value())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(portfolio_value);

    hashCode = hashCode * 8191 + ((isSetToday_pnl()) ? 131071 : 524287);
    if (isSetToday_pnl())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(today_pnl);

    hashCode = hashCode * 8191 + ((isSetPnl()) ? 131071 : 524287);
    if (isSetPnl())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pnl);

    hashCode = hashCode * 8191 + ((isSetStart_date()) ? 131071 : 524287);
    if (isSetStart_date())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(start_date);

    hashCode = hashCode * 8191 + ((isSetAnnualized_returns()) ? 131071 : 524287);
    if (isSetAnnualized_returns())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(annualized_returns);

    hashCode = hashCode * 8191 + ((isSetDividend_receivable()) ? 131071 : 524287);
    if (isSetDividend_receivable())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dividend_receivable);

    hashCode = hashCode * 8191 + ((isSetPrevious_portfolio_value()) ? 131071 : 524287);
    if (isSetPrevious_portfolio_value())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(previous_portfolio_value);

    hashCode = hashCode * 8191 + ((isSetBenchmark_daily_return()) ? 131071 : 524287);
    if (isSetBenchmark_daily_return())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(benchmark_daily_return);

    hashCode = hashCode * 8191 + ((isSetYear_benchmark_percent()) ? 131071 : 524287);
    if (isSetYear_benchmark_percent())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(year_benchmark_percent);

    hashCode = hashCode * 8191 + ((isSetBenchmark_percent()) ? 131071 : 524287);
    if (isSetBenchmark_percent())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(benchmark_percent);

    hashCode = hashCode * 8191 + ((isSetInitial_benchmark_price()) ? 131071 : 524287);
    if (isSetInitial_benchmark_price())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(initial_benchmark_price);

    hashCode = hashCode * 8191 + ((isSetPrevious_benchmark_price()) ? 131071 : 524287);
    if (isSetPrevious_benchmark_price())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(previous_benchmark_price);

    hashCode = hashCode * 8191 + ((isSetCurrent_benchmark_price()) ? 131071 : 524287);
    if (isSetCurrent_benchmark_price())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(current_benchmark_price);

    hashCode = hashCode * 8191 + ((isSetPre_total_return()) ? 131071 : 524287);
    if (isSetPre_total_return())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pre_total_return);

    hashCode = hashCode * 8191 + ((isSetTotal_commission()) ? 131071 : 524287);
    if (isSetTotal_commission())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_commission);

    return hashCode;
  }

  @Override
  public int compareTo(TPortfolio other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStarting_cash()).compareTo(other.isSetStarting_cash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarting_cash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starting_cash, other.starting_cash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCash()).compareTo(other.isSetCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cash, other.cash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_returns()).compareTo(other.isSetTotal_returns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_returns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_returns, other.total_returns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDaily_returns()).compareTo(other.isSetDaily_returns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDaily_returns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.daily_returns, other.daily_returns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarket_value()).compareTo(other.isSetMarket_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarket_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.market_value, other.market_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPortfolio_value()).compareTo(other.isSetPortfolio_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortfolio_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portfolio_value, other.portfolio_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToday_pnl()).compareTo(other.isSetToday_pnl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToday_pnl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.today_pnl, other.today_pnl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPnl()).compareTo(other.isSetPnl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPnl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pnl, other.pnl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_date()).compareTo(other.isSetStart_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_date, other.start_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnualized_returns()).compareTo(other.isSetAnnualized_returns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnualized_returns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annualized_returns, other.annualized_returns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDividend_receivable()).compareTo(other.isSetDividend_receivable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDividend_receivable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dividend_receivable, other.dividend_receivable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrevious_portfolio_value()).compareTo(other.isSetPrevious_portfolio_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrevious_portfolio_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previous_portfolio_value, other.previous_portfolio_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBenchmark_daily_return()).compareTo(other.isSetBenchmark_daily_return());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBenchmark_daily_return()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.benchmark_daily_return, other.benchmark_daily_return);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear_benchmark_percent()).compareTo(other.isSetYear_benchmark_percent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear_benchmark_percent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year_benchmark_percent, other.year_benchmark_percent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBenchmark_percent()).compareTo(other.isSetBenchmark_percent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBenchmark_percent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.benchmark_percent, other.benchmark_percent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitial_benchmark_price()).compareTo(other.isSetInitial_benchmark_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitial_benchmark_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initial_benchmark_price, other.initial_benchmark_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrevious_benchmark_price()).compareTo(other.isSetPrevious_benchmark_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrevious_benchmark_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previous_benchmark_price, other.previous_benchmark_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrent_benchmark_price()).compareTo(other.isSetCurrent_benchmark_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_benchmark_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_benchmark_price, other.current_benchmark_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPre_total_return()).compareTo(other.isSetPre_total_return());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPre_total_return()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pre_total_return, other.pre_total_return);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_commission()).compareTo(other.isSetTotal_commission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_commission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_commission, other.total_commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPortfolio(");
    boolean first = true;

    if (isSetStarting_cash()) {
      sb.append("starting_cash:");
      sb.append(this.starting_cash);
      first = false;
    }
    if (isSetCash()) {
      if (!first) sb.append(", ");
      sb.append("cash:");
      sb.append(this.cash);
      first = false;
    }
    if (isSetTotal_returns()) {
      if (!first) sb.append(", ");
      sb.append("total_returns:");
      sb.append(this.total_returns);
      first = false;
    }
    if (isSetDaily_returns()) {
      if (!first) sb.append(", ");
      sb.append("daily_returns:");
      sb.append(this.daily_returns);
      first = false;
    }
    if (isSetMarket_value()) {
      if (!first) sb.append(", ");
      sb.append("market_value:");
      sb.append(this.market_value);
      first = false;
    }
    if (isSetPortfolio_value()) {
      if (!first) sb.append(", ");
      sb.append("portfolio_value:");
      sb.append(this.portfolio_value);
      first = false;
    }
    if (isSetToday_pnl()) {
      if (!first) sb.append(", ");
      sb.append("today_pnl:");
      sb.append(this.today_pnl);
      first = false;
    }
    if (isSetPnl()) {
      if (!first) sb.append(", ");
      sb.append("pnl:");
      sb.append(this.pnl);
      first = false;
    }
    if (isSetStart_date()) {
      if (!first) sb.append(", ");
      sb.append("start_date:");
      sb.append(this.start_date);
      first = false;
    }
    if (isSetAnnualized_returns()) {
      if (!first) sb.append(", ");
      sb.append("annualized_returns:");
      sb.append(this.annualized_returns);
      first = false;
    }
    if (isSetDividend_receivable()) {
      if (!first) sb.append(", ");
      sb.append("dividend_receivable:");
      sb.append(this.dividend_receivable);
      first = false;
    }
    if (isSetPrevious_portfolio_value()) {
      if (!first) sb.append(", ");
      sb.append("previous_portfolio_value:");
      sb.append(this.previous_portfolio_value);
      first = false;
    }
    if (isSetBenchmark_daily_return()) {
      if (!first) sb.append(", ");
      sb.append("benchmark_daily_return:");
      sb.append(this.benchmark_daily_return);
      first = false;
    }
    if (isSetYear_benchmark_percent()) {
      if (!first) sb.append(", ");
      sb.append("year_benchmark_percent:");
      sb.append(this.year_benchmark_percent);
      first = false;
    }
    if (isSetBenchmark_percent()) {
      if (!first) sb.append(", ");
      sb.append("benchmark_percent:");
      sb.append(this.benchmark_percent);
      first = false;
    }
    if (isSetInitial_benchmark_price()) {
      if (!first) sb.append(", ");
      sb.append("initial_benchmark_price:");
      sb.append(this.initial_benchmark_price);
      first = false;
    }
    if (isSetPrevious_benchmark_price()) {
      if (!first) sb.append(", ");
      sb.append("previous_benchmark_price:");
      sb.append(this.previous_benchmark_price);
      first = false;
    }
    if (isSetCurrent_benchmark_price()) {
      if (!first) sb.append(", ");
      sb.append("current_benchmark_price:");
      sb.append(this.current_benchmark_price);
      first = false;
    }
    if (isSetPre_total_return()) {
      if (!first) sb.append(", ");
      sb.append("pre_total_return:");
      sb.append(this.pre_total_return);
      first = false;
    }
    if (isSetTotal_commission()) {
      if (!first) sb.append(", ");
      sb.append("total_commission:");
      sb.append(this.total_commission);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPortfolioStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPortfolioStandardScheme getScheme() {
      return new TPortfolioStandardScheme();
    }
  }

  private static class TPortfolioStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPortfolio> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPortfolio struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STARTING_CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.starting_cash = iprot.readDouble();
              struct.setStarting_cashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cash = iprot.readDouble();
              struct.setCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_RETURNS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total_returns = iprot.readDouble();
              struct.setTotal_returnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DAILY_RETURNS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.daily_returns = iprot.readDouble();
              struct.setDaily_returnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MARKET_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.market_value = iprot.readDouble();
              struct.setMarket_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PORTFOLIO_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.portfolio_value = iprot.readDouble();
              struct.setPortfolio_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TODAY_PNL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.today_pnl = iprot.readDouble();
              struct.setToday_pnlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PNL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pnl = iprot.readDouble();
              struct.setPnlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.start_date = iprot.readDouble();
              struct.setStart_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ANNUALIZED_RETURNS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.annualized_returns = iprot.readDouble();
              struct.setAnnualized_returnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DIVIDEND_RECEIVABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dividend_receivable = iprot.readDouble();
              struct.setDividend_receivableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PREVIOUS_PORTFOLIO_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.previous_portfolio_value = iprot.readDouble();
              struct.setPrevious_portfolio_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BENCHMARK_DAILY_RETURN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.benchmark_daily_return = iprot.readDouble();
              struct.setBenchmark_daily_returnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // YEAR_BENCHMARK_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.year_benchmark_percent = iprot.readDouble();
              struct.setYear_benchmark_percentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BENCHMARK_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.benchmark_percent = iprot.readDouble();
              struct.setBenchmark_percentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // INITIAL_BENCHMARK_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.initial_benchmark_price = iprot.readDouble();
              struct.setInitial_benchmark_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PREVIOUS_BENCHMARK_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.previous_benchmark_price = iprot.readDouble();
              struct.setPrevious_benchmark_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CURRENT_BENCHMARK_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.current_benchmark_price = iprot.readDouble();
              struct.setCurrent_benchmark_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PRE_TOTAL_RETURN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pre_total_return = iprot.readDouble();
              struct.setPre_total_returnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TOTAL_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total_commission = iprot.readDouble();
              struct.setTotal_commissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPortfolio struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetStarting_cash()) {
        oprot.writeFieldBegin(STARTING_CASH_FIELD_DESC);
        oprot.writeDouble(struct.starting_cash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCash()) {
        oprot.writeFieldBegin(CASH_FIELD_DESC);
        oprot.writeDouble(struct.cash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotal_returns()) {
        oprot.writeFieldBegin(TOTAL_RETURNS_FIELD_DESC);
        oprot.writeDouble(struct.total_returns);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDaily_returns()) {
        oprot.writeFieldBegin(DAILY_RETURNS_FIELD_DESC);
        oprot.writeDouble(struct.daily_returns);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMarket_value()) {
        oprot.writeFieldBegin(MARKET_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.market_value);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPortfolio_value()) {
        oprot.writeFieldBegin(PORTFOLIO_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.portfolio_value);
        oprot.writeFieldEnd();
      }
      if (struct.isSetToday_pnl()) {
        oprot.writeFieldBegin(TODAY_PNL_FIELD_DESC);
        oprot.writeDouble(struct.today_pnl);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPnl()) {
        oprot.writeFieldBegin(PNL_FIELD_DESC);
        oprot.writeDouble(struct.pnl);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStart_date()) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeDouble(struct.start_date);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAnnualized_returns()) {
        oprot.writeFieldBegin(ANNUALIZED_RETURNS_FIELD_DESC);
        oprot.writeDouble(struct.annualized_returns);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDividend_receivable()) {
        oprot.writeFieldBegin(DIVIDEND_RECEIVABLE_FIELD_DESC);
        oprot.writeDouble(struct.dividend_receivable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrevious_portfolio_value()) {
        oprot.writeFieldBegin(PREVIOUS_PORTFOLIO_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.previous_portfolio_value);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBenchmark_daily_return()) {
        oprot.writeFieldBegin(BENCHMARK_DAILY_RETURN_FIELD_DESC);
        oprot.writeDouble(struct.benchmark_daily_return);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYear_benchmark_percent()) {
        oprot.writeFieldBegin(YEAR_BENCHMARK_PERCENT_FIELD_DESC);
        oprot.writeDouble(struct.year_benchmark_percent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBenchmark_percent()) {
        oprot.writeFieldBegin(BENCHMARK_PERCENT_FIELD_DESC);
        oprot.writeDouble(struct.benchmark_percent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInitial_benchmark_price()) {
        oprot.writeFieldBegin(INITIAL_BENCHMARK_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.initial_benchmark_price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrevious_benchmark_price()) {
        oprot.writeFieldBegin(PREVIOUS_BENCHMARK_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.previous_benchmark_price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurrent_benchmark_price()) {
        oprot.writeFieldBegin(CURRENT_BENCHMARK_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.current_benchmark_price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPre_total_return()) {
        oprot.writeFieldBegin(PRE_TOTAL_RETURN_FIELD_DESC);
        oprot.writeDouble(struct.pre_total_return);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotal_commission()) {
        oprot.writeFieldBegin(TOTAL_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.total_commission);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPortfolioTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPortfolioTupleScheme getScheme() {
      return new TPortfolioTupleScheme();
    }
  }

  private static class TPortfolioTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPortfolio> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPortfolio struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStarting_cash()) {
        optionals.set(0);
      }
      if (struct.isSetCash()) {
        optionals.set(1);
      }
      if (struct.isSetTotal_returns()) {
        optionals.set(2);
      }
      if (struct.isSetDaily_returns()) {
        optionals.set(3);
      }
      if (struct.isSetMarket_value()) {
        optionals.set(4);
      }
      if (struct.isSetPortfolio_value()) {
        optionals.set(5);
      }
      if (struct.isSetToday_pnl()) {
        optionals.set(6);
      }
      if (struct.isSetPnl()) {
        optionals.set(7);
      }
      if (struct.isSetStart_date()) {
        optionals.set(8);
      }
      if (struct.isSetAnnualized_returns()) {
        optionals.set(9);
      }
      if (struct.isSetDividend_receivable()) {
        optionals.set(10);
      }
      if (struct.isSetPrevious_portfolio_value()) {
        optionals.set(11);
      }
      if (struct.isSetBenchmark_daily_return()) {
        optionals.set(12);
      }
      if (struct.isSetYear_benchmark_percent()) {
        optionals.set(13);
      }
      if (struct.isSetBenchmark_percent()) {
        optionals.set(14);
      }
      if (struct.isSetInitial_benchmark_price()) {
        optionals.set(15);
      }
      if (struct.isSetPrevious_benchmark_price()) {
        optionals.set(16);
      }
      if (struct.isSetCurrent_benchmark_price()) {
        optionals.set(17);
      }
      if (struct.isSetPre_total_return()) {
        optionals.set(18);
      }
      if (struct.isSetTotal_commission()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetStarting_cash()) {
        oprot.writeDouble(struct.starting_cash);
      }
      if (struct.isSetCash()) {
        oprot.writeDouble(struct.cash);
      }
      if (struct.isSetTotal_returns()) {
        oprot.writeDouble(struct.total_returns);
      }
      if (struct.isSetDaily_returns()) {
        oprot.writeDouble(struct.daily_returns);
      }
      if (struct.isSetMarket_value()) {
        oprot.writeDouble(struct.market_value);
      }
      if (struct.isSetPortfolio_value()) {
        oprot.writeDouble(struct.portfolio_value);
      }
      if (struct.isSetToday_pnl()) {
        oprot.writeDouble(struct.today_pnl);
      }
      if (struct.isSetPnl()) {
        oprot.writeDouble(struct.pnl);
      }
      if (struct.isSetStart_date()) {
        oprot.writeDouble(struct.start_date);
      }
      if (struct.isSetAnnualized_returns()) {
        oprot.writeDouble(struct.annualized_returns);
      }
      if (struct.isSetDividend_receivable()) {
        oprot.writeDouble(struct.dividend_receivable);
      }
      if (struct.isSetPrevious_portfolio_value()) {
        oprot.writeDouble(struct.previous_portfolio_value);
      }
      if (struct.isSetBenchmark_daily_return()) {
        oprot.writeDouble(struct.benchmark_daily_return);
      }
      if (struct.isSetYear_benchmark_percent()) {
        oprot.writeDouble(struct.year_benchmark_percent);
      }
      if (struct.isSetBenchmark_percent()) {
        oprot.writeDouble(struct.benchmark_percent);
      }
      if (struct.isSetInitial_benchmark_price()) {
        oprot.writeDouble(struct.initial_benchmark_price);
      }
      if (struct.isSetPrevious_benchmark_price()) {
        oprot.writeDouble(struct.previous_benchmark_price);
      }
      if (struct.isSetCurrent_benchmark_price()) {
        oprot.writeDouble(struct.current_benchmark_price);
      }
      if (struct.isSetPre_total_return()) {
        oprot.writeDouble(struct.pre_total_return);
      }
      if (struct.isSetTotal_commission()) {
        oprot.writeDouble(struct.total_commission);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPortfolio struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.starting_cash = iprot.readDouble();
        struct.setStarting_cashIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cash = iprot.readDouble();
        struct.setCashIsSet(true);
      }
      if (incoming.get(2)) {
        struct.total_returns = iprot.readDouble();
        struct.setTotal_returnsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.daily_returns = iprot.readDouble();
        struct.setDaily_returnsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.market_value = iprot.readDouble();
        struct.setMarket_valueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.portfolio_value = iprot.readDouble();
        struct.setPortfolio_valueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.today_pnl = iprot.readDouble();
        struct.setToday_pnlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pnl = iprot.readDouble();
        struct.setPnlIsSet(true);
      }
      if (incoming.get(8)) {
        struct.start_date = iprot.readDouble();
        struct.setStart_dateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.annualized_returns = iprot.readDouble();
        struct.setAnnualized_returnsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dividend_receivable = iprot.readDouble();
        struct.setDividend_receivableIsSet(true);
      }
      if (incoming.get(11)) {
        struct.previous_portfolio_value = iprot.readDouble();
        struct.setPrevious_portfolio_valueIsSet(true);
      }
      if (incoming.get(12)) {
        struct.benchmark_daily_return = iprot.readDouble();
        struct.setBenchmark_daily_returnIsSet(true);
      }
      if (incoming.get(13)) {
        struct.year_benchmark_percent = iprot.readDouble();
        struct.setYear_benchmark_percentIsSet(true);
      }
      if (incoming.get(14)) {
        struct.benchmark_percent = iprot.readDouble();
        struct.setBenchmark_percentIsSet(true);
      }
      if (incoming.get(15)) {
        struct.initial_benchmark_price = iprot.readDouble();
        struct.setInitial_benchmark_priceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.previous_benchmark_price = iprot.readDouble();
        struct.setPrevious_benchmark_priceIsSet(true);
      }
      if (incoming.get(17)) {
        struct.current_benchmark_price = iprot.readDouble();
        struct.setCurrent_benchmark_priceIsSet(true);
      }
      if (incoming.get(18)) {
        struct.pre_total_return = iprot.readDouble();
        struct.setPre_total_returnIsSet(true);
      }
      if (incoming.get(19)) {
        struct.total_commission = iprot.readDouble();
        struct.setTotal_commissionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

