/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jd.quant.core.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-21")
public class TQuantTaskRequest implements org.apache.thrift.TBase<TQuantTaskRequest, TQuantTaskRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TQuantTaskRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQuantTaskRequest");

  private static final org.apache.thrift.protocol.TField USER_PIN_FIELD_DESC = new org.apache.thrift.protocol.TField("user_pin", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_date", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("end_date", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RUN_FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("run_frequency", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("request_time", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField RUN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("run_type", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_FIRST_RUN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_first_run", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TQuantTaskRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TQuantTaskRequestTupleSchemeFactory();

  public String user_pin; // optional
  public long strategy_id; // optional
  public String start_date; // optional
  public String end_date; // optional
  public String run_frequency; // optional
  public long request_time; // optional
  public int run_type; // optional
  public boolean is_first_run; // optional
  public String uuid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_PIN((short)1, "user_pin"),
    STRATEGY_ID((short)2, "strategy_id"),
    START_DATE((short)3, "start_date"),
    END_DATE((short)4, "end_date"),
    RUN_FREQUENCY((short)5, "run_frequency"),
    REQUEST_TIME((short)6, "request_time"),
    RUN_TYPE((short)7, "run_type"),
    IS_FIRST_RUN((short)8, "is_first_run"),
    UUID((short)9, "uuid");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_PIN
          return USER_PIN;
        case 2: // STRATEGY_ID
          return STRATEGY_ID;
        case 3: // START_DATE
          return START_DATE;
        case 4: // END_DATE
          return END_DATE;
        case 5: // RUN_FREQUENCY
          return RUN_FREQUENCY;
        case 6: // REQUEST_TIME
          return REQUEST_TIME;
        case 7: // RUN_TYPE
          return RUN_TYPE;
        case 8: // IS_FIRST_RUN
          return IS_FIRST_RUN;
        case 9: // UUID
          return UUID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STRATEGY_ID_ISSET_ID = 0;
  private static final int __REQUEST_TIME_ISSET_ID = 1;
  private static final int __RUN_TYPE_ISSET_ID = 2;
  private static final int __IS_FIRST_RUN_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_PIN,_Fields.STRATEGY_ID,_Fields.START_DATE,_Fields.END_DATE,_Fields.RUN_FREQUENCY,_Fields.REQUEST_TIME,_Fields.RUN_TYPE,_Fields.IS_FIRST_RUN,_Fields.UUID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_PIN, new org.apache.thrift.meta_data.FieldMetaData("user_pin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategy_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("start_date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("end_date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUN_FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("run_frequency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_TIME, new org.apache.thrift.meta_data.FieldMetaData("request_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("run_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_FIRST_RUN, new org.apache.thrift.meta_data.FieldMetaData("is_first_run", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQuantTaskRequest.class, metaDataMap);
  }

  public TQuantTaskRequest() {
    this.is_first_run = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQuantTaskRequest(TQuantTaskRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUser_pin()) {
      this.user_pin = other.user_pin;
    }
    this.strategy_id = other.strategy_id;
    if (other.isSetStart_date()) {
      this.start_date = other.start_date;
    }
    if (other.isSetEnd_date()) {
      this.end_date = other.end_date;
    }
    if (other.isSetRun_frequency()) {
      this.run_frequency = other.run_frequency;
    }
    this.request_time = other.request_time;
    this.run_type = other.run_type;
    this.is_first_run = other.is_first_run;
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
  }

  public TQuantTaskRequest deepCopy() {
    return new TQuantTaskRequest(this);
  }

  @Override
  public void clear() {
    this.user_pin = null;
    setStrategy_idIsSet(false);
    this.strategy_id = 0;
    this.start_date = null;
    this.end_date = null;
    this.run_frequency = null;
    setRequest_timeIsSet(false);
    this.request_time = 0;
    setRun_typeIsSet(false);
    this.run_type = 0;
    this.is_first_run = false;

    this.uuid = null;
  }

  public String getUser_pin() {
    return this.user_pin;
  }

  public TQuantTaskRequest setUser_pin(String user_pin) {
    this.user_pin = user_pin;
    return this;
  }

  public void unsetUser_pin() {
    this.user_pin = null;
  }

  /** Returns true if field user_pin is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_pin() {
    return this.user_pin != null;
  }

  public void setUser_pinIsSet(boolean value) {
    if (!value) {
      this.user_pin = null;
    }
  }

  public long getStrategy_id() {
    return this.strategy_id;
  }

  public TQuantTaskRequest setStrategy_id(long strategy_id) {
    this.strategy_id = strategy_id;
    setStrategy_idIsSet(true);
    return this;
  }

  public void unsetStrategy_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRATEGY_ID_ISSET_ID);
  }

  /** Returns true if field strategy_id is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategy_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRATEGY_ID_ISSET_ID);
  }

  public void setStrategy_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRATEGY_ID_ISSET_ID, value);
  }

  public String getStart_date() {
    return this.start_date;
  }

  public TQuantTaskRequest setStart_date(String start_date) {
    this.start_date = start_date;
    return this;
  }

  public void unsetStart_date() {
    this.start_date = null;
  }

  /** Returns true if field start_date is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_date() {
    return this.start_date != null;
  }

  public void setStart_dateIsSet(boolean value) {
    if (!value) {
      this.start_date = null;
    }
  }

  public String getEnd_date() {
    return this.end_date;
  }

  public TQuantTaskRequest setEnd_date(String end_date) {
    this.end_date = end_date;
    return this;
  }

  public void unsetEnd_date() {
    this.end_date = null;
  }

  /** Returns true if field end_date is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_date() {
    return this.end_date != null;
  }

  public void setEnd_dateIsSet(boolean value) {
    if (!value) {
      this.end_date = null;
    }
  }

  public String getRun_frequency() {
    return this.run_frequency;
  }

  public TQuantTaskRequest setRun_frequency(String run_frequency) {
    this.run_frequency = run_frequency;
    return this;
  }

  public void unsetRun_frequency() {
    this.run_frequency = null;
  }

  /** Returns true if field run_frequency is set (has been assigned a value) and false otherwise */
  public boolean isSetRun_frequency() {
    return this.run_frequency != null;
  }

  public void setRun_frequencyIsSet(boolean value) {
    if (!value) {
      this.run_frequency = null;
    }
  }

  public long getRequest_time() {
    return this.request_time;
  }

  public TQuantTaskRequest setRequest_time(long request_time) {
    this.request_time = request_time;
    setRequest_timeIsSet(true);
    return this;
  }

  public void unsetRequest_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUEST_TIME_ISSET_ID);
  }

  /** Returns true if field request_time is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUEST_TIME_ISSET_ID);
  }

  public void setRequest_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUEST_TIME_ISSET_ID, value);
  }

  public int getRun_type() {
    return this.run_type;
  }

  public TQuantTaskRequest setRun_type(int run_type) {
    this.run_type = run_type;
    setRun_typeIsSet(true);
    return this;
  }

  public void unsetRun_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUN_TYPE_ISSET_ID);
  }

  /** Returns true if field run_type is set (has been assigned a value) and false otherwise */
  public boolean isSetRun_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUN_TYPE_ISSET_ID);
  }

  public void setRun_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUN_TYPE_ISSET_ID, value);
  }

  public boolean isIs_first_run() {
    return this.is_first_run;
  }

  public TQuantTaskRequest setIs_first_run(boolean is_first_run) {
    this.is_first_run = is_first_run;
    setIs_first_runIsSet(true);
    return this;
  }

  public void unsetIs_first_run() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_FIRST_RUN_ISSET_ID);
  }

  /** Returns true if field is_first_run is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_first_run() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_FIRST_RUN_ISSET_ID);
  }

  public void setIs_first_runIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_FIRST_RUN_ISSET_ID, value);
  }

  public String getUuid() {
    return this.uuid;
  }

  public TQuantTaskRequest setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_PIN:
      if (value == null) {
        unsetUser_pin();
      } else {
        setUser_pin((String)value);
      }
      break;

    case STRATEGY_ID:
      if (value == null) {
        unsetStrategy_id();
      } else {
        setStrategy_id((Long)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStart_date();
      } else {
        setStart_date((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEnd_date();
      } else {
        setEnd_date((String)value);
      }
      break;

    case RUN_FREQUENCY:
      if (value == null) {
        unsetRun_frequency();
      } else {
        setRun_frequency((String)value);
      }
      break;

    case REQUEST_TIME:
      if (value == null) {
        unsetRequest_time();
      } else {
        setRequest_time((Long)value);
      }
      break;

    case RUN_TYPE:
      if (value == null) {
        unsetRun_type();
      } else {
        setRun_type((Integer)value);
      }
      break;

    case IS_FIRST_RUN:
      if (value == null) {
        unsetIs_first_run();
      } else {
        setIs_first_run((Boolean)value);
      }
      break;

    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_PIN:
      return getUser_pin();

    case STRATEGY_ID:
      return getStrategy_id();

    case START_DATE:
      return getStart_date();

    case END_DATE:
      return getEnd_date();

    case RUN_FREQUENCY:
      return getRun_frequency();

    case REQUEST_TIME:
      return getRequest_time();

    case RUN_TYPE:
      return getRun_type();

    case IS_FIRST_RUN:
      return isIs_first_run();

    case UUID:
      return getUuid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_PIN:
      return isSetUser_pin();
    case STRATEGY_ID:
      return isSetStrategy_id();
    case START_DATE:
      return isSetStart_date();
    case END_DATE:
      return isSetEnd_date();
    case RUN_FREQUENCY:
      return isSetRun_frequency();
    case REQUEST_TIME:
      return isSetRequest_time();
    case RUN_TYPE:
      return isSetRun_type();
    case IS_FIRST_RUN:
      return isSetIs_first_run();
    case UUID:
      return isSetUuid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQuantTaskRequest)
      return this.equals((TQuantTaskRequest)that);
    return false;
  }

  public boolean equals(TQuantTaskRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_user_pin = true && this.isSetUser_pin();
    boolean that_present_user_pin = true && that.isSetUser_pin();
    if (this_present_user_pin || that_present_user_pin) {
      if (!(this_present_user_pin && that_present_user_pin))
        return false;
      if (!this.user_pin.equals(that.user_pin))
        return false;
    }

    boolean this_present_strategy_id = true && this.isSetStrategy_id();
    boolean that_present_strategy_id = true && that.isSetStrategy_id();
    if (this_present_strategy_id || that_present_strategy_id) {
      if (!(this_present_strategy_id && that_present_strategy_id))
        return false;
      if (this.strategy_id != that.strategy_id)
        return false;
    }

    boolean this_present_start_date = true && this.isSetStart_date();
    boolean that_present_start_date = true && that.isSetStart_date();
    if (this_present_start_date || that_present_start_date) {
      if (!(this_present_start_date && that_present_start_date))
        return false;
      if (!this.start_date.equals(that.start_date))
        return false;
    }

    boolean this_present_end_date = true && this.isSetEnd_date();
    boolean that_present_end_date = true && that.isSetEnd_date();
    if (this_present_end_date || that_present_end_date) {
      if (!(this_present_end_date && that_present_end_date))
        return false;
      if (!this.end_date.equals(that.end_date))
        return false;
    }

    boolean this_present_run_frequency = true && this.isSetRun_frequency();
    boolean that_present_run_frequency = true && that.isSetRun_frequency();
    if (this_present_run_frequency || that_present_run_frequency) {
      if (!(this_present_run_frequency && that_present_run_frequency))
        return false;
      if (!this.run_frequency.equals(that.run_frequency))
        return false;
    }

    boolean this_present_request_time = true && this.isSetRequest_time();
    boolean that_present_request_time = true && that.isSetRequest_time();
    if (this_present_request_time || that_present_request_time) {
      if (!(this_present_request_time && that_present_request_time))
        return false;
      if (this.request_time != that.request_time)
        return false;
    }

    boolean this_present_run_type = true && this.isSetRun_type();
    boolean that_present_run_type = true && that.isSetRun_type();
    if (this_present_run_type || that_present_run_type) {
      if (!(this_present_run_type && that_present_run_type))
        return false;
      if (this.run_type != that.run_type)
        return false;
    }

    boolean this_present_is_first_run = true && this.isSetIs_first_run();
    boolean that_present_is_first_run = true && that.isSetIs_first_run();
    if (this_present_is_first_run || that_present_is_first_run) {
      if (!(this_present_is_first_run && that_present_is_first_run))
        return false;
      if (this.is_first_run != that.is_first_run)
        return false;
    }

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUser_pin()) ? 131071 : 524287);
    if (isSetUser_pin())
      hashCode = hashCode * 8191 + user_pin.hashCode();

    hashCode = hashCode * 8191 + ((isSetStrategy_id()) ? 131071 : 524287);
    if (isSetStrategy_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(strategy_id);

    hashCode = hashCode * 8191 + ((isSetStart_date()) ? 131071 : 524287);
    if (isSetStart_date())
      hashCode = hashCode * 8191 + start_date.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnd_date()) ? 131071 : 524287);
    if (isSetEnd_date())
      hashCode = hashCode * 8191 + end_date.hashCode();

    hashCode = hashCode * 8191 + ((isSetRun_frequency()) ? 131071 : 524287);
    if (isSetRun_frequency())
      hashCode = hashCode * 8191 + run_frequency.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequest_time()) ? 131071 : 524287);
    if (isSetRequest_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(request_time);

    hashCode = hashCode * 8191 + ((isSetRun_type()) ? 131071 : 524287);
    if (isSetRun_type())
      hashCode = hashCode * 8191 + run_type;

    hashCode = hashCode * 8191 + ((isSetIs_first_run()) ? 131071 : 524287);
    if (isSetIs_first_run())
      hashCode = hashCode * 8191 + ((is_first_run) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
    if (isSetUuid())
      hashCode = hashCode * 8191 + uuid.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TQuantTaskRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUser_pin()).compareTo(other.isSetUser_pin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_pin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_pin, other.user_pin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrategy_id()).compareTo(other.isSetStrategy_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategy_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy_id, other.strategy_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_date()).compareTo(other.isSetStart_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_date, other.start_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_date()).compareTo(other.isSetEnd_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_date, other.end_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRun_frequency()).compareTo(other.isSetRun_frequency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRun_frequency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.run_frequency, other.run_frequency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequest_time()).compareTo(other.isSetRequest_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_time, other.request_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRun_type()).compareTo(other.isSetRun_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRun_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.run_type, other.run_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_first_run()).compareTo(other.isSetIs_first_run());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_first_run()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_first_run, other.is_first_run);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQuantTaskRequest(");
    boolean first = true;

    if (isSetUser_pin()) {
      sb.append("user_pin:");
      if (this.user_pin == null) {
        sb.append("null");
      } else {
        sb.append(this.user_pin);
      }
      first = false;
    }
    if (isSetStrategy_id()) {
      if (!first) sb.append(", ");
      sb.append("strategy_id:");
      sb.append(this.strategy_id);
      first = false;
    }
    if (isSetStart_date()) {
      if (!first) sb.append(", ");
      sb.append("start_date:");
      if (this.start_date == null) {
        sb.append("null");
      } else {
        sb.append(this.start_date);
      }
      first = false;
    }
    if (isSetEnd_date()) {
      if (!first) sb.append(", ");
      sb.append("end_date:");
      if (this.end_date == null) {
        sb.append("null");
      } else {
        sb.append(this.end_date);
      }
      first = false;
    }
    if (isSetRun_frequency()) {
      if (!first) sb.append(", ");
      sb.append("run_frequency:");
      if (this.run_frequency == null) {
        sb.append("null");
      } else {
        sb.append(this.run_frequency);
      }
      first = false;
    }
    if (isSetRequest_time()) {
      if (!first) sb.append(", ");
      sb.append("request_time:");
      sb.append(this.request_time);
      first = false;
    }
    if (isSetRun_type()) {
      if (!first) sb.append(", ");
      sb.append("run_type:");
      sb.append(this.run_type);
      first = false;
    }
    if (isSetIs_first_run()) {
      if (!first) sb.append(", ");
      sb.append("is_first_run:");
      sb.append(this.is_first_run);
      first = false;
    }
    if (isSetUuid()) {
      if (!first) sb.append(", ");
      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQuantTaskRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQuantTaskRequestStandardScheme getScheme() {
      return new TQuantTaskRequestStandardScheme();
    }
  }

  private static class TQuantTaskRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TQuantTaskRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQuantTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_PIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_pin = iprot.readString();
              struct.setUser_pinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRATEGY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.strategy_id = iprot.readI64();
              struct.setStrategy_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.start_date = iprot.readString();
              struct.setStart_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.end_date = iprot.readString();
              struct.setEnd_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RUN_FREQUENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.run_frequency = iprot.readString();
              struct.setRun_frequencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.request_time = iprot.readI64();
              struct.setRequest_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RUN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.run_type = iprot.readI32();
              struct.setRun_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_FIRST_RUN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_first_run = iprot.readBool();
              struct.setIs_first_runIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQuantTaskRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.user_pin != null) {
        if (struct.isSetUser_pin()) {
          oprot.writeFieldBegin(USER_PIN_FIELD_DESC);
          oprot.writeString(struct.user_pin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStrategy_id()) {
        oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
        oprot.writeI64(struct.strategy_id);
        oprot.writeFieldEnd();
      }
      if (struct.start_date != null) {
        if (struct.isSetStart_date()) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          oprot.writeString(struct.start_date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.end_date != null) {
        if (struct.isSetEnd_date()) {
          oprot.writeFieldBegin(END_DATE_FIELD_DESC);
          oprot.writeString(struct.end_date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.run_frequency != null) {
        if (struct.isSetRun_frequency()) {
          oprot.writeFieldBegin(RUN_FREQUENCY_FIELD_DESC);
          oprot.writeString(struct.run_frequency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRequest_time()) {
        oprot.writeFieldBegin(REQUEST_TIME_FIELD_DESC);
        oprot.writeI64(struct.request_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRun_type()) {
        oprot.writeFieldBegin(RUN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.run_type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_first_run()) {
        oprot.writeFieldBegin(IS_FIRST_RUN_FIELD_DESC);
        oprot.writeBool(struct.is_first_run);
        oprot.writeFieldEnd();
      }
      if (struct.uuid != null) {
        if (struct.isSetUuid()) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQuantTaskRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQuantTaskRequestTupleScheme getScheme() {
      return new TQuantTaskRequestTupleScheme();
    }
  }

  private static class TQuantTaskRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TQuantTaskRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQuantTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUser_pin()) {
        optionals.set(0);
      }
      if (struct.isSetStrategy_id()) {
        optionals.set(1);
      }
      if (struct.isSetStart_date()) {
        optionals.set(2);
      }
      if (struct.isSetEnd_date()) {
        optionals.set(3);
      }
      if (struct.isSetRun_frequency()) {
        optionals.set(4);
      }
      if (struct.isSetRequest_time()) {
        optionals.set(5);
      }
      if (struct.isSetRun_type()) {
        optionals.set(6);
      }
      if (struct.isSetIs_first_run()) {
        optionals.set(7);
      }
      if (struct.isSetUuid()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUser_pin()) {
        oprot.writeString(struct.user_pin);
      }
      if (struct.isSetStrategy_id()) {
        oprot.writeI64(struct.strategy_id);
      }
      if (struct.isSetStart_date()) {
        oprot.writeString(struct.start_date);
      }
      if (struct.isSetEnd_date()) {
        oprot.writeString(struct.end_date);
      }
      if (struct.isSetRun_frequency()) {
        oprot.writeString(struct.run_frequency);
      }
      if (struct.isSetRequest_time()) {
        oprot.writeI64(struct.request_time);
      }
      if (struct.isSetRun_type()) {
        oprot.writeI32(struct.run_type);
      }
      if (struct.isSetIs_first_run()) {
        oprot.writeBool(struct.is_first_run);
      }
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQuantTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.user_pin = iprot.readString();
        struct.setUser_pinIsSet(true);
      }
      if (incoming.get(1)) {
        struct.strategy_id = iprot.readI64();
        struct.setStrategy_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.start_date = iprot.readString();
        struct.setStart_dateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.end_date = iprot.readString();
        struct.setEnd_dateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.run_frequency = iprot.readString();
        struct.setRun_frequencyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.request_time = iprot.readI64();
        struct.setRequest_timeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.run_type = iprot.readI32();
        struct.setRun_typeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.is_first_run = iprot.readBool();
        struct.setIs_first_runIsSet(true);
      }
      if (incoming.get(8)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

