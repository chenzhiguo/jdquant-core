/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jd.quant.core.domain.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-15")
public class TQuantAddExceptionRequest implements org.apache.thrift.TBase<TQuantAddExceptionRequest, TQuantAddExceptionRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TQuantAddExceptionRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQuantAddExceptionRequest");

  private static final org.apache.thrift.protocol.TField USER_PIN_FIELD_DESC = new org.apache.thrift.protocol.TField("userPin", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("requestTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STRATEGY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyType", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TQuantAddExceptionRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TQuantAddExceptionRequestTupleSchemeFactory();

  public String userPin; // required
  public long strategyId; // required
  public long requestTime; // optional
  public String message; // optional
  public int strategyType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_PIN((short)1, "userPin"),
    STRATEGY_ID((short)2, "strategyId"),
    REQUEST_TIME((short)3, "requestTime"),
    MESSAGE((short)4, "message"),
    STRATEGY_TYPE((short)5, "strategyType");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_PIN
          return USER_PIN;
        case 2: // STRATEGY_ID
          return STRATEGY_ID;
        case 3: // REQUEST_TIME
          return REQUEST_TIME;
        case 4: // MESSAGE
          return MESSAGE;
        case 5: // STRATEGY_TYPE
          return STRATEGY_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STRATEGYID_ISSET_ID = 0;
  private static final int __REQUESTTIME_ISSET_ID = 1;
  private static final int __STRATEGYTYPE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REQUEST_TIME,_Fields.MESSAGE,_Fields.STRATEGY_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_PIN, new org.apache.thrift.meta_data.FieldMetaData("userPin", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_TIME, new org.apache.thrift.meta_data.FieldMetaData("requestTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRATEGY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("strategyType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQuantAddExceptionRequest.class, metaDataMap);
  }

  public TQuantAddExceptionRequest() {
  }

  public TQuantAddExceptionRequest(
    String userPin,
    long strategyId)
  {
    this();
    this.userPin = userPin;
    this.strategyId = strategyId;
    setStrategyIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQuantAddExceptionRequest(TQuantAddExceptionRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserPin()) {
      this.userPin = other.userPin;
    }
    this.strategyId = other.strategyId;
    this.requestTime = other.requestTime;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    this.strategyType = other.strategyType;
  }

  public TQuantAddExceptionRequest deepCopy() {
    return new TQuantAddExceptionRequest(this);
  }

  @Override
  public void clear() {
    this.userPin = null;
    setStrategyIdIsSet(false);
    this.strategyId = 0;
    setRequestTimeIsSet(false);
    this.requestTime = 0;
    this.message = null;
    setStrategyTypeIsSet(false);
    this.strategyType = 0;
  }

  public String getUserPin() {
    return this.userPin;
  }

  public TQuantAddExceptionRequest setUserPin(String userPin) {
    this.userPin = userPin;
    return this;
  }

  public void unsetUserPin() {
    this.userPin = null;
  }

  /** Returns true if field userPin is set (has been assigned a value) and false otherwise */
  public boolean isSetUserPin() {
    return this.userPin != null;
  }

  public void setUserPinIsSet(boolean value) {
    if (!value) {
      this.userPin = null;
    }
  }

  public long getStrategyId() {
    return this.strategyId;
  }

  public TQuantAddExceptionRequest setStrategyId(long strategyId) {
    this.strategyId = strategyId;
    setStrategyIdIsSet(true);
    return this;
  }

  public void unsetStrategyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
  }

  /** Returns true if field strategyId is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
  }

  public void setStrategyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
  }

  public long getRequestTime() {
    return this.requestTime;
  }

  public TQuantAddExceptionRequest setRequestTime(long requestTime) {
    this.requestTime = requestTime;
    setRequestTimeIsSet(true);
    return this;
  }

  public void unsetRequestTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTTIME_ISSET_ID);
  }

  /** Returns true if field requestTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTTIME_ISSET_ID);
  }

  public void setRequestTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTTIME_ISSET_ID, value);
  }

  public String getMessage() {
    return this.message;
  }

  public TQuantAddExceptionRequest setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getStrategyType() {
    return this.strategyType;
  }

  public TQuantAddExceptionRequest setStrategyType(int strategyType) {
    this.strategyType = strategyType;
    setStrategyTypeIsSet(true);
    return this;
  }

  public void unsetStrategyType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRATEGYTYPE_ISSET_ID);
  }

  /** Returns true if field strategyType is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategyType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRATEGYTYPE_ISSET_ID);
  }

  public void setStrategyTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRATEGYTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_PIN:
      if (value == null) {
        unsetUserPin();
      } else {
        setUserPin((String)value);
      }
      break;

    case STRATEGY_ID:
      if (value == null) {
        unsetStrategyId();
      } else {
        setStrategyId((Long)value);
      }
      break;

    case REQUEST_TIME:
      if (value == null) {
        unsetRequestTime();
      } else {
        setRequestTime((Long)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case STRATEGY_TYPE:
      if (value == null) {
        unsetStrategyType();
      } else {
        setStrategyType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_PIN:
      return getUserPin();

    case STRATEGY_ID:
      return getStrategyId();

    case REQUEST_TIME:
      return getRequestTime();

    case MESSAGE:
      return getMessage();

    case STRATEGY_TYPE:
      return getStrategyType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_PIN:
      return isSetUserPin();
    case STRATEGY_ID:
      return isSetStrategyId();
    case REQUEST_TIME:
      return isSetRequestTime();
    case MESSAGE:
      return isSetMessage();
    case STRATEGY_TYPE:
      return isSetStrategyType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQuantAddExceptionRequest)
      return this.equals((TQuantAddExceptionRequest)that);
    return false;
  }

  public boolean equals(TQuantAddExceptionRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userPin = true && this.isSetUserPin();
    boolean that_present_userPin = true && that.isSetUserPin();
    if (this_present_userPin || that_present_userPin) {
      if (!(this_present_userPin && that_present_userPin))
        return false;
      if (!this.userPin.equals(that.userPin))
        return false;
    }

    boolean this_present_strategyId = true;
    boolean that_present_strategyId = true;
    if (this_present_strategyId || that_present_strategyId) {
      if (!(this_present_strategyId && that_present_strategyId))
        return false;
      if (this.strategyId != that.strategyId)
        return false;
    }

    boolean this_present_requestTime = true && this.isSetRequestTime();
    boolean that_present_requestTime = true && that.isSetRequestTime();
    if (this_present_requestTime || that_present_requestTime) {
      if (!(this_present_requestTime && that_present_requestTime))
        return false;
      if (this.requestTime != that.requestTime)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_strategyType = true && this.isSetStrategyType();
    boolean that_present_strategyType = true && that.isSetStrategyType();
    if (this_present_strategyType || that_present_strategyType) {
      if (!(this_present_strategyType && that_present_strategyType))
        return false;
      if (this.strategyType != that.strategyType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUserPin()) ? 131071 : 524287);
    if (isSetUserPin())
      hashCode = hashCode * 8191 + userPin.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(strategyId);

    hashCode = hashCode * 8191 + ((isSetRequestTime()) ? 131071 : 524287);
    if (isSetRequestTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestTime);

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetStrategyType()) ? 131071 : 524287);
    if (isSetStrategyType())
      hashCode = hashCode * 8191 + strategyType;

    return hashCode;
  }

  @Override
  public int compareTo(TQuantAddExceptionRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserPin()).compareTo(other.isSetUserPin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPin, other.userPin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrategyId()).compareTo(other.isSetStrategyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyId, other.strategyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestTime()).compareTo(other.isSetRequestTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestTime, other.requestTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrategyType()).compareTo(other.isSetStrategyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyType, other.strategyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQuantAddExceptionRequest(");
    boolean first = true;

    sb.append("userPin:");
    if (this.userPin == null) {
      sb.append("null");
    } else {
      sb.append(this.userPin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("strategyId:");
    sb.append(this.strategyId);
    first = false;
    if (isSetRequestTime()) {
      if (!first) sb.append(", ");
      sb.append("requestTime:");
      sb.append(this.requestTime);
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetStrategyType()) {
      if (!first) sb.append(", ");
      sb.append("strategyType:");
      sb.append(this.strategyType);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (userPin == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userPin' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'strategyId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQuantAddExceptionRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQuantAddExceptionRequestStandardScheme getScheme() {
      return new TQuantAddExceptionRequestStandardScheme();
    }
  }

  private static class TQuantAddExceptionRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TQuantAddExceptionRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQuantAddExceptionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_PIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userPin = iprot.readString();
              struct.setUserPinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRATEGY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.strategyId = iprot.readI64();
              struct.setStrategyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestTime = iprot.readI64();
              struct.setRequestTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STRATEGY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.strategyType = iprot.readI32();
              struct.setStrategyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStrategyId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'strategyId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQuantAddExceptionRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userPin != null) {
        oprot.writeFieldBegin(USER_PIN_FIELD_DESC);
        oprot.writeString(struct.userPin);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
      oprot.writeI64(struct.strategyId);
      oprot.writeFieldEnd();
      if (struct.isSetRequestTime()) {
        oprot.writeFieldBegin(REQUEST_TIME_FIELD_DESC);
        oprot.writeI64(struct.requestTime);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStrategyType()) {
        oprot.writeFieldBegin(STRATEGY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.strategyType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQuantAddExceptionRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQuantAddExceptionRequestTupleScheme getScheme() {
      return new TQuantAddExceptionRequestTupleScheme();
    }
  }

  private static class TQuantAddExceptionRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TQuantAddExceptionRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQuantAddExceptionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.userPin);
      oprot.writeI64(struct.strategyId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRequestTime()) {
        optionals.set(0);
      }
      if (struct.isSetMessage()) {
        optionals.set(1);
      }
      if (struct.isSetStrategyType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRequestTime()) {
        oprot.writeI64(struct.requestTime);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetStrategyType()) {
        oprot.writeI32(struct.strategyType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQuantAddExceptionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.userPin = iprot.readString();
      struct.setUserPinIsSet(true);
      struct.strategyId = iprot.readI64();
      struct.setStrategyIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.requestTime = iprot.readI64();
        struct.setRequestTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.strategyType = iprot.readI32();
        struct.setStrategyTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

