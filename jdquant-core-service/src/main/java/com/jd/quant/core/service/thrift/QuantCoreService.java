/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jd.quant.core.service.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-15")
public class QuantCoreService {

  /**
   * Quant Core Service
   * 
   */
  public interface Iface {

    /**
     * 策略执行异常反馈
     * 
     * 
     * @param addExceptionRequest
     */
    public com.jd.quant.core.domain.thrift.TQuantCoreResponse addQuantException(com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest addExceptionRequest) throws org.apache.thrift.TException;

    /**
     * 保存策略运行结果（回测）参数为结果
     * 
     * 
     * @param saveResultRequest
     */
    public com.jd.quant.core.domain.thrift.TQuantCoreResponse saveResult(com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest saveResultRequest) throws org.apache.thrift.TException;

    /**
     * 保存策略运行结果（回测）：参数为此刻持仓
     * 
     * 
     * @param saveResultRequest
     */
    public com.jd.quant.core.domain.thrift.TQuantCoreResponse saveResultByInfoPacksForRegression(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest) throws org.apache.thrift.TException;

    /**
     * 保存策略运行结果（模拟）：参数为此刻持仓
     * 
     * 
     * @param saveResultRequest
     */
    public com.jd.quant.core.domain.thrift.TQuantCoreResponse saveResultByInfoPacksForSimulation(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest) throws org.apache.thrift.TException;

    /**
     * 获取持仓信息
     * 
     * 
     * @param taskRequest
     */
    public com.jd.quant.core.domain.thrift.TQuantGetInfoResponse getInfoPacks(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest) throws org.apache.thrift.TException;

    /**
     * 获取策略运行历史结果
     * 
     * 
     * @param taskRequest
     */
    public com.jd.quant.core.domain.thrift.TQuantGetResultResponse getHistoryResult(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addQuantException(com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest addExceptionRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler) throws org.apache.thrift.TException;

    public void saveResult(com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest saveResultRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler) throws org.apache.thrift.TException;

    public void saveResultByInfoPacksForRegression(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler) throws org.apache.thrift.TException;

    public void saveResultByInfoPacksForSimulation(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler) throws org.apache.thrift.TException;

    public void getInfoPacks(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantGetInfoResponse> resultHandler) throws org.apache.thrift.TException;

    public void getHistoryResult(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantGetResultResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse addQuantException(com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest addExceptionRequest) throws org.apache.thrift.TException
    {
      send_addQuantException(addExceptionRequest);
      return recv_addQuantException();
    }

    public void send_addQuantException(com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest addExceptionRequest) throws org.apache.thrift.TException
    {
      addQuantException_args args = new addQuantException_args();
      args.setAddExceptionRequest(addExceptionRequest);
      sendBase("addQuantException", args);
    }

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse recv_addQuantException() throws org.apache.thrift.TException
    {
      addQuantException_result result = new addQuantException_result();
      receiveBase(result, "addQuantException");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addQuantException failed: unknown result");
    }

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse saveResult(com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest saveResultRequest) throws org.apache.thrift.TException
    {
      send_saveResult(saveResultRequest);
      return recv_saveResult();
    }

    public void send_saveResult(com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest saveResultRequest) throws org.apache.thrift.TException
    {
      saveResult_args args = new saveResult_args();
      args.setSaveResultRequest(saveResultRequest);
      sendBase("saveResult", args);
    }

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse recv_saveResult() throws org.apache.thrift.TException
    {
      saveResult_result result = new saveResult_result();
      receiveBase(result, "saveResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveResult failed: unknown result");
    }

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse saveResultByInfoPacksForRegression(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest) throws org.apache.thrift.TException
    {
      send_saveResultByInfoPacksForRegression(saveResultRequest);
      return recv_saveResultByInfoPacksForRegression();
    }

    public void send_saveResultByInfoPacksForRegression(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest) throws org.apache.thrift.TException
    {
      saveResultByInfoPacksForRegression_args args = new saveResultByInfoPacksForRegression_args();
      args.setSaveResultRequest(saveResultRequest);
      sendBase("saveResultByInfoPacksForRegression", args);
    }

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse recv_saveResultByInfoPacksForRegression() throws org.apache.thrift.TException
    {
      saveResultByInfoPacksForRegression_result result = new saveResultByInfoPacksForRegression_result();
      receiveBase(result, "saveResultByInfoPacksForRegression");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveResultByInfoPacksForRegression failed: unknown result");
    }

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse saveResultByInfoPacksForSimulation(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest) throws org.apache.thrift.TException
    {
      send_saveResultByInfoPacksForSimulation(saveResultRequest);
      return recv_saveResultByInfoPacksForSimulation();
    }

    public void send_saveResultByInfoPacksForSimulation(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest) throws org.apache.thrift.TException
    {
      saveResultByInfoPacksForSimulation_args args = new saveResultByInfoPacksForSimulation_args();
      args.setSaveResultRequest(saveResultRequest);
      sendBase("saveResultByInfoPacksForSimulation", args);
    }

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse recv_saveResultByInfoPacksForSimulation() throws org.apache.thrift.TException
    {
      saveResultByInfoPacksForSimulation_result result = new saveResultByInfoPacksForSimulation_result();
      receiveBase(result, "saveResultByInfoPacksForSimulation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveResultByInfoPacksForSimulation failed: unknown result");
    }

    public com.jd.quant.core.domain.thrift.TQuantGetInfoResponse getInfoPacks(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest) throws org.apache.thrift.TException
    {
      send_getInfoPacks(taskRequest);
      return recv_getInfoPacks();
    }

    public void send_getInfoPacks(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest) throws org.apache.thrift.TException
    {
      getInfoPacks_args args = new getInfoPacks_args();
      args.setTaskRequest(taskRequest);
      sendBase("getInfoPacks", args);
    }

    public com.jd.quant.core.domain.thrift.TQuantGetInfoResponse recv_getInfoPacks() throws org.apache.thrift.TException
    {
      getInfoPacks_result result = new getInfoPacks_result();
      receiveBase(result, "getInfoPacks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInfoPacks failed: unknown result");
    }

    public com.jd.quant.core.domain.thrift.TQuantGetResultResponse getHistoryResult(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest) throws org.apache.thrift.TException
    {
      send_getHistoryResult(taskRequest);
      return recv_getHistoryResult();
    }

    public void send_getHistoryResult(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest) throws org.apache.thrift.TException
    {
      getHistoryResult_args args = new getHistoryResult_args();
      args.setTaskRequest(taskRequest);
      sendBase("getHistoryResult", args);
    }

    public com.jd.quant.core.domain.thrift.TQuantGetResultResponse recv_getHistoryResult() throws org.apache.thrift.TException
    {
      getHistoryResult_result result = new getHistoryResult_result();
      receiveBase(result, "getHistoryResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHistoryResult failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addQuantException(com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest addExceptionRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addQuantException_call method_call = new addQuantException_call(addExceptionRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addQuantException_call extends org.apache.thrift.async.TAsyncMethodCall<com.jd.quant.core.domain.thrift.TQuantCoreResponse> {
      private com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest addExceptionRequest;
      public addQuantException_call(com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest addExceptionRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.addExceptionRequest = addExceptionRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addQuantException", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addQuantException_args args = new addQuantException_args();
        args.setAddExceptionRequest(addExceptionRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jd.quant.core.domain.thrift.TQuantCoreResponse getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addQuantException();
      }
    }

    public void saveResult(com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest saveResultRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveResult_call method_call = new saveResult_call(saveResultRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveResult_call extends org.apache.thrift.async.TAsyncMethodCall<com.jd.quant.core.domain.thrift.TQuantCoreResponse> {
      private com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest saveResultRequest;
      public saveResult_call(com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest saveResultRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.saveResultRequest = saveResultRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveResult_args args = new saveResult_args();
        args.setSaveResultRequest(saveResultRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jd.quant.core.domain.thrift.TQuantCoreResponse getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveResult();
      }
    }

    public void saveResultByInfoPacksForRegression(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveResultByInfoPacksForRegression_call method_call = new saveResultByInfoPacksForRegression_call(saveResultRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveResultByInfoPacksForRegression_call extends org.apache.thrift.async.TAsyncMethodCall<com.jd.quant.core.domain.thrift.TQuantCoreResponse> {
      private com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest;
      public saveResultByInfoPacksForRegression_call(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.saveResultRequest = saveResultRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveResultByInfoPacksForRegression", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveResultByInfoPacksForRegression_args args = new saveResultByInfoPacksForRegression_args();
        args.setSaveResultRequest(saveResultRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jd.quant.core.domain.thrift.TQuantCoreResponse getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveResultByInfoPacksForRegression();
      }
    }

    public void saveResultByInfoPacksForSimulation(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveResultByInfoPacksForSimulation_call method_call = new saveResultByInfoPacksForSimulation_call(saveResultRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveResultByInfoPacksForSimulation_call extends org.apache.thrift.async.TAsyncMethodCall<com.jd.quant.core.domain.thrift.TQuantCoreResponse> {
      private com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest;
      public saveResultByInfoPacksForSimulation_call(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.saveResultRequest = saveResultRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveResultByInfoPacksForSimulation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveResultByInfoPacksForSimulation_args args = new saveResultByInfoPacksForSimulation_args();
        args.setSaveResultRequest(saveResultRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jd.quant.core.domain.thrift.TQuantCoreResponse getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveResultByInfoPacksForSimulation();
      }
    }

    public void getInfoPacks(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantGetInfoResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInfoPacks_call method_call = new getInfoPacks_call(taskRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInfoPacks_call extends org.apache.thrift.async.TAsyncMethodCall<com.jd.quant.core.domain.thrift.TQuantGetInfoResponse> {
      private com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest;
      public getInfoPacks_call(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantGetInfoResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskRequest = taskRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInfoPacks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInfoPacks_args args = new getInfoPacks_args();
        args.setTaskRequest(taskRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jd.quant.core.domain.thrift.TQuantGetInfoResponse getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInfoPacks();
      }
    }

    public void getHistoryResult(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantGetResultResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHistoryResult_call method_call = new getHistoryResult_call(taskRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHistoryResult_call extends org.apache.thrift.async.TAsyncMethodCall<com.jd.quant.core.domain.thrift.TQuantGetResultResponse> {
      private com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest;
      public getHistoryResult_call(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantGetResultResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskRequest = taskRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHistoryResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHistoryResult_args args = new getHistoryResult_args();
        args.setTaskRequest(taskRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jd.quant.core.domain.thrift.TQuantGetResultResponse getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHistoryResult();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addQuantException", new addQuantException());
      processMap.put("saveResult", new saveResult());
      processMap.put("saveResultByInfoPacksForRegression", new saveResultByInfoPacksForRegression());
      processMap.put("saveResultByInfoPacksForSimulation", new saveResultByInfoPacksForSimulation());
      processMap.put("getInfoPacks", new getInfoPacks());
      processMap.put("getHistoryResult", new getHistoryResult());
      return processMap;
    }

    public static class addQuantException<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addQuantException_args> {
      public addQuantException() {
        super("addQuantException");
      }

      public addQuantException_args getEmptyArgsInstance() {
        return new addQuantException_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addQuantException_result getResult(I iface, addQuantException_args args) throws org.apache.thrift.TException {
        addQuantException_result result = new addQuantException_result();
        result.success = iface.addQuantException(args.addExceptionRequest);
        return result;
      }
    }

    public static class saveResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveResult_args> {
      public saveResult() {
        super("saveResult");
      }

      public saveResult_args getEmptyArgsInstance() {
        return new saveResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveResult_result getResult(I iface, saveResult_args args) throws org.apache.thrift.TException {
        saveResult_result result = new saveResult_result();
        result.success = iface.saveResult(args.saveResultRequest);
        return result;
      }
    }

    public static class saveResultByInfoPacksForRegression<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveResultByInfoPacksForRegression_args> {
      public saveResultByInfoPacksForRegression() {
        super("saveResultByInfoPacksForRegression");
      }

      public saveResultByInfoPacksForRegression_args getEmptyArgsInstance() {
        return new saveResultByInfoPacksForRegression_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveResultByInfoPacksForRegression_result getResult(I iface, saveResultByInfoPacksForRegression_args args) throws org.apache.thrift.TException {
        saveResultByInfoPacksForRegression_result result = new saveResultByInfoPacksForRegression_result();
        result.success = iface.saveResultByInfoPacksForRegression(args.saveResultRequest);
        return result;
      }
    }

    public static class saveResultByInfoPacksForSimulation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveResultByInfoPacksForSimulation_args> {
      public saveResultByInfoPacksForSimulation() {
        super("saveResultByInfoPacksForSimulation");
      }

      public saveResultByInfoPacksForSimulation_args getEmptyArgsInstance() {
        return new saveResultByInfoPacksForSimulation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveResultByInfoPacksForSimulation_result getResult(I iface, saveResultByInfoPacksForSimulation_args args) throws org.apache.thrift.TException {
        saveResultByInfoPacksForSimulation_result result = new saveResultByInfoPacksForSimulation_result();
        result.success = iface.saveResultByInfoPacksForSimulation(args.saveResultRequest);
        return result;
      }
    }

    public static class getInfoPacks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInfoPacks_args> {
      public getInfoPacks() {
        super("getInfoPacks");
      }

      public getInfoPacks_args getEmptyArgsInstance() {
        return new getInfoPacks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInfoPacks_result getResult(I iface, getInfoPacks_args args) throws org.apache.thrift.TException {
        getInfoPacks_result result = new getInfoPacks_result();
        result.success = iface.getInfoPacks(args.taskRequest);
        return result;
      }
    }

    public static class getHistoryResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHistoryResult_args> {
      public getHistoryResult() {
        super("getHistoryResult");
      }

      public getHistoryResult_args getEmptyArgsInstance() {
        return new getHistoryResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHistoryResult_result getResult(I iface, getHistoryResult_args args) throws org.apache.thrift.TException {
        getHistoryResult_result result = new getHistoryResult_result();
        result.success = iface.getHistoryResult(args.taskRequest);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addQuantException", new addQuantException());
      processMap.put("saveResult", new saveResult());
      processMap.put("saveResultByInfoPacksForRegression", new saveResultByInfoPacksForRegression());
      processMap.put("saveResultByInfoPacksForSimulation", new saveResultByInfoPacksForSimulation());
      processMap.put("getInfoPacks", new getInfoPacks());
      processMap.put("getHistoryResult", new getHistoryResult());
      return processMap;
    }

    public static class addQuantException<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addQuantException_args, com.jd.quant.core.domain.thrift.TQuantCoreResponse> {
      public addQuantException() {
        super("addQuantException");
      }

      public addQuantException_args getEmptyArgsInstance() {
        return new addQuantException_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse>() { 
          public void onComplete(com.jd.quant.core.domain.thrift.TQuantCoreResponse o) {
            addQuantException_result result = new addQuantException_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addQuantException_result result = new addQuantException_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addQuantException_args args, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler) throws org.apache.thrift.TException {
        iface.addQuantException(args.addExceptionRequest,resultHandler);
      }
    }

    public static class saveResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveResult_args, com.jd.quant.core.domain.thrift.TQuantCoreResponse> {
      public saveResult() {
        super("saveResult");
      }

      public saveResult_args getEmptyArgsInstance() {
        return new saveResult_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse>() { 
          public void onComplete(com.jd.quant.core.domain.thrift.TQuantCoreResponse o) {
            saveResult_result result = new saveResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveResult_result result = new saveResult_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveResult_args args, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler) throws org.apache.thrift.TException {
        iface.saveResult(args.saveResultRequest,resultHandler);
      }
    }

    public static class saveResultByInfoPacksForRegression<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveResultByInfoPacksForRegression_args, com.jd.quant.core.domain.thrift.TQuantCoreResponse> {
      public saveResultByInfoPacksForRegression() {
        super("saveResultByInfoPacksForRegression");
      }

      public saveResultByInfoPacksForRegression_args getEmptyArgsInstance() {
        return new saveResultByInfoPacksForRegression_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse>() { 
          public void onComplete(com.jd.quant.core.domain.thrift.TQuantCoreResponse o) {
            saveResultByInfoPacksForRegression_result result = new saveResultByInfoPacksForRegression_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveResultByInfoPacksForRegression_result result = new saveResultByInfoPacksForRegression_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveResultByInfoPacksForRegression_args args, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler) throws org.apache.thrift.TException {
        iface.saveResultByInfoPacksForRegression(args.saveResultRequest,resultHandler);
      }
    }

    public static class saveResultByInfoPacksForSimulation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveResultByInfoPacksForSimulation_args, com.jd.quant.core.domain.thrift.TQuantCoreResponse> {
      public saveResultByInfoPacksForSimulation() {
        super("saveResultByInfoPacksForSimulation");
      }

      public saveResultByInfoPacksForSimulation_args getEmptyArgsInstance() {
        return new saveResultByInfoPacksForSimulation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse>() { 
          public void onComplete(com.jd.quant.core.domain.thrift.TQuantCoreResponse o) {
            saveResultByInfoPacksForSimulation_result result = new saveResultByInfoPacksForSimulation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveResultByInfoPacksForSimulation_result result = new saveResultByInfoPacksForSimulation_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveResultByInfoPacksForSimulation_args args, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantCoreResponse> resultHandler) throws org.apache.thrift.TException {
        iface.saveResultByInfoPacksForSimulation(args.saveResultRequest,resultHandler);
      }
    }

    public static class getInfoPacks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInfoPacks_args, com.jd.quant.core.domain.thrift.TQuantGetInfoResponse> {
      public getInfoPacks() {
        super("getInfoPacks");
      }

      public getInfoPacks_args getEmptyArgsInstance() {
        return new getInfoPacks_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantGetInfoResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantGetInfoResponse>() { 
          public void onComplete(com.jd.quant.core.domain.thrift.TQuantGetInfoResponse o) {
            getInfoPacks_result result = new getInfoPacks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getInfoPacks_result result = new getInfoPacks_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getInfoPacks_args args, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantGetInfoResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getInfoPacks(args.taskRequest,resultHandler);
      }
    }

    public static class getHistoryResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHistoryResult_args, com.jd.quant.core.domain.thrift.TQuantGetResultResponse> {
      public getHistoryResult() {
        super("getHistoryResult");
      }

      public getHistoryResult_args getEmptyArgsInstance() {
        return new getHistoryResult_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantGetResultResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantGetResultResponse>() { 
          public void onComplete(com.jd.quant.core.domain.thrift.TQuantGetResultResponse o) {
            getHistoryResult_result result = new getHistoryResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getHistoryResult_result result = new getHistoryResult_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHistoryResult_args args, org.apache.thrift.async.AsyncMethodCallback<com.jd.quant.core.domain.thrift.TQuantGetResultResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getHistoryResult(args.taskRequest,resultHandler);
      }
    }

  }

  public static class addQuantException_args implements org.apache.thrift.TBase<addQuantException_args, addQuantException_args._Fields>, java.io.Serializable, Cloneable, Comparable<addQuantException_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addQuantException_args");

    private static final org.apache.thrift.protocol.TField ADD_EXCEPTION_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("addExceptionRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addQuantException_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addQuantException_argsTupleSchemeFactory();

    public com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest addExceptionRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADD_EXCEPTION_REQUEST((short)1, "addExceptionRequest");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADD_EXCEPTION_REQUEST
            return ADD_EXCEPTION_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADD_EXCEPTION_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("addExceptionRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addQuantException_args.class, metaDataMap);
    }

    public addQuantException_args() {
    }

    public addQuantException_args(
      com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest addExceptionRequest)
    {
      this();
      this.addExceptionRequest = addExceptionRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addQuantException_args(addQuantException_args other) {
      if (other.isSetAddExceptionRequest()) {
        this.addExceptionRequest = new com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest(other.addExceptionRequest);
      }
    }

    public addQuantException_args deepCopy() {
      return new addQuantException_args(this);
    }

    @Override
    public void clear() {
      this.addExceptionRequest = null;
    }

    public com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest getAddExceptionRequest() {
      return this.addExceptionRequest;
    }

    public addQuantException_args setAddExceptionRequest(com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest addExceptionRequest) {
      this.addExceptionRequest = addExceptionRequest;
      return this;
    }

    public void unsetAddExceptionRequest() {
      this.addExceptionRequest = null;
    }

    /** Returns true if field addExceptionRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetAddExceptionRequest() {
      return this.addExceptionRequest != null;
    }

    public void setAddExceptionRequestIsSet(boolean value) {
      if (!value) {
        this.addExceptionRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADD_EXCEPTION_REQUEST:
        if (value == null) {
          unsetAddExceptionRequest();
        } else {
          setAddExceptionRequest((com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADD_EXCEPTION_REQUEST:
        return getAddExceptionRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADD_EXCEPTION_REQUEST:
        return isSetAddExceptionRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addQuantException_args)
        return this.equals((addQuantException_args)that);
      return false;
    }

    public boolean equals(addQuantException_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_addExceptionRequest = true && this.isSetAddExceptionRequest();
      boolean that_present_addExceptionRequest = true && that.isSetAddExceptionRequest();
      if (this_present_addExceptionRequest || that_present_addExceptionRequest) {
        if (!(this_present_addExceptionRequest && that_present_addExceptionRequest))
          return false;
        if (!this.addExceptionRequest.equals(that.addExceptionRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAddExceptionRequest()) ? 131071 : 524287);
      if (isSetAddExceptionRequest())
        hashCode = hashCode * 8191 + addExceptionRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addQuantException_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAddExceptionRequest()).compareTo(other.isSetAddExceptionRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddExceptionRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addExceptionRequest, other.addExceptionRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addQuantException_args(");
      boolean first = true;

      sb.append("addExceptionRequest:");
      if (this.addExceptionRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.addExceptionRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (addExceptionRequest != null) {
        addExceptionRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addQuantException_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addQuantException_argsStandardScheme getScheme() {
        return new addQuantException_argsStandardScheme();
      }
    }

    private static class addQuantException_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addQuantException_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addQuantException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADD_EXCEPTION_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.addExceptionRequest = new com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest();
                struct.addExceptionRequest.read(iprot);
                struct.setAddExceptionRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addQuantException_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.addExceptionRequest != null) {
          oprot.writeFieldBegin(ADD_EXCEPTION_REQUEST_FIELD_DESC);
          struct.addExceptionRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addQuantException_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addQuantException_argsTupleScheme getScheme() {
        return new addQuantException_argsTupleScheme();
      }
    }

    private static class addQuantException_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addQuantException_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addQuantException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAddExceptionRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAddExceptionRequest()) {
          struct.addExceptionRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addQuantException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.addExceptionRequest = new com.jd.quant.core.domain.thrift.TQuantAddExceptionRequest();
          struct.addExceptionRequest.read(iprot);
          struct.setAddExceptionRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addQuantException_result implements org.apache.thrift.TBase<addQuantException_result, addQuantException_result._Fields>, java.io.Serializable, Cloneable, Comparable<addQuantException_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addQuantException_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addQuantException_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addQuantException_resultTupleSchemeFactory();

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jd.quant.core.domain.thrift.TQuantCoreResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addQuantException_result.class, metaDataMap);
    }

    public addQuantException_result() {
    }

    public addQuantException_result(
      com.jd.quant.core.domain.thrift.TQuantCoreResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addQuantException_result(addQuantException_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jd.quant.core.domain.thrift.TQuantCoreResponse(other.success);
      }
    }

    public addQuantException_result deepCopy() {
      return new addQuantException_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse getSuccess() {
      return this.success;
    }

    public addQuantException_result setSuccess(com.jd.quant.core.domain.thrift.TQuantCoreResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jd.quant.core.domain.thrift.TQuantCoreResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addQuantException_result)
        return this.equals((addQuantException_result)that);
      return false;
    }

    public boolean equals(addQuantException_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addQuantException_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addQuantException_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addQuantException_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addQuantException_resultStandardScheme getScheme() {
        return new addQuantException_resultStandardScheme();
      }
    }

    private static class addQuantException_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addQuantException_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addQuantException_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jd.quant.core.domain.thrift.TQuantCoreResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addQuantException_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addQuantException_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addQuantException_resultTupleScheme getScheme() {
        return new addQuantException_resultTupleScheme();
      }
    }

    private static class addQuantException_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addQuantException_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addQuantException_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addQuantException_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jd.quant.core.domain.thrift.TQuantCoreResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveResult_args implements org.apache.thrift.TBase<saveResult_args, saveResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveResult_args");

    private static final org.apache.thrift.protocol.TField SAVE_RESULT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("saveResultRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveResult_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveResult_argsTupleSchemeFactory();

    public com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest saveResultRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SAVE_RESULT_REQUEST((short)1, "saveResultRequest");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SAVE_RESULT_REQUEST
            return SAVE_RESULT_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SAVE_RESULT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("saveResultRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveResult_args.class, metaDataMap);
    }

    public saveResult_args() {
    }

    public saveResult_args(
      com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest saveResultRequest)
    {
      this();
      this.saveResultRequest = saveResultRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveResult_args(saveResult_args other) {
      if (other.isSetSaveResultRequest()) {
        this.saveResultRequest = new com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest(other.saveResultRequest);
      }
    }

    public saveResult_args deepCopy() {
      return new saveResult_args(this);
    }

    @Override
    public void clear() {
      this.saveResultRequest = null;
    }

    public com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest getSaveResultRequest() {
      return this.saveResultRequest;
    }

    public saveResult_args setSaveResultRequest(com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest saveResultRequest) {
      this.saveResultRequest = saveResultRequest;
      return this;
    }

    public void unsetSaveResultRequest() {
      this.saveResultRequest = null;
    }

    /** Returns true if field saveResultRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetSaveResultRequest() {
      return this.saveResultRequest != null;
    }

    public void setSaveResultRequestIsSet(boolean value) {
      if (!value) {
        this.saveResultRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SAVE_RESULT_REQUEST:
        if (value == null) {
          unsetSaveResultRequest();
        } else {
          setSaveResultRequest((com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SAVE_RESULT_REQUEST:
        return getSaveResultRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SAVE_RESULT_REQUEST:
        return isSetSaveResultRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveResult_args)
        return this.equals((saveResult_args)that);
      return false;
    }

    public boolean equals(saveResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_saveResultRequest = true && this.isSetSaveResultRequest();
      boolean that_present_saveResultRequest = true && that.isSetSaveResultRequest();
      if (this_present_saveResultRequest || that_present_saveResultRequest) {
        if (!(this_present_saveResultRequest && that_present_saveResultRequest))
          return false;
        if (!this.saveResultRequest.equals(that.saveResultRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSaveResultRequest()) ? 131071 : 524287);
      if (isSetSaveResultRequest())
        hashCode = hashCode * 8191 + saveResultRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSaveResultRequest()).compareTo(other.isSetSaveResultRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSaveResultRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveResultRequest, other.saveResultRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveResult_args(");
      boolean first = true;

      sb.append("saveResultRequest:");
      if (this.saveResultRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.saveResultRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (saveResultRequest != null) {
        saveResultRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveResult_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveResult_argsStandardScheme getScheme() {
        return new saveResult_argsStandardScheme();
      }
    }

    private static class saveResult_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SAVE_RESULT_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.saveResultRequest = new com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest();
                struct.saveResultRequest.read(iprot);
                struct.setSaveResultRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.saveResultRequest != null) {
          oprot.writeFieldBegin(SAVE_RESULT_REQUEST_FIELD_DESC);
          struct.saveResultRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveResult_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveResult_argsTupleScheme getScheme() {
        return new saveResult_argsTupleScheme();
      }
    }

    private static class saveResult_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSaveResultRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSaveResultRequest()) {
          struct.saveResultRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.saveResultRequest = new com.jd.quant.core.domain.thrift.TQuantSaveResultTaskRequest();
          struct.saveResultRequest.read(iprot);
          struct.setSaveResultRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveResult_result implements org.apache.thrift.TBase<saveResult_result, saveResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveResult_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveResult_resultTupleSchemeFactory();

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jd.quant.core.domain.thrift.TQuantCoreResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveResult_result.class, metaDataMap);
    }

    public saveResult_result() {
    }

    public saveResult_result(
      com.jd.quant.core.domain.thrift.TQuantCoreResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveResult_result(saveResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jd.quant.core.domain.thrift.TQuantCoreResponse(other.success);
      }
    }

    public saveResult_result deepCopy() {
      return new saveResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse getSuccess() {
      return this.success;
    }

    public saveResult_result setSuccess(com.jd.quant.core.domain.thrift.TQuantCoreResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jd.quant.core.domain.thrift.TQuantCoreResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveResult_result)
        return this.equals((saveResult_result)that);
      return false;
    }

    public boolean equals(saveResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveResult_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveResult_resultStandardScheme getScheme() {
        return new saveResult_resultStandardScheme();
      }
    }

    private static class saveResult_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jd.quant.core.domain.thrift.TQuantCoreResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveResult_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveResult_resultTupleScheme getScheme() {
        return new saveResult_resultTupleScheme();
      }
    }

    private static class saveResult_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jd.quant.core.domain.thrift.TQuantCoreResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveResultByInfoPacksForRegression_args implements org.apache.thrift.TBase<saveResultByInfoPacksForRegression_args, saveResultByInfoPacksForRegression_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveResultByInfoPacksForRegression_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveResultByInfoPacksForRegression_args");

    private static final org.apache.thrift.protocol.TField SAVE_RESULT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("saveResultRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveResultByInfoPacksForRegression_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveResultByInfoPacksForRegression_argsTupleSchemeFactory();

    public com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SAVE_RESULT_REQUEST((short)1, "saveResultRequest");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SAVE_RESULT_REQUEST
            return SAVE_RESULT_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SAVE_RESULT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("saveResultRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jd.quant.core.domain.thrift.TQuantSaveResultRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveResultByInfoPacksForRegression_args.class, metaDataMap);
    }

    public saveResultByInfoPacksForRegression_args() {
    }

    public saveResultByInfoPacksForRegression_args(
      com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest)
    {
      this();
      this.saveResultRequest = saveResultRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveResultByInfoPacksForRegression_args(saveResultByInfoPacksForRegression_args other) {
      if (other.isSetSaveResultRequest()) {
        this.saveResultRequest = new com.jd.quant.core.domain.thrift.TQuantSaveResultRequest(other.saveResultRequest);
      }
    }

    public saveResultByInfoPacksForRegression_args deepCopy() {
      return new saveResultByInfoPacksForRegression_args(this);
    }

    @Override
    public void clear() {
      this.saveResultRequest = null;
    }

    public com.jd.quant.core.domain.thrift.TQuantSaveResultRequest getSaveResultRequest() {
      return this.saveResultRequest;
    }

    public saveResultByInfoPacksForRegression_args setSaveResultRequest(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest) {
      this.saveResultRequest = saveResultRequest;
      return this;
    }

    public void unsetSaveResultRequest() {
      this.saveResultRequest = null;
    }

    /** Returns true if field saveResultRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetSaveResultRequest() {
      return this.saveResultRequest != null;
    }

    public void setSaveResultRequestIsSet(boolean value) {
      if (!value) {
        this.saveResultRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SAVE_RESULT_REQUEST:
        if (value == null) {
          unsetSaveResultRequest();
        } else {
          setSaveResultRequest((com.jd.quant.core.domain.thrift.TQuantSaveResultRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SAVE_RESULT_REQUEST:
        return getSaveResultRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SAVE_RESULT_REQUEST:
        return isSetSaveResultRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveResultByInfoPacksForRegression_args)
        return this.equals((saveResultByInfoPacksForRegression_args)that);
      return false;
    }

    public boolean equals(saveResultByInfoPacksForRegression_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_saveResultRequest = true && this.isSetSaveResultRequest();
      boolean that_present_saveResultRequest = true && that.isSetSaveResultRequest();
      if (this_present_saveResultRequest || that_present_saveResultRequest) {
        if (!(this_present_saveResultRequest && that_present_saveResultRequest))
          return false;
        if (!this.saveResultRequest.equals(that.saveResultRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSaveResultRequest()) ? 131071 : 524287);
      if (isSetSaveResultRequest())
        hashCode = hashCode * 8191 + saveResultRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveResultByInfoPacksForRegression_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSaveResultRequest()).compareTo(other.isSetSaveResultRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSaveResultRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveResultRequest, other.saveResultRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveResultByInfoPacksForRegression_args(");
      boolean first = true;

      sb.append("saveResultRequest:");
      if (this.saveResultRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.saveResultRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (saveResultRequest != null) {
        saveResultRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveResultByInfoPacksForRegression_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveResultByInfoPacksForRegression_argsStandardScheme getScheme() {
        return new saveResultByInfoPacksForRegression_argsStandardScheme();
      }
    }

    private static class saveResultByInfoPacksForRegression_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveResultByInfoPacksForRegression_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveResultByInfoPacksForRegression_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SAVE_RESULT_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.saveResultRequest = new com.jd.quant.core.domain.thrift.TQuantSaveResultRequest();
                struct.saveResultRequest.read(iprot);
                struct.setSaveResultRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveResultByInfoPacksForRegression_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.saveResultRequest != null) {
          oprot.writeFieldBegin(SAVE_RESULT_REQUEST_FIELD_DESC);
          struct.saveResultRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveResultByInfoPacksForRegression_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveResultByInfoPacksForRegression_argsTupleScheme getScheme() {
        return new saveResultByInfoPacksForRegression_argsTupleScheme();
      }
    }

    private static class saveResultByInfoPacksForRegression_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveResultByInfoPacksForRegression_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveResultByInfoPacksForRegression_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSaveResultRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSaveResultRequest()) {
          struct.saveResultRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveResultByInfoPacksForRegression_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.saveResultRequest = new com.jd.quant.core.domain.thrift.TQuantSaveResultRequest();
          struct.saveResultRequest.read(iprot);
          struct.setSaveResultRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveResultByInfoPacksForRegression_result implements org.apache.thrift.TBase<saveResultByInfoPacksForRegression_result, saveResultByInfoPacksForRegression_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveResultByInfoPacksForRegression_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveResultByInfoPacksForRegression_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveResultByInfoPacksForRegression_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveResultByInfoPacksForRegression_resultTupleSchemeFactory();

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jd.quant.core.domain.thrift.TQuantCoreResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveResultByInfoPacksForRegression_result.class, metaDataMap);
    }

    public saveResultByInfoPacksForRegression_result() {
    }

    public saveResultByInfoPacksForRegression_result(
      com.jd.quant.core.domain.thrift.TQuantCoreResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveResultByInfoPacksForRegression_result(saveResultByInfoPacksForRegression_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jd.quant.core.domain.thrift.TQuantCoreResponse(other.success);
      }
    }

    public saveResultByInfoPacksForRegression_result deepCopy() {
      return new saveResultByInfoPacksForRegression_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse getSuccess() {
      return this.success;
    }

    public saveResultByInfoPacksForRegression_result setSuccess(com.jd.quant.core.domain.thrift.TQuantCoreResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jd.quant.core.domain.thrift.TQuantCoreResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveResultByInfoPacksForRegression_result)
        return this.equals((saveResultByInfoPacksForRegression_result)that);
      return false;
    }

    public boolean equals(saveResultByInfoPacksForRegression_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveResultByInfoPacksForRegression_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveResultByInfoPacksForRegression_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveResultByInfoPacksForRegression_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveResultByInfoPacksForRegression_resultStandardScheme getScheme() {
        return new saveResultByInfoPacksForRegression_resultStandardScheme();
      }
    }

    private static class saveResultByInfoPacksForRegression_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveResultByInfoPacksForRegression_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveResultByInfoPacksForRegression_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jd.quant.core.domain.thrift.TQuantCoreResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveResultByInfoPacksForRegression_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveResultByInfoPacksForRegression_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveResultByInfoPacksForRegression_resultTupleScheme getScheme() {
        return new saveResultByInfoPacksForRegression_resultTupleScheme();
      }
    }

    private static class saveResultByInfoPacksForRegression_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveResultByInfoPacksForRegression_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveResultByInfoPacksForRegression_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveResultByInfoPacksForRegression_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jd.quant.core.domain.thrift.TQuantCoreResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveResultByInfoPacksForSimulation_args implements org.apache.thrift.TBase<saveResultByInfoPacksForSimulation_args, saveResultByInfoPacksForSimulation_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveResultByInfoPacksForSimulation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveResultByInfoPacksForSimulation_args");

    private static final org.apache.thrift.protocol.TField SAVE_RESULT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("saveResultRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveResultByInfoPacksForSimulation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveResultByInfoPacksForSimulation_argsTupleSchemeFactory();

    public com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SAVE_RESULT_REQUEST((short)1, "saveResultRequest");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SAVE_RESULT_REQUEST
            return SAVE_RESULT_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SAVE_RESULT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("saveResultRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jd.quant.core.domain.thrift.TQuantSaveResultRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveResultByInfoPacksForSimulation_args.class, metaDataMap);
    }

    public saveResultByInfoPacksForSimulation_args() {
    }

    public saveResultByInfoPacksForSimulation_args(
      com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest)
    {
      this();
      this.saveResultRequest = saveResultRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveResultByInfoPacksForSimulation_args(saveResultByInfoPacksForSimulation_args other) {
      if (other.isSetSaveResultRequest()) {
        this.saveResultRequest = new com.jd.quant.core.domain.thrift.TQuantSaveResultRequest(other.saveResultRequest);
      }
    }

    public saveResultByInfoPacksForSimulation_args deepCopy() {
      return new saveResultByInfoPacksForSimulation_args(this);
    }

    @Override
    public void clear() {
      this.saveResultRequest = null;
    }

    public com.jd.quant.core.domain.thrift.TQuantSaveResultRequest getSaveResultRequest() {
      return this.saveResultRequest;
    }

    public saveResultByInfoPacksForSimulation_args setSaveResultRequest(com.jd.quant.core.domain.thrift.TQuantSaveResultRequest saveResultRequest) {
      this.saveResultRequest = saveResultRequest;
      return this;
    }

    public void unsetSaveResultRequest() {
      this.saveResultRequest = null;
    }

    /** Returns true if field saveResultRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetSaveResultRequest() {
      return this.saveResultRequest != null;
    }

    public void setSaveResultRequestIsSet(boolean value) {
      if (!value) {
        this.saveResultRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SAVE_RESULT_REQUEST:
        if (value == null) {
          unsetSaveResultRequest();
        } else {
          setSaveResultRequest((com.jd.quant.core.domain.thrift.TQuantSaveResultRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SAVE_RESULT_REQUEST:
        return getSaveResultRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SAVE_RESULT_REQUEST:
        return isSetSaveResultRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveResultByInfoPacksForSimulation_args)
        return this.equals((saveResultByInfoPacksForSimulation_args)that);
      return false;
    }

    public boolean equals(saveResultByInfoPacksForSimulation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_saveResultRequest = true && this.isSetSaveResultRequest();
      boolean that_present_saveResultRequest = true && that.isSetSaveResultRequest();
      if (this_present_saveResultRequest || that_present_saveResultRequest) {
        if (!(this_present_saveResultRequest && that_present_saveResultRequest))
          return false;
        if (!this.saveResultRequest.equals(that.saveResultRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSaveResultRequest()) ? 131071 : 524287);
      if (isSetSaveResultRequest())
        hashCode = hashCode * 8191 + saveResultRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveResultByInfoPacksForSimulation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSaveResultRequest()).compareTo(other.isSetSaveResultRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSaveResultRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveResultRequest, other.saveResultRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveResultByInfoPacksForSimulation_args(");
      boolean first = true;

      sb.append("saveResultRequest:");
      if (this.saveResultRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.saveResultRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (saveResultRequest != null) {
        saveResultRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveResultByInfoPacksForSimulation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveResultByInfoPacksForSimulation_argsStandardScheme getScheme() {
        return new saveResultByInfoPacksForSimulation_argsStandardScheme();
      }
    }

    private static class saveResultByInfoPacksForSimulation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveResultByInfoPacksForSimulation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveResultByInfoPacksForSimulation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SAVE_RESULT_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.saveResultRequest = new com.jd.quant.core.domain.thrift.TQuantSaveResultRequest();
                struct.saveResultRequest.read(iprot);
                struct.setSaveResultRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveResultByInfoPacksForSimulation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.saveResultRequest != null) {
          oprot.writeFieldBegin(SAVE_RESULT_REQUEST_FIELD_DESC);
          struct.saveResultRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveResultByInfoPacksForSimulation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveResultByInfoPacksForSimulation_argsTupleScheme getScheme() {
        return new saveResultByInfoPacksForSimulation_argsTupleScheme();
      }
    }

    private static class saveResultByInfoPacksForSimulation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveResultByInfoPacksForSimulation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveResultByInfoPacksForSimulation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSaveResultRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSaveResultRequest()) {
          struct.saveResultRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveResultByInfoPacksForSimulation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.saveResultRequest = new com.jd.quant.core.domain.thrift.TQuantSaveResultRequest();
          struct.saveResultRequest.read(iprot);
          struct.setSaveResultRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveResultByInfoPacksForSimulation_result implements org.apache.thrift.TBase<saveResultByInfoPacksForSimulation_result, saveResultByInfoPacksForSimulation_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveResultByInfoPacksForSimulation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveResultByInfoPacksForSimulation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveResultByInfoPacksForSimulation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveResultByInfoPacksForSimulation_resultTupleSchemeFactory();

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jd.quant.core.domain.thrift.TQuantCoreResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveResultByInfoPacksForSimulation_result.class, metaDataMap);
    }

    public saveResultByInfoPacksForSimulation_result() {
    }

    public saveResultByInfoPacksForSimulation_result(
      com.jd.quant.core.domain.thrift.TQuantCoreResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveResultByInfoPacksForSimulation_result(saveResultByInfoPacksForSimulation_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jd.quant.core.domain.thrift.TQuantCoreResponse(other.success);
      }
    }

    public saveResultByInfoPacksForSimulation_result deepCopy() {
      return new saveResultByInfoPacksForSimulation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.jd.quant.core.domain.thrift.TQuantCoreResponse getSuccess() {
      return this.success;
    }

    public saveResultByInfoPacksForSimulation_result setSuccess(com.jd.quant.core.domain.thrift.TQuantCoreResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jd.quant.core.domain.thrift.TQuantCoreResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveResultByInfoPacksForSimulation_result)
        return this.equals((saveResultByInfoPacksForSimulation_result)that);
      return false;
    }

    public boolean equals(saveResultByInfoPacksForSimulation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveResultByInfoPacksForSimulation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveResultByInfoPacksForSimulation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveResultByInfoPacksForSimulation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveResultByInfoPacksForSimulation_resultStandardScheme getScheme() {
        return new saveResultByInfoPacksForSimulation_resultStandardScheme();
      }
    }

    private static class saveResultByInfoPacksForSimulation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveResultByInfoPacksForSimulation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveResultByInfoPacksForSimulation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jd.quant.core.domain.thrift.TQuantCoreResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveResultByInfoPacksForSimulation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveResultByInfoPacksForSimulation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveResultByInfoPacksForSimulation_resultTupleScheme getScheme() {
        return new saveResultByInfoPacksForSimulation_resultTupleScheme();
      }
    }

    private static class saveResultByInfoPacksForSimulation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveResultByInfoPacksForSimulation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveResultByInfoPacksForSimulation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveResultByInfoPacksForSimulation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jd.quant.core.domain.thrift.TQuantCoreResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getInfoPacks_args implements org.apache.thrift.TBase<getInfoPacks_args, getInfoPacks_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInfoPacks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfoPacks_args");

    private static final org.apache.thrift.protocol.TField TASK_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("taskRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInfoPacks_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInfoPacks_argsTupleSchemeFactory();

    public com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_REQUEST((short)1, "taskRequest");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_REQUEST
            return TASK_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("taskRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jd.quant.core.domain.thrift.TQuantTaskRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfoPacks_args.class, metaDataMap);
    }

    public getInfoPacks_args() {
    }

    public getInfoPacks_args(
      com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest)
    {
      this();
      this.taskRequest = taskRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInfoPacks_args(getInfoPacks_args other) {
      if (other.isSetTaskRequest()) {
        this.taskRequest = new com.jd.quant.core.domain.thrift.TQuantTaskRequest(other.taskRequest);
      }
    }

    public getInfoPacks_args deepCopy() {
      return new getInfoPacks_args(this);
    }

    @Override
    public void clear() {
      this.taskRequest = null;
    }

    public com.jd.quant.core.domain.thrift.TQuantTaskRequest getTaskRequest() {
      return this.taskRequest;
    }

    public getInfoPacks_args setTaskRequest(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest) {
      this.taskRequest = taskRequest;
      return this;
    }

    public void unsetTaskRequest() {
      this.taskRequest = null;
    }

    /** Returns true if field taskRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskRequest() {
      return this.taskRequest != null;
    }

    public void setTaskRequestIsSet(boolean value) {
      if (!value) {
        this.taskRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_REQUEST:
        if (value == null) {
          unsetTaskRequest();
        } else {
          setTaskRequest((com.jd.quant.core.domain.thrift.TQuantTaskRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_REQUEST:
        return getTaskRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_REQUEST:
        return isSetTaskRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInfoPacks_args)
        return this.equals((getInfoPacks_args)that);
      return false;
    }

    public boolean equals(getInfoPacks_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_taskRequest = true && this.isSetTaskRequest();
      boolean that_present_taskRequest = true && that.isSetTaskRequest();
      if (this_present_taskRequest || that_present_taskRequest) {
        if (!(this_present_taskRequest && that_present_taskRequest))
          return false;
        if (!this.taskRequest.equals(that.taskRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTaskRequest()) ? 131071 : 524287);
      if (isSetTaskRequest())
        hashCode = hashCode * 8191 + taskRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getInfoPacks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskRequest()).compareTo(other.isSetTaskRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskRequest, other.taskRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInfoPacks_args(");
      boolean first = true;

      sb.append("taskRequest:");
      if (this.taskRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.taskRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (taskRequest != null) {
        taskRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInfoPacks_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInfoPacks_argsStandardScheme getScheme() {
        return new getInfoPacks_argsStandardScheme();
      }
    }

    private static class getInfoPacks_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getInfoPacks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInfoPacks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.taskRequest = new com.jd.quant.core.domain.thrift.TQuantTaskRequest();
                struct.taskRequest.read(iprot);
                struct.setTaskRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInfoPacks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskRequest != null) {
          oprot.writeFieldBegin(TASK_REQUEST_FIELD_DESC);
          struct.taskRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInfoPacks_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInfoPacks_argsTupleScheme getScheme() {
        return new getInfoPacks_argsTupleScheme();
      }
    }

    private static class getInfoPacks_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInfoPacks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInfoPacks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTaskRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTaskRequest()) {
          struct.taskRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInfoPacks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.taskRequest = new com.jd.quant.core.domain.thrift.TQuantTaskRequest();
          struct.taskRequest.read(iprot);
          struct.setTaskRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getInfoPacks_result implements org.apache.thrift.TBase<getInfoPacks_result, getInfoPacks_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInfoPacks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfoPacks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInfoPacks_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInfoPacks_resultTupleSchemeFactory();

    public com.jd.quant.core.domain.thrift.TQuantGetInfoResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jd.quant.core.domain.thrift.TQuantGetInfoResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfoPacks_result.class, metaDataMap);
    }

    public getInfoPacks_result() {
    }

    public getInfoPacks_result(
      com.jd.quant.core.domain.thrift.TQuantGetInfoResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInfoPacks_result(getInfoPacks_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jd.quant.core.domain.thrift.TQuantGetInfoResponse(other.success);
      }
    }

    public getInfoPacks_result deepCopy() {
      return new getInfoPacks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.jd.quant.core.domain.thrift.TQuantGetInfoResponse getSuccess() {
      return this.success;
    }

    public getInfoPacks_result setSuccess(com.jd.quant.core.domain.thrift.TQuantGetInfoResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jd.quant.core.domain.thrift.TQuantGetInfoResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInfoPacks_result)
        return this.equals((getInfoPacks_result)that);
      return false;
    }

    public boolean equals(getInfoPacks_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getInfoPacks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInfoPacks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInfoPacks_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInfoPacks_resultStandardScheme getScheme() {
        return new getInfoPacks_resultStandardScheme();
      }
    }

    private static class getInfoPacks_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getInfoPacks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInfoPacks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jd.quant.core.domain.thrift.TQuantGetInfoResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInfoPacks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInfoPacks_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInfoPacks_resultTupleScheme getScheme() {
        return new getInfoPacks_resultTupleScheme();
      }
    }

    private static class getInfoPacks_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInfoPacks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInfoPacks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInfoPacks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jd.quant.core.domain.thrift.TQuantGetInfoResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getHistoryResult_args implements org.apache.thrift.TBase<getHistoryResult_args, getHistoryResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryResult_args");

    private static final org.apache.thrift.protocol.TField TASK_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("taskRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHistoryResult_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHistoryResult_argsTupleSchemeFactory();

    public com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_REQUEST((short)1, "taskRequest");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_REQUEST
            return TASK_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("taskRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jd.quant.core.domain.thrift.TQuantTaskRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryResult_args.class, metaDataMap);
    }

    public getHistoryResult_args() {
    }

    public getHistoryResult_args(
      com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest)
    {
      this();
      this.taskRequest = taskRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryResult_args(getHistoryResult_args other) {
      if (other.isSetTaskRequest()) {
        this.taskRequest = new com.jd.quant.core.domain.thrift.TQuantTaskRequest(other.taskRequest);
      }
    }

    public getHistoryResult_args deepCopy() {
      return new getHistoryResult_args(this);
    }

    @Override
    public void clear() {
      this.taskRequest = null;
    }

    public com.jd.quant.core.domain.thrift.TQuantTaskRequest getTaskRequest() {
      return this.taskRequest;
    }

    public getHistoryResult_args setTaskRequest(com.jd.quant.core.domain.thrift.TQuantTaskRequest taskRequest) {
      this.taskRequest = taskRequest;
      return this;
    }

    public void unsetTaskRequest() {
      this.taskRequest = null;
    }

    /** Returns true if field taskRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskRequest() {
      return this.taskRequest != null;
    }

    public void setTaskRequestIsSet(boolean value) {
      if (!value) {
        this.taskRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_REQUEST:
        if (value == null) {
          unsetTaskRequest();
        } else {
          setTaskRequest((com.jd.quant.core.domain.thrift.TQuantTaskRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_REQUEST:
        return getTaskRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_REQUEST:
        return isSetTaskRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryResult_args)
        return this.equals((getHistoryResult_args)that);
      return false;
    }

    public boolean equals(getHistoryResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_taskRequest = true && this.isSetTaskRequest();
      boolean that_present_taskRequest = true && that.isSetTaskRequest();
      if (this_present_taskRequest || that_present_taskRequest) {
        if (!(this_present_taskRequest && that_present_taskRequest))
          return false;
        if (!this.taskRequest.equals(that.taskRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTaskRequest()) ? 131071 : 524287);
      if (isSetTaskRequest())
        hashCode = hashCode * 8191 + taskRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getHistoryResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskRequest()).compareTo(other.isSetTaskRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskRequest, other.taskRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryResult_args(");
      boolean first = true;

      sb.append("taskRequest:");
      if (this.taskRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.taskRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (taskRequest != null) {
        taskRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryResult_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHistoryResult_argsStandardScheme getScheme() {
        return new getHistoryResult_argsStandardScheme();
      }
    }

    private static class getHistoryResult_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHistoryResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.taskRequest = new com.jd.quant.core.domain.thrift.TQuantTaskRequest();
                struct.taskRequest.read(iprot);
                struct.setTaskRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskRequest != null) {
          oprot.writeFieldBegin(TASK_REQUEST_FIELD_DESC);
          struct.taskRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryResult_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHistoryResult_argsTupleScheme getScheme() {
        return new getHistoryResult_argsTupleScheme();
      }
    }

    private static class getHistoryResult_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHistoryResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTaskRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTaskRequest()) {
          struct.taskRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.taskRequest = new com.jd.quant.core.domain.thrift.TQuantTaskRequest();
          struct.taskRequest.read(iprot);
          struct.setTaskRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getHistoryResult_result implements org.apache.thrift.TBase<getHistoryResult_result, getHistoryResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHistoryResult_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHistoryResult_resultTupleSchemeFactory();

    public com.jd.quant.core.domain.thrift.TQuantGetResultResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jd.quant.core.domain.thrift.TQuantGetResultResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryResult_result.class, metaDataMap);
    }

    public getHistoryResult_result() {
    }

    public getHistoryResult_result(
      com.jd.quant.core.domain.thrift.TQuantGetResultResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryResult_result(getHistoryResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jd.quant.core.domain.thrift.TQuantGetResultResponse(other.success);
      }
    }

    public getHistoryResult_result deepCopy() {
      return new getHistoryResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.jd.quant.core.domain.thrift.TQuantGetResultResponse getSuccess() {
      return this.success;
    }

    public getHistoryResult_result setSuccess(com.jd.quant.core.domain.thrift.TQuantGetResultResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jd.quant.core.domain.thrift.TQuantGetResultResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryResult_result)
        return this.equals((getHistoryResult_result)that);
      return false;
    }

    public boolean equals(getHistoryResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getHistoryResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryResult_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHistoryResult_resultStandardScheme getScheme() {
        return new getHistoryResult_resultStandardScheme();
      }
    }

    private static class getHistoryResult_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHistoryResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jd.quant.core.domain.thrift.TQuantGetResultResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryResult_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHistoryResult_resultTupleScheme getScheme() {
        return new getHistoryResult_resultTupleScheme();
      }
    }

    private static class getHistoryResult_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHistoryResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jd.quant.core.domain.thrift.TQuantGetResultResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
